AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

2882 lines read, no errors in pass 1.
                        ;
                        ; 6 5 C 0 2   E X T E N D E D   O P C O D E S   T E S 
                        ;
                        ; Copyright (C) 2013-2017  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute 
                        ; it under the terms of the GNU General Public License
                        ; the Free Software Foundation, either version 3 of th
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will
                        ; but WITHOUT ANY WARRANTY; without even the implied w
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General P
                        ; along with this program.  If not, see <http://www.gn
                        
                        
                        ; This program is designed to test all additional 65C0
                        ; modes and functionality not available in the NMOS ve
                        ; The 6502_functional_test is a prerequisite to this t
                        ; NMI, IRQ, STP & WAI are covered in the 6502_interrup
                        ;
                        ; version 04-dec-2017
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consul
                        ; command line switches: -l -m -s2 -w -x -h0
                        ;                         |  |  |   |  |  no page head
                        ;                         |  |  |   |  65C02 extension
                        ;                         |  |  |   wide listing (133 
                        ;                         |  |  write intel hex file i
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to 
                        ; To run load intel hex image with a load command, tha
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successf
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions wi
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapp
                        ; Tests documented behavior of the original 65C02 only
                        ; Decimal ops will only be tested with valid BCD opera
                        ; be ignored as it is absolutely useless in decimal mo
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you
                        ;   immediately preceeding code for the instruction to
                        ;   tested first, flags are checked second by pushing 
                        ;   pulling them to the accumulator after the result w
                        ;   flags are no longer valid for the tested instructi
                        ;     If the tested instruction was indexed, the relev
                        ;   also be checked. Opposed to the flags, X and Y reg
                        ;
                        ; versions:
                        ;   19-jul-2013  1st version distributed for testing
                        ;   23-jul-2013  fixed BRA out of range due to larger 
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        ;                added RAM integrity check
                        ;   16-aug-2013  added error report to standard output
                        ;   23-aug-2015  change revoked
                        ;   24-aug-2015  all self modifying immediate opcodes 
                        ;   28-aug-2015  fixed decimal adc/sbc immediate only 
                        ;   09-feb-2017  fixed RMB/SMB tested when they should
                        ;   04-dec-2017  fixed BRK not tested for actually goi
                        ;                added option to skip the remainder of
                        ;                in report.i65
                        ;                added skip override to undefined opco
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be
                        ;as a consequence BRK can not be tested but will be em
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load di
                        ;loading directly is preferred but may not be supporte
                        ;0 produces only consecutive object code, 1 is not sui
0000 =                  load_data_direct = 0
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2
                        ;change) 2 requires extra code and is not recommended.
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used 
                        ;zero_page memory start address, $4e (78) consecutive 
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a
                        
                        ;data_segment memory start address, $63 (99) consecuti
                        ; + 12 Bytes at data_segment + $f9 (JMP indirect page 
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUS
                            endif
                        
                        ;code_segment memory start address, 10kB of consecutiv
                        ;                                   add 1 kB if I_flag
c000 =                  code_segment = $c000
                        
                        ;added WDC only opcodes WAI & STP (0=test as NOPs, >0=
0000 =                  wdc_op = 0
                        
                        ;added Rockwell & WDC opcodes BBR, BBS, RMB & SMB
                        ;(0=test as NOPs, 1=full test, >1=no test)
0001 =                  rkwl_wdc_op = 1
                        
                        ;skip testing all undefined opcodes override
                        ;0=test as NOP, >0=skip
0000 =                  skip_nop = 0
                        
                        ;report errors through I/O channel (0=use standard sel
                        ;report.i65 as I/O channel, add 3 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM w
                        ;set lowest non RAM or RAM mirror address page (-1=dis
                        ;leave disabled if a monitor, OS or background interru
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0010 =                  ram_top = $10
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modifi
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from
                        ; putting larger portions of code (more than 3 bytes) 
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets i
                        ; therefore a RTS inside the success macro is not poss
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets i
                        ; therefore a RTS inside the success macro is not poss
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0030 =                  fao     equ break+reserv    ;bits always on after PHP,
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disabl
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt di
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compa
                        ;masking of always on bits after PHP or BRK (unused & 
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrup
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enab
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interru
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disa
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    cmp #(\1|fao)&m8i   ;expected flags + alwa
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    eor #(\1&m8i|fao)   ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change 
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + alwa
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processo
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & im
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & im
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & imme
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate 
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & 
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & 
                        tst_stat    macro       ;testing flags in the processo
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_a       macro       ;testing result in accu & flag
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_as      macro       ;testing result in accu & flag
                                    pha
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    pla
                                    endm
                        
                        tst_x       macro       ;testing result in x index & f
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & f
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                        tst_ax      macro       ;indexed testing result in acc
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in acc
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_z       macro       ;indexed testing result in zp 
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flag
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in mem
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & fla
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    trap_ne
                                    endm
                        
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has alter
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as c
                                if ram_top > -1
                        check_ram   macro
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect 
                                    sta zpt+3       ;checksum high byte
                                    ldx #11         ;reset modifiable RAM
                        ccs1\?      sta jxi_tab,x   ;JMP indirect page cross a
                                    dex
                                    bpl ccs1\?
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write te
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execut
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't ju
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altere
                                    endm
                        
                            if load_data_direct = 1
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                data
                            else
                                bss                 ;uninitialized segment, co
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a =                  irq_a   ds  1               ;a register
000b =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c =                  zpt                         ;5 bytes store/modify test
                        ;add/subtract operand generation and result/flag predi
000c =                  adfc    ds  1               ;carry flag before op
000d =                  ad1     ds  1               ;operand 1 - accumulator
000e =                  ad2     ds  1               ;operand 2 - memory / imme
000f =                  adrl    ds  1               ;expected result bits 0-7
0010 =                  adrh    ds  1               ;expected result bit 8 (ca
0011 =                  adrf    ds  1               ;expected flags NV0000ZC (
0012 =                  sb2     ds  1               ;operand 2 complemented fo
0013 =                  zp_bss
0013 =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT
0017 =                  zp7f    db  $7f             ;test pattern for compare
                        ;logical zeropage operands
0018 =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001c =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0020 =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0024 =                  ind1    dw  abs1            ;indirect pointer to patte
0026 =                          dw  abs1+1
0028 =                          dw  abs1+2
002a =                          dw  abs1+3
002c =                          dw  abs7f
002e =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap
0030 =                  indt    dw  abst            ;indirect pointer to store
0032 =                          dw  abst+1
0034 =                          dw  abst+2
0036 =                          dw  abst+3
0038 =                  inwt    dw  abst-$f8        ;indirect pointer for wrap
003a =                  indAN   dw  absAN           ;indirect pointer to AND p
003c =                          dw  absAN+1
003e =                          dw  absAN+2
0040 =                          dw  absAN+3
0042 =                  indEO   dw  absEO           ;indirect pointer to EOR p
0044 =                          dw  absEO+1
0046 =                          dw  absEO+2
0048 =                          dw  absEO+3
004a =                  indOR   dw  absOR           ;indirect pointer to OR pa
004c =                          dw  absOR+1
004e =                          dw  absOR+2
0050 =                          dw  absOR+3
                        ;add/subtract indirect pointers
0052 =                  adi2    dw  ada2            ;indirect pointer to opera
0054 =                  sbi2    dw  sba2            ;indirect pointer to compl
0056 =                  adiy2   dw  ada2-$ff        ;with offset for indirect 
0058 =                  sbiy2   dw  sba2-$ff
005a =                  zp_bss_end
                        
0200 =                          org data_segment
0200 =                  test_case   ds  1           ;current test number
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0201 =                  ram_chksm   ds  2           ;checksum for RAM integrit
0203 =                  pg_x    ds  2               ;high JMP indirect address
                        ;add/subtract operand copy - abs tests write area
0205 =                  abst                        ;5 bytes store/modify test
0205 =                  ada2    ds  1               ;operand 2
0206 =                  sba2    ds  1               ;operand 2 complemented fo
0207 =                          ds  3               ;fill remaining bytes
020a =                  data_bss
                            if load_data_direct = 1
                        ex_adci adc #0              ;execute immediate opcodes
                                rts
                        ex_sbci sbc #0              ;execute immediate opcodes
                                rts
                            else
020a =                  ex_adci ds  3
020d =                  ex_sbci ds  3
                            endif
0210 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT
0214 =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
0215 =                  fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0219 =                  rASL                        ;expected result ASL & ROL
0219 =                  rROL    db  $86,$04,$82,0   ; "
021d =                  rROLc   db  $87,$05,$83,1   ;expected result ROL +carr
0221 =                  rLSR                        ;expected result LSR & ROR
0221 =                  rROR    db  $61,$41,$20,0   ; "
0225 =                  rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carr
0229 =                  fASL                        ;expected flags for shifts
0229 =                  fROL    db  fnc,fc,fn,fz    ;no carry in
022d =                  fROLc   db  fnc,fc,fn,0     ;carry in
0231 =                  fLSR
0231 =                  fROR    db  fc,0,fc,fz      ;no carry in
0235 =                  fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0239 =                  rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/D
023e =                  fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DE
                        ;logical memory operand
0243 =                  absOR   db  0,$1f,$71,$80   ;test pattern for OR
0247 =                  absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
024b =                  absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
024f =                  absORa  db  0,$f1,$1f,0     ;test pattern for OR
0253 =                  absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
0257 =                  absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
025b =                  absrlo  db  0,$ff,$7f,$80
025f =                  absflo  db  fz,fn,0,fn
0263 =                  data_bss_end
                        ;define area for page crossing JMP (abs) & JMP (abs,x)
02f9 =                  jxi_tab equ data_segment + $100 - 7     ;JMP (jxi_tab,
02fd =                  ji_tab  equ data_segment + $100 - 3     ;JMP (ji_tab+2
0300 =                  jxp_tab equ data_segment + $100         ;JMP (jxp_tab-
                        
                        
                                code
c000 =                          org code_segment
c000 : d8               start   cld
c001 : a2ff                     ldx #$ff
c003 : 9a                       txs
c004 : a900                     lda #0          ;*** test 0 = initialize
c006 : 8d0002                   sta test_case
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                        
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                        
                        ;initialize BSS segment
                            if load_data_direct != 1
c009 : a246                     ldx #zp_end-zp_init-1
c00b : bdbde4           ld_zp   lda zp_init,x
c00e : 9513                     sta zp_bss,x
c010 : ca                       dex
c011 : 10f8                     bpl ld_zp
c013 : a258                     ldx #data_end-data_init-1
c015 : bd04e5           ld_data lda data_init,x
c018 : 9d0a02                   sta data_bss,x
c01b : ca                       dex
c01c : 10f7                     bpl ld_data
                              if ROM_vectors = 1
c01e : a205                     ldx #5
c020 : bd5de5           ld_vect lda vec_init,x
c023 : 9dfaff                   sta vec_bss,x
c026 : ca                       dex
c027 : 10f7                     bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                        
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
c029 : a900                     lda #0
c02b : 850c                     sta zpt         ;set low byte of indirect poin
c02d : 8d0202                   sta ram_chksm+1 ;checksum high byte
c030 : a20b                     ldx #11         ;reset modifiable RAM
c032 : 9df902           gcs1    sta jxi_tab,x   ;JMP indirect page cross area
c035 : ca                       dex
c036 : 10fa                     bpl gcs1
c038 : 18                       clc
c039 : a209                     ldx #zp_bss-zero_page ;zeropage - write test a
c03b : 750a             gcs3    adc zero_page,x
c03d : 9004                     bcc gcs2
c03f : ee0202                   inc ram_chksm+1 ;carry to high byte
c042 : 18                       clc
c043 : e8               gcs2    inx
c044 : d0f5                     bne gcs3
c046 : a202                     ldx #hi(abs1)   ;set high byte of indirect poi
c048 : 860d                     stx zpt+1
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c04a : a010                     ldy #lo(abs1)   ;data after write & execute te
c04c : 710c             gcs5    adc (zpt),y
c04e : 9004                     bcc gcs4
c050 : ee0202                   inc ram_chksm+1 ;carry to high byte
c053 : 18                       clc
c054 : c8               gcs4    iny
c055 : d0f5                     bne gcs5
c057 : e8                       inx             ;advance RAM high address
c058 : 860d                     stx zpt+1
c05a : e010                     cpx #ram_top
c05c : d0ee                     bne gcs5
c05e : 8d0102                   sta ram_chksm   ;checksum complete
                            endif
                                next_test
c061 : ad0002          >            lda test_case   ;previous test
c064 : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c066 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
c068 : a901            >            lda #test_num   ;*** next tests' number
c06a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ;testing stack operations PHX PHY PLX PLY
c06d : a999                     lda #$99        ;protect a
c06f : a2ff                     ldx #$ff        ;initialize stack
c071 : 9a                       txs
c072 : a255                     ldx #$55
c074 : da                       phx
c075 : a2aa                     ldx #$aa
c077 : da                       phx
c078 : ecfe01                   cpx $1fe        ;on stack ?
                                trap_ne
c07b : d0fe            >        bne *           ;failed not equal (non zero)
                        
c07d : ba                       tsx
c07e : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
c080 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c082 : 7a                       ply
c083 : c0aa                     cpy #$aa        ;successful retreived from sta
                                trap_ne
c085 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c087 : 7a                       ply
c088 : c055                     cpy #$55
                                trap_ne
c08a : d0fe            >        bne *           ;failed not equal (non zero)
                        
c08c : ccff01                   cpy $1ff        ;remains on stack?
                                trap_ne
c08f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c091 : ba                       tsx
c092 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
c094 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c096 : a0a5                     ldy #$a5
c098 : 5a                       phy
c099 : a05a                     ldy #$5a
c09b : 5a                       phy
c09c : ccfe01                   cpy $1fe        ;on stack ?
                                trap_ne
c09f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0a1 : ba                       tsx
c0a2 : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
c0a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0a6 : fa                       plx
c0a7 : e05a                     cpx #$5a        ;successful retreived from sta
                                trap_ne
c0a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0ab : fa                       plx
c0ac : e0a5                     cpx #$a5
                                trap_ne
c0ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0b0 : ecff01                   cpx $1ff        ;remains on stack?
                                trap_ne
c0b3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0b5 : ba                       tsx
c0b6 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
c0b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0ba : c999                     cmp #$99        ;unchanged?
                                trap_ne
c0bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c0be : ad0002          >            lda test_case   ;previous test
c0c1 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c0c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
c0c5 : a902            >            lda #test_num   ;*** next tests' number
c0c7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; test PHX does not alter flags or X but PLX does
c0ca : a0aa                     ldy #$aa        ;protect y
                                set_x 1,$ff     ;push
                       >            load_flag $ff     
c0cc : a9ff            >            lda #$ff                  ;allow test to c
                       >
c0ce : 48              >            pha         ;use stack to load status
c0cf : a201            >            ldx #1     ;precharge index x
c0d1 : 28              >            plp
                        
c0d2 : da                       phx
                                tst_x 1,$ff
c0d3 : 08              >            php         ;save flags
c0d4 : e001            >            cpx #1     ;test result
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
c0d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0d8 : 68              >            pla         ;load status
c0d9 : 48              >            pha
                       >            cmp_flag $ff
c0da : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c0dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0de : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
c0df : a900            >            lda #0             ;allow test to change I
                       >
c0e1 : 48              >            pha         ;use stack to load status
c0e2 : a200            >            ldx #0     ;precharge index x
c0e4 : 28              >            plp
                        
c0e5 : da                       phx
                                tst_x 0,0
c0e6 : 08              >            php         ;save flags
c0e7 : e000            >            cpx #0     ;test result
                       >            trap_ne
c0e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0eb : 68              >            pla         ;load status
c0ec : 48              >            pha
                       >            cmp_flag 0
c0ed : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c0ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0f1 : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
c0f2 : a9ff            >            lda #$ff             ;allow test to change
                       >
c0f4 : 48              >            pha         ;use stack to load status
c0f5 : a2ff            >            ldx #$ff     ;precharge index x
c0f7 : 28              >            plp
                        
c0f8 : da                       phx
                                tst_x $ff,$ff
c0f9 : 08              >            php         ;save flags
c0fa : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c0fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0fe : 68              >            pla         ;load status
c0ff : 48              >            pha
                       >            cmp_flag $ff
c100 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c102 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c104 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                                set_x 1,0
                       >            load_flag 0
c105 : a900            >            lda #0             ;allow test to change I
                       >
c107 : 48              >            pha         ;use stack to load status
c108 : a201            >            ldx #1     ;precharge index x
c10a : 28              >            plp
                        
c10b : da                       phx
                                tst_x 1,0
c10c : 08              >            php         ;save flags
c10d : e001            >            cpx #1     ;test result
                       >            trap_ne
c10f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c111 : 68              >            pla         ;load status
c112 : 48              >            pha
                       >            cmp_flag 0
c113 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c115 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c117 : 28              >            plp         ;restore status
                        
                                set_x 0,$ff
                       >            load_flag $ff
c118 : a9ff            >            lda #$ff             ;allow test to change
                       >
c11a : 48              >            pha         ;use stack to load status
c11b : a200            >            ldx #0     ;precharge index x
c11d : 28              >            plp
                        
c11e : da                       phx
                                tst_x 0,$ff
c11f : 08              >            php         ;save flags
c120 : e000            >            cpx #0     ;test result
                       >            trap_ne
c122 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c124 : 68              >            pla         ;load status
c125 : 48              >            pha
                       >            cmp_flag $ff
c126 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c128 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c12a : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
c12b : a900            >            lda #0             ;allow test to change I
                       >
c12d : 48              >            pha         ;use stack to load status
c12e : a2ff            >            ldx #$ff     ;precharge index x
c130 : 28              >            plp
                        
c131 : da                       phx
                                tst_x $ff,0
c132 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c133 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c135 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c137 : 68              >            pla         ;load status
c138 : 48              >            pha
                       >            cmp_flag 0
c139 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c13b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c13d : 28              >            plp         ;restore status
                        
                                set_x 0,$ff     ;pull
                       >            load_flag $ff     
c13e : a9ff            >            lda #$ff                  ;allow test to c
                       >
c140 : 48              >            pha         ;use stack to load status
c141 : a200            >            ldx #0     ;precharge index x
c143 : 28              >            plp
                        
c144 : fa                       plx
                                tst_x $ff,$ff-zero
c145 : 08              >            php         ;save flags
c146 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c148 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c14a : 68              >            pla         ;load status
c14b : 48              >            pha
                       >            cmp_flag $ff-zero
c14c : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c14e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c150 : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
c151 : a900            >            lda #0             ;allow test to change I
                       >
c153 : 48              >            pha         ;use stack to load status
c154 : a2ff            >            ldx #$ff     ;precharge index x
c156 : 28              >            plp
                        
c157 : fa                       plx
                                tst_x 0,zero
c158 : 08              >            php         ;save flags
c159 : e000            >            cpx #0     ;test result
                       >            trap_ne
c15b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c15d : 68              >            pla         ;load status
c15e : 48              >            pha
                       >            cmp_flag zero
c15f : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c161 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c163 : 28              >            plp         ;restore status
                        
                                set_x $fe,$ff
                       >            load_flag $ff
c164 : a9ff            >            lda #$ff             ;allow test to change
                       >
c166 : 48              >            pha         ;use stack to load status
c167 : a2fe            >            ldx #$fe     ;precharge index x
c169 : 28              >            plp
                        
c16a : fa                       plx
                                tst_x 1,$ff-zero-minus
c16b : 08              >            php         ;save flags
c16c : e001            >            cpx #1     ;test result
                       >            trap_ne
c16e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c170 : 68              >            pla         ;load status
c171 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
c172 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected 
                       >
                       >            trap_ne
c174 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c176 : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
c177 : a900            >            lda #0             ;allow test to change I
                       >
c179 : 48              >            pha         ;use stack to load status
c17a : a200            >            ldx #0     ;precharge index x
c17c : 28              >            plp
                        
c17d : fa                       plx
                                tst_x $ff,minus
c17e : 08              >            php         ;save flags
c17f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c181 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c183 : 68              >            pla         ;load status
c184 : 48              >            pha
                       >            cmp_flag minus
c185 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c187 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c189 : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
c18a : a9ff            >            lda #$ff             ;allow test to change
                       >
c18c : 48              >            pha         ;use stack to load status
c18d : a2ff            >            ldx #$ff     ;precharge index x
c18f : 28              >            plp
                        
c190 : fa                       plx
                                tst_x 0,$ff-minus
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c191 : 08              >            php         ;save flags
c192 : e000            >            cpx #0     ;test result
                       >            trap_ne
c194 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c196 : 68              >            pla         ;load status
c197 : 48              >            pha
                       >            cmp_flag $ff-minus
c198 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c19a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c19c : 28              >            plp         ;restore status
                        
                                set_x $fe,0
                       >            load_flag 0
c19d : a900            >            lda #0             ;allow test to change I
                       >
c19f : 48              >            pha         ;use stack to load status
c1a0 : a2fe            >            ldx #$fe     ;precharge index x
c1a2 : 28              >            plp
                        
c1a3 : fa                       plx
                                tst_x 1,0
c1a4 : 08              >            php         ;save flags
c1a5 : e001            >            cpx #1     ;test result
                       >            trap_ne
c1a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1a9 : 68              >            pla         ;load status
c1aa : 48              >            pha
                       >            cmp_flag 0
c1ab : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c1ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1af : 28              >            plp         ;restore status
                        
c1b0 : c0aa                     cpy #$aa        ;Y unchanged
                                trap_ne
c1b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c1b4 : ad0002          >            lda test_case   ;previous test
c1b7 : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c1b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
c1bb : a903            >            lda #test_num   ;*** next tests' number
c1bd : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; test PHY does not alter flags or Y but PLY does
c1c0 : a255                     ldx #$55        ;x & a protected
                                set_y 1,$ff     ;push
                       >            load_flag $ff     
c1c2 : a9ff            >            lda #$ff                  ;allow test to c
                       >
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c1c4 : 48              >            pha         ;use stack to load status
c1c5 : a001            >            ldy #1     ;precharge index y
c1c7 : 28              >            plp
                        
c1c8 : 5a                       phy
                                tst_y 1,$ff
c1c9 : 08              >            php         ;save flags
c1ca : c001            >            cpy #1     ;test result
                       >            trap_ne
c1cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1ce : 68              >            pla         ;load status
c1cf : 48              >            pha
                       >            cmp_flag $ff
c1d0 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c1d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1d4 : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
c1d5 : a900            >            lda #0             ;allow test to change I
                       >
c1d7 : 48              >            pha         ;use stack to load status
c1d8 : a000            >            ldy #0     ;precharge index y
c1da : 28              >            plp
                        
c1db : 5a                       phy
                                tst_y 0,0
c1dc : 08              >            php         ;save flags
c1dd : c000            >            cpy #0     ;test result
                       >            trap_ne
c1df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1e1 : 68              >            pla         ;load status
c1e2 : 48              >            pha
                       >            cmp_flag 0
c1e3 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c1e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1e7 : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
c1e8 : a9ff            >            lda #$ff             ;allow test to change
                       >
c1ea : 48              >            pha         ;use stack to load status
c1eb : a0ff            >            ldy #$ff     ;precharge index y
c1ed : 28              >            plp
                        
c1ee : 5a                       phy
                                tst_y $ff,$ff
c1ef : 08              >            php         ;save flags
c1f0 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c1f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1f4 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c1f5 : 48              >            pha
                       >            cmp_flag $ff
c1f6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c1f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1fa : 28              >            plp         ;restore status
                        
                                set_y 1,0
                       >            load_flag 0
c1fb : a900            >            lda #0             ;allow test to change I
                       >
c1fd : 48              >            pha         ;use stack to load status
c1fe : a001            >            ldy #1     ;precharge index y
c200 : 28              >            plp
                        
c201 : 5a                       phy
                                tst_y 1,0
c202 : 08              >            php         ;save flags
c203 : c001            >            cpy #1     ;test result
                       >            trap_ne
c205 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c207 : 68              >            pla         ;load status
c208 : 48              >            pha
                       >            cmp_flag 0
c209 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c20b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c20d : 28              >            plp         ;restore status
                        
                                set_y 0,$ff
                       >            load_flag $ff
c20e : a9ff            >            lda #$ff             ;allow test to change
                       >
c210 : 48              >            pha         ;use stack to load status
c211 : a000            >            ldy #0     ;precharge index y
c213 : 28              >            plp
                        
c214 : 5a                       phy
                                tst_y 0,$ff
c215 : 08              >            php         ;save flags
c216 : c000            >            cpy #0     ;test result
                       >            trap_ne
c218 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c21a : 68              >            pla         ;load status
c21b : 48              >            pha
                       >            cmp_flag $ff
c21c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c21e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c220 : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
c221 : a900            >            lda #0             ;allow test to change I
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c223 : 48              >            pha         ;use stack to load status
c224 : a0ff            >            ldy #$ff     ;precharge index y
c226 : 28              >            plp
                        
c227 : 5a                       phy
                                tst_y $ff,0
c228 : 08              >            php         ;save flags
c229 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c22b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c22d : 68              >            pla         ;load status
c22e : 48              >            pha
                       >            cmp_flag 0
c22f : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c231 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c233 : 28              >            plp         ;restore status
                        
                                set_y 0,$ff     ;pull
                       >            load_flag $ff     
c234 : a9ff            >            lda #$ff                  ;allow test to c
                       >
c236 : 48              >            pha         ;use stack to load status
c237 : a000            >            ldy #0     ;precharge index y
c239 : 28              >            plp
                        
c23a : 7a                       ply
                                tst_y $ff,$ff-zero
c23b : 08              >            php         ;save flags
c23c : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c23e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c240 : 68              >            pla         ;load status
c241 : 48              >            pha
                       >            cmp_flag $ff-zero
c242 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c244 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c246 : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
c247 : a900            >            lda #0             ;allow test to change I
                       >
c249 : 48              >            pha         ;use stack to load status
c24a : a0ff            >            ldy #$ff     ;precharge index y
c24c : 28              >            plp
                        
c24d : 7a                       ply
                                tst_y 0,zero
c24e : 08              >            php         ;save flags
c24f : c000            >            cpy #0     ;test result
                       >            trap_ne
c251 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c253 : 68              >            pla         ;load status
c254 : 48              >            pha
                       >            cmp_flag zero
c255 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c257 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c259 : 28              >            plp         ;restore status
                        
                                set_y $fe,$ff
                       >            load_flag $ff
c25a : a9ff            >            lda #$ff             ;allow test to change
                       >
c25c : 48              >            pha         ;use stack to load status
c25d : a0fe            >            ldy #$fe     ;precharge index y
c25f : 28              >            plp
                        
c260 : 7a                       ply
                                tst_y 1,$ff-zero-minus
c261 : 08              >            php         ;save flags
c262 : c001            >            cpy #1     ;test result
                       >            trap_ne
c264 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c266 : 68              >            pla         ;load status
c267 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
c268 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected 
                       >
                       >            trap_ne
c26a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c26c : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
c26d : a900            >            lda #0             ;allow test to change I
                       >
c26f : 48              >            pha         ;use stack to load status
c270 : a000            >            ldy #0     ;precharge index y
c272 : 28              >            plp
                        
c273 : 7a                       ply
                                tst_y $ff,minus
c274 : 08              >            php         ;save flags
c275 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c277 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c279 : 68              >            pla         ;load status
c27a : 48              >            pha
                       >            cmp_flag minus
c27b : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c27d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c27f : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c280 : a9ff            >            lda #$ff             ;allow test to change
                       >
c282 : 48              >            pha         ;use stack to load status
c283 : a0ff            >            ldy #$ff     ;precharge index y
c285 : 28              >            plp
                        
c286 : 7a                       ply
                                tst_y 0,$ff-minus
c287 : 08              >            php         ;save flags
c288 : c000            >            cpy #0     ;test result
                       >            trap_ne
c28a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c28c : 68              >            pla         ;load status
c28d : 48              >            pha
                       >            cmp_flag $ff-minus
c28e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c290 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c292 : 28              >            plp         ;restore status
                        
                                set_y $fe,0
                       >            load_flag 0
c293 : a900            >            lda #0             ;allow test to change I
                       >
c295 : 48              >            pha         ;use stack to load status
c296 : a0fe            >            ldy #$fe     ;precharge index y
c298 : 28              >            plp
                        
c299 : 7a                       ply
                                tst_y 1,0
c29a : 08              >            php         ;save flags
c29b : c001            >            cpy #1     ;test result
                       >            trap_ne
c29d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c29f : 68              >            pla         ;load status
c2a0 : 48              >            pha
                       >            cmp_flag 0
c2a1 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c2a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2a5 : 28              >            plp         ;restore status
                        
c2a6 : e055                     cpx #$55        ;x unchanged?
                                trap_ne
c2a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c2aa : ad0002          >            lda test_case   ;previous test
c2ad : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c2af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
c2b1 : a904            >            lda #test_num   ;*** next tests' number
c2b3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                        
                        ; PC modifying instructions (BRA, BBR, BBS, 1, 2, 3 by
                        ; testing unconditional branch BRA
                        
c2b6 : a281                     ldx #$81        ;protect unused registers
c2b8 : a07e                     ldy #$7e
                                set_a 0,$ff
                       >            load_flag $ff
c2ba : a9ff            >            lda #$ff             ;allow test to change
                       >
c2bc : 48              >            pha         ;use stack to load status
c2bd : a900            >            lda #0     ;precharge accu
c2bf : 28              >            plp
                        
c2c0 : 8003                     bra br1         ;branch should always be taken
                                trap
c2c2 : 4cc2c2          >        jmp *           ;failed anyway
                        
c2c5 :                  br1
                                tst_a 0,$ff
c2c5 : 08              >            php         ;save flags
c2c6 : c900            >            cmp #0     ;test result
                       >            trap_ne
c2c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2ca : 68              >            pla         ;load status
c2cb : 48              >            pha
                       >            cmp_flag $ff
c2cc : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c2ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2d0 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
c2d1 : a900            >            lda #0             ;allow test to change I
                       >
c2d3 : 48              >            pha         ;use stack to load status
c2d4 : a9ff            >            lda #$ff     ;precharge accu
c2d6 : 28              >            plp
                        
c2d7 : 8003                     bra br2         ;branch should always be taken
                                trap
c2d9 : 4cd9c2          >        jmp *           ;failed anyway
                        
c2dc :                  br2
                                tst_a $ff,0
c2dc : 08              >            php         ;save flags
c2dd : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c2df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2e1 : 68              >            pla         ;load status
c2e2 : 48              >            pha
                       >            cmp_flag 0
c2e3 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c2e5 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c2e7 : 28              >            plp         ;restore status
                        
c2e8 : e081                     cpx #$81
                                trap_ne
c2ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
c2ec : c07e                     cpy #$7e
                                trap_ne
c2ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c2f0 : ad0002          >            lda test_case   ;previous test
c2f3 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c2f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
c2f7 : a905            >            lda #test_num   ;*** next tests' number
c2f9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
c2fc : a000                     ldy #0          ;branch range test
c2fe : 8061                     bra bra0
                        
c300 : c001             bra1    cpy #1
                                trap_ne         ;long range backward
c302 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c304 : c8                       iny
c305 : 8053                     bra bra2
                        
c307 : c003             bra3    cpy #3
                                trap_ne         ;long range backward
c309 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c30b : c8                       iny
c30c : 8045                     bra bra4
                        
c30e : c005             bra5    cpy #5
                                trap_ne         ;long range backward
c310 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c312 : c8                       iny
c313 : a000                     ldy #0
c315 : 8004                     bra brf0
                        
c317 : c8                       iny
c318 : c8                       iny
c319 : c8                       iny
c31a : c8                       iny
c31b : 8003             brf0    bra brf1
                        
c31d : c8                       iny
c31e : c8                       iny
c31f : c8                       iny
c320 : c8               brf1    iny
c321 : 8002                     bra brf2
                        
c323 : c8                       iny
c324 : c8                       iny
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c325 : c8               brf2    iny
c326 : c8                       iny
c327 : 8001                     bra brf3
                        
c329 : c8                       iny
c32a : c8               brf3    iny
c32b : c8                       iny
c32c : c8                       iny
c32d : 8000                     bra brf4
                        
c32f : c8               brf4    iny
c330 : c8                       iny
c331 : c8                       iny
c332 : c8                       iny
c333 : c00a                     cpy #10
                                trap_ne     ;short range forward
c335 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c337 : 8012                     bra brb0
                        
c339 : 88               brb4    dey
c33a : 88                       dey
c33b : 88                       dey
c33c : 88                       dey
c33d : 800e                     bra brb5
                        
c33f : 88               brb3    dey
c340 : 88                       dey
c341 : 88                       dey
c342 : 80f5                     bra brb4
                        
c344 : 88               brb2    dey
c345 : 88                       dey
c346 : 80f7                     bra brb3
                        
c348 : 88               brb1    dey
c349 : 80f9                     bra brb2
                        
c34b : 80fb             brb0    bra brb1
                        
c34d : c000             brb5    cpy #0
                                trap_ne     ;short range backward
c34f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c351 : 8015                     bra bra6
                        
c353 : c004             bra4    cpy #4
                                trap_ne     ;long range forward
c355 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c357 : c8                       iny
c358 : 80b4                     bra bra5
                        
c35a : c002             bra2    cpy #2
                                trap_ne     ;long range forward
c35c : d0fe            >        bne *           ;failed not equal (non zero)
                        
c35e : c8                       iny
c35f : 80a6                     bra bra3
                        
c361 : c000             bra0    cpy #0
                                trap_ne     ;long range forward
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c363 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c365 : c8                       iny
c366 : 8098                     bra bra1
                        
c368 :                  bra6
                                next_test
c368 : ad0002          >            lda test_case   ;previous test
c36b : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c36d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
c36f : a906            >            lda #test_num   ;*** next tests' number
c371 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if rkwl_wdc_op = 1
                        ; testing BBR & BBS
                        
                        bbt     macro           ;\1 = bitnum
                                lda #(1<<\1)    ;testing 1 bit on
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbr \1,zpt,fail1\?
                                bbs \1,zpt,ok1\?
                                trap            ;bbs branch not taken
                        fail1\?
                                trap            ;bbr branch taken
                        ok1\?
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbr \1,zpt,fail2\?
                                bbs \1,zpt,ok2\?
                                trap            ;bbs branch not taken
                        fail2\?
                                trap            ;bbr branch taken
                        ok2\?
                                tst_a $cc,$ff
                                lda zpt
                                cmp #(1<<\1)
                                trap_ne         ;zp altered
                                lda #$ff-(1<<\1) ;testing 1 bit off
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbs \1,zpt,fail3\?
                                bbr \1,zpt,ok3\?
                                trap            ;bbr branch not taken
                        fail3\?
                                trap            ;bbs branch taken
                        ok3\?
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbs \1,zpt,fail4\?
                                bbr \1,zpt,ok4\?
                                trap            ;bbr branch not taken
                        fail4\?
                                trap            ;bbs branch taken
                        ok4\?
                                tst_a $cc,$ff
                                lda zpt
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                cmp #$ff-(1<<\1)
                                trap_ne         ;zp altered
                                endm
                        
c374 : a211                     ldx #$11        ;test bbr/bbs integrity
c376 : a022                     ldy #$22
                                bbt 0
c378 : a901            >        lda #(1<<0)    ;testing 1 bit on
c37a : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c37c : a900            >            lda #0                  ;allow test to cha
                       >
c37e : 48              >            pha         ;use stack to load status
c37f : a933            >            lda #$33     ;precharge accu
c381 : 28              >            plp
                       >
c382 : 0f0c06          >        bbr 0,zpt,fail10196
c385 : 8f0c06          >        bbs 0,zpt,ok10196
                       >        trap            ;bbs branch not taken
c388 : 4c88c3          >        jmp *           ;failed anyway
                       >
c38b :                 >fail10196
                       >        trap            ;bbr branch taken
c38b : 4c8bc3          >        jmp *           ;failed anyway
                       >
c38e :                 >ok10196
                       >        tst_a $33,0
c38e : 08              >            php         ;save flags
c38f : c933            >            cmp #$33     ;test result
                       >            trap_ne
c391 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c393 : 68              >            pla         ;load status
c394 : 48              >            pha
                       >            cmp_flag 0
c395 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c397 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c399 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c39a : a9ff            >            lda #$ff                ;allow test to cha
                       >
c39c : 48              >            pha         ;use stack to load status
c39d : a9cc            >            lda #$cc     ;precharge accu
c39f : 28              >            plp
                       >
c3a0 : 0f0c06          >        bbr 0,zpt,fail20196
c3a3 : 8f0c06          >        bbs 0,zpt,ok20196
                       >        trap            ;bbs branch not taken
c3a6 : 4ca6c3          >        jmp *           ;failed anyway
                       >
c3a9 :                 >fail20196
                       >        trap            ;bbr branch taken
c3a9 : 4ca9c3          >        jmp *           ;failed anyway
                       >
c3ac :                 >ok20196
                       >        tst_a $cc,$ff
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c3ac : 08              >            php         ;save flags
c3ad : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c3af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3b1 : 68              >            pla         ;load status
c3b2 : 48              >            pha
                       >            cmp_flag $ff
c3b3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c3b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3b7 : 28              >            plp         ;restore status
                       >
c3b8 : a50c            >        lda zpt
c3ba : c901            >        cmp #(1<<0)
                       >        trap_ne         ;zp altered
c3bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3be : a9fe            >        lda #$ff-(1<<0) ;testing 1 bit off
c3c0 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c3c2 : a900            >            lda #0                  ;allow test to cha
                       >
c3c4 : 48              >            pha         ;use stack to load status
c3c5 : a933            >            lda #$33     ;precharge accu
c3c7 : 28              >            plp
                       >
c3c8 : 8f0c06          >        bbs 0,zpt,fail30196
c3cb : 0f0c06          >        bbr 0,zpt,ok30196
                       >        trap            ;bbr branch not taken
c3ce : 4ccec3          >        jmp *           ;failed anyway
                       >
c3d1 :                 >fail30196
                       >        trap            ;bbs branch taken
c3d1 : 4cd1c3          >        jmp *           ;failed anyway
                       >
c3d4 :                 >ok30196
                       >        tst_a $33,0
c3d4 : 08              >            php         ;save flags
c3d5 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c3d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3d9 : 68              >            pla         ;load status
c3da : 48              >            pha
                       >            cmp_flag 0
c3db : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c3dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3df : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c3e0 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c3e2 : 48              >            pha         ;use stack to load status
c3e3 : a9cc            >            lda #$cc     ;precharge accu
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c3e5 : 28              >            plp
                       >
c3e6 : 8f0c06          >        bbs 0,zpt,fail40196
c3e9 : 0f0c06          >        bbr 0,zpt,ok40196
                       >        trap            ;bbr branch not taken
c3ec : 4cecc3          >        jmp *           ;failed anyway
                       >
c3ef :                 >fail40196
                       >        trap            ;bbs branch taken
c3ef : 4cefc3          >        jmp *           ;failed anyway
                       >
c3f2 :                 >ok40196
                       >        tst_a $cc,$ff
c3f2 : 08              >            php         ;save flags
c3f3 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c3f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3f7 : 68              >            pla         ;load status
c3f8 : 48              >            pha
                       >            cmp_flag $ff
c3f9 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c3fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3fd : 28              >            plp         ;restore status
                       >
c3fe : a50c            >        lda zpt
c400 : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne         ;zp altered
c402 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 1
c404 : a902            >        lda #(1<<1)    ;testing 1 bit on
c406 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c408 : a900            >            lda #0                  ;allow test to cha
                       >
c40a : 48              >            pha         ;use stack to load status
c40b : a933            >            lda #$33     ;precharge accu
c40d : 28              >            plp
                       >
c40e : 1f0c06          >        bbr 1,zpt,fail10231
c411 : 9f0c06          >        bbs 1,zpt,ok10231
                       >        trap            ;bbs branch not taken
c414 : 4c14c4          >        jmp *           ;failed anyway
                       >
c417 :                 >fail10231
                       >        trap            ;bbr branch taken
c417 : 4c17c4          >        jmp *           ;failed anyway
                       >
c41a :                 >ok10231
                       >        tst_a $33,0
c41a : 08              >            php         ;save flags
c41b : c933            >            cmp #$33     ;test result
                       >            trap_ne
c41d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c41f : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c420 : 48              >            pha
                       >            cmp_flag 0
c421 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c423 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c425 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c426 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c428 : 48              >            pha         ;use stack to load status
c429 : a9cc            >            lda #$cc     ;precharge accu
c42b : 28              >            plp
                       >
c42c : 1f0c06          >        bbr 1,zpt,fail20231
c42f : 9f0c06          >        bbs 1,zpt,ok20231
                       >        trap            ;bbs branch not taken
c432 : 4c32c4          >        jmp *           ;failed anyway
                       >
c435 :                 >fail20231
                       >        trap            ;bbr branch taken
c435 : 4c35c4          >        jmp *           ;failed anyway
                       >
c438 :                 >ok20231
                       >        tst_a $cc,$ff
c438 : 08              >            php         ;save flags
c439 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c43b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c43d : 68              >            pla         ;load status
c43e : 48              >            pha
                       >            cmp_flag $ff
c43f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c441 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c443 : 28              >            plp         ;restore status
                       >
c444 : a50c            >        lda zpt
c446 : c902            >        cmp #(1<<1)
                       >        trap_ne         ;zp altered
c448 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c44a : a9fd            >        lda #$ff-(1<<1) ;testing 1 bit off
c44c : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c44e : a900            >            lda #0                  ;allow test to cha
                       >
c450 : 48              >            pha         ;use stack to load status
c451 : a933            >            lda #$33     ;precharge accu
c453 : 28              >            plp
                       >
c454 : 9f0c06          >        bbs 1,zpt,fail30231
c457 : 1f0c06          >        bbr 1,zpt,ok30231
                       >        trap            ;bbr branch not taken
c45a : 4c5ac4          >        jmp *           ;failed anyway
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c45d :                 >fail30231
                       >        trap            ;bbs branch taken
c45d : 4c5dc4          >        jmp *           ;failed anyway
                       >
c460 :                 >ok30231
                       >        tst_a $33,0
c460 : 08              >            php         ;save flags
c461 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c463 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c465 : 68              >            pla         ;load status
c466 : 48              >            pha
                       >            cmp_flag 0
c467 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c469 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c46b : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c46c : a9ff            >            lda #$ff                ;allow test to cha
                       >
c46e : 48              >            pha         ;use stack to load status
c46f : a9cc            >            lda #$cc     ;precharge accu
c471 : 28              >            plp
                       >
c472 : 9f0c06          >        bbs 1,zpt,fail40231
c475 : 1f0c06          >        bbr 1,zpt,ok40231
                       >        trap            ;bbr branch not taken
c478 : 4c78c4          >        jmp *           ;failed anyway
                       >
c47b :                 >fail40231
                       >        trap            ;bbs branch taken
c47b : 4c7bc4          >        jmp *           ;failed anyway
                       >
c47e :                 >ok40231
                       >        tst_a $cc,$ff
c47e : 08              >            php         ;save flags
c47f : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c481 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c483 : 68              >            pla         ;load status
c484 : 48              >            pha
                       >            cmp_flag $ff
c485 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c487 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c489 : 28              >            plp         ;restore status
                       >
c48a : a50c            >        lda zpt
c48c : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne         ;zp altered
c48e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                bbt 2
c490 : a904            >        lda #(1<<2)    ;testing 1 bit on
c492 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c494 : a900            >            lda #0                  ;allow test to cha
                       >
c496 : 48              >            pha         ;use stack to load status
c497 : a933            >            lda #$33     ;precharge accu
c499 : 28              >            plp
                       >
c49a : 2f0c06          >        bbr 2,zpt,fail10266
c49d : af0c06          >        bbs 2,zpt,ok10266
                       >        trap            ;bbs branch not taken
c4a0 : 4ca0c4          >        jmp *           ;failed anyway
                       >
c4a3 :                 >fail10266
                       >        trap            ;bbr branch taken
c4a3 : 4ca3c4          >        jmp *           ;failed anyway
                       >
c4a6 :                 >ok10266
                       >        tst_a $33,0
c4a6 : 08              >            php         ;save flags
c4a7 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c4a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4ab : 68              >            pla         ;load status
c4ac : 48              >            pha
                       >            cmp_flag 0
c4ad : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c4af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4b1 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c4b2 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c4b4 : 48              >            pha         ;use stack to load status
c4b5 : a9cc            >            lda #$cc     ;precharge accu
c4b7 : 28              >            plp
                       >
c4b8 : 2f0c06          >        bbr 2,zpt,fail20266
c4bb : af0c06          >        bbs 2,zpt,ok20266
                       >        trap            ;bbs branch not taken
c4be : 4cbec4          >        jmp *           ;failed anyway
                       >
c4c1 :                 >fail20266
                       >        trap            ;bbr branch taken
c4c1 : 4cc1c4          >        jmp *           ;failed anyway
                       >
c4c4 :                 >ok20266
                       >        tst_a $cc,$ff
c4c4 : 08              >            php         ;save flags
c4c5 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c4c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4c9 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c4ca : 48              >            pha
                       >            cmp_flag $ff
c4cb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c4cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4cf : 28              >            plp         ;restore status
                       >
c4d0 : a50c            >        lda zpt
c4d2 : c904            >        cmp #(1<<2)
                       >        trap_ne         ;zp altered
c4d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4d6 : a9fb            >        lda #$ff-(1<<2) ;testing 1 bit off
c4d8 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c4da : a900            >            lda #0                  ;allow test to cha
                       >
c4dc : 48              >            pha         ;use stack to load status
c4dd : a933            >            lda #$33     ;precharge accu
c4df : 28              >            plp
                       >
c4e0 : af0c06          >        bbs 2,zpt,fail30266
c4e3 : 2f0c06          >        bbr 2,zpt,ok30266
                       >        trap            ;bbr branch not taken
c4e6 : 4ce6c4          >        jmp *           ;failed anyway
                       >
c4e9 :                 >fail30266
                       >        trap            ;bbs branch taken
c4e9 : 4ce9c4          >        jmp *           ;failed anyway
                       >
c4ec :                 >ok30266
                       >        tst_a $33,0
c4ec : 08              >            php         ;save flags
c4ed : c933            >            cmp #$33     ;test result
                       >            trap_ne
c4ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4f1 : 68              >            pla         ;load status
c4f2 : 48              >            pha
                       >            cmp_flag 0
c4f3 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c4f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4f7 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c4f8 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c4fa : 48              >            pha         ;use stack to load status
c4fb : a9cc            >            lda #$cc     ;precharge accu
c4fd : 28              >            plp
                       >
c4fe : af0c06          >        bbs 2,zpt,fail40266
c501 : 2f0c06          >        bbr 2,zpt,ok40266
                       >        trap            ;bbr branch not taken
c504 : 4c04c5          >        jmp *           ;failed anyway
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c507 :                 >fail40266
                       >        trap            ;bbs branch taken
c507 : 4c07c5          >        jmp *           ;failed anyway
                       >
c50a :                 >ok40266
                       >        tst_a $cc,$ff
c50a : 08              >            php         ;save flags
c50b : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c50d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c50f : 68              >            pla         ;load status
c510 : 48              >            pha
                       >            cmp_flag $ff
c511 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c513 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c515 : 28              >            plp         ;restore status
                       >
c516 : a50c            >        lda zpt
c518 : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne         ;zp altered
c51a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 3
c51c : a908            >        lda #(1<<3)    ;testing 1 bit on
c51e : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c520 : a900            >            lda #0                  ;allow test to cha
                       >
c522 : 48              >            pha         ;use stack to load status
c523 : a933            >            lda #$33     ;precharge accu
c525 : 28              >            plp
                       >
c526 : 3f0c06          >        bbr 3,zpt,fail10301
c529 : bf0c06          >        bbs 3,zpt,ok10301
                       >        trap            ;bbs branch not taken
c52c : 4c2cc5          >        jmp *           ;failed anyway
                       >
c52f :                 >fail10301
                       >        trap            ;bbr branch taken
c52f : 4c2fc5          >        jmp *           ;failed anyway
                       >
c532 :                 >ok10301
                       >        tst_a $33,0
c532 : 08              >            php         ;save flags
c533 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c535 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c537 : 68              >            pla         ;load status
c538 : 48              >            pha
                       >            cmp_flag 0
c539 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c53b : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c53d : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c53e : a9ff            >            lda #$ff                ;allow test to cha
                       >
c540 : 48              >            pha         ;use stack to load status
c541 : a9cc            >            lda #$cc     ;precharge accu
c543 : 28              >            plp
                       >
c544 : 3f0c06          >        bbr 3,zpt,fail20301
c547 : bf0c06          >        bbs 3,zpt,ok20301
                       >        trap            ;bbs branch not taken
c54a : 4c4ac5          >        jmp *           ;failed anyway
                       >
c54d :                 >fail20301
                       >        trap            ;bbr branch taken
c54d : 4c4dc5          >        jmp *           ;failed anyway
                       >
c550 :                 >ok20301
                       >        tst_a $cc,$ff
c550 : 08              >            php         ;save flags
c551 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c553 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c555 : 68              >            pla         ;load status
c556 : 48              >            pha
                       >            cmp_flag $ff
c557 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c559 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c55b : 28              >            plp         ;restore status
                       >
c55c : a50c            >        lda zpt
c55e : c908            >        cmp #(1<<3)
                       >        trap_ne         ;zp altered
c560 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c562 : a9f7            >        lda #$ff-(1<<3) ;testing 1 bit off
c564 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c566 : a900            >            lda #0                  ;allow test to cha
                       >
c568 : 48              >            pha         ;use stack to load status
c569 : a933            >            lda #$33     ;precharge accu
c56b : 28              >            plp
                       >
c56c : bf0c06          >        bbs 3,zpt,fail30301
c56f : 3f0c06          >        bbr 3,zpt,ok30301
                       >        trap            ;bbr branch not taken
c572 : 4c72c5          >        jmp *           ;failed anyway
                       >
c575 :                 >fail30301
                       >        trap            ;bbs branch taken
c575 : 4c75c5          >        jmp *           ;failed anyway
                       >
c578 :                 >ok30301
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        tst_a $33,0
c578 : 08              >            php         ;save flags
c579 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c57b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c57d : 68              >            pla         ;load status
c57e : 48              >            pha
                       >            cmp_flag 0
c57f : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c581 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c583 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c584 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c586 : 48              >            pha         ;use stack to load status
c587 : a9cc            >            lda #$cc     ;precharge accu
c589 : 28              >            plp
                       >
c58a : bf0c06          >        bbs 3,zpt,fail40301
c58d : 3f0c06          >        bbr 3,zpt,ok40301
                       >        trap            ;bbr branch not taken
c590 : 4c90c5          >        jmp *           ;failed anyway
                       >
c593 :                 >fail40301
                       >        trap            ;bbs branch taken
c593 : 4c93c5          >        jmp *           ;failed anyway
                       >
c596 :                 >ok40301
                       >        tst_a $cc,$ff
c596 : 08              >            php         ;save flags
c597 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c599 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c59b : 68              >            pla         ;load status
c59c : 48              >            pha
                       >            cmp_flag $ff
c59d : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c59f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5a1 : 28              >            plp         ;restore status
                       >
c5a2 : a50c            >        lda zpt
c5a4 : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne         ;zp altered
c5a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 4
c5a8 : a910            >        lda #(1<<4)    ;testing 1 bit on
c5aa : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c5ac : a900            >            lda #0                  ;allow test to cha
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c5ae : 48              >            pha         ;use stack to load status
c5af : a933            >            lda #$33     ;precharge accu
c5b1 : 28              >            plp
                       >
c5b2 : 4f0c06          >        bbr 4,zpt,fail10336
c5b5 : cf0c06          >        bbs 4,zpt,ok10336
                       >        trap            ;bbs branch not taken
c5b8 : 4cb8c5          >        jmp *           ;failed anyway
                       >
c5bb :                 >fail10336
                       >        trap            ;bbr branch taken
c5bb : 4cbbc5          >        jmp *           ;failed anyway
                       >
c5be :                 >ok10336
                       >        tst_a $33,0
c5be : 08              >            php         ;save flags
c5bf : c933            >            cmp #$33     ;test result
                       >            trap_ne
c5c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5c3 : 68              >            pla         ;load status
c5c4 : 48              >            pha
                       >            cmp_flag 0
c5c5 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c5c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5c9 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c5ca : a9ff            >            lda #$ff                ;allow test to cha
                       >
c5cc : 48              >            pha         ;use stack to load status
c5cd : a9cc            >            lda #$cc     ;precharge accu
c5cf : 28              >            plp
                       >
c5d0 : 4f0c06          >        bbr 4,zpt,fail20336
c5d3 : cf0c06          >        bbs 4,zpt,ok20336
                       >        trap            ;bbs branch not taken
c5d6 : 4cd6c5          >        jmp *           ;failed anyway
                       >
c5d9 :                 >fail20336
                       >        trap            ;bbr branch taken
c5d9 : 4cd9c5          >        jmp *           ;failed anyway
                       >
c5dc :                 >ok20336
                       >        tst_a $cc,$ff
c5dc : 08              >            php         ;save flags
c5dd : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c5df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5e1 : 68              >            pla         ;load status
c5e2 : 48              >            pha
                       >            cmp_flag $ff
c5e3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c5e5 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c5e7 : 28              >            plp         ;restore status
                       >
c5e8 : a50c            >        lda zpt
c5ea : c910            >        cmp #(1<<4)
                       >        trap_ne         ;zp altered
c5ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5ee : a9ef            >        lda #$ff-(1<<4) ;testing 1 bit off
c5f0 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c5f2 : a900            >            lda #0                  ;allow test to cha
                       >
c5f4 : 48              >            pha         ;use stack to load status
c5f5 : a933            >            lda #$33     ;precharge accu
c5f7 : 28              >            plp
                       >
c5f8 : cf0c06          >        bbs 4,zpt,fail30336
c5fb : 4f0c06          >        bbr 4,zpt,ok30336
                       >        trap            ;bbr branch not taken
c5fe : 4cfec5          >        jmp *           ;failed anyway
                       >
c601 :                 >fail30336
                       >        trap            ;bbs branch taken
c601 : 4c01c6          >        jmp *           ;failed anyway
                       >
c604 :                 >ok30336
                       >        tst_a $33,0
c604 : 08              >            php         ;save flags
c605 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c607 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c609 : 68              >            pla         ;load status
c60a : 48              >            pha
                       >            cmp_flag 0
c60b : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c60d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c60f : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c610 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c612 : 48              >            pha         ;use stack to load status
c613 : a9cc            >            lda #$cc     ;precharge accu
c615 : 28              >            plp
                       >
c616 : cf0c06          >        bbs 4,zpt,fail40336
c619 : 4f0c06          >        bbr 4,zpt,ok40336
                       >        trap            ;bbr branch not taken
c61c : 4c1cc6          >        jmp *           ;failed anyway
                       >
c61f :                 >fail40336
                       >        trap            ;bbs branch taken
c61f : 4c1fc6          >        jmp *           ;failed anyway
                       >
c622 :                 >ok40336
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        tst_a $cc,$ff
c622 : 08              >            php         ;save flags
c623 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c625 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c627 : 68              >            pla         ;load status
c628 : 48              >            pha
                       >            cmp_flag $ff
c629 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c62b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c62d : 28              >            plp         ;restore status
                       >
c62e : a50c            >        lda zpt
c630 : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne         ;zp altered
c632 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 5
c634 : a920            >        lda #(1<<5)    ;testing 1 bit on
c636 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c638 : a900            >            lda #0                  ;allow test to cha
                       >
c63a : 48              >            pha         ;use stack to load status
c63b : a933            >            lda #$33     ;precharge accu
c63d : 28              >            plp
                       >
c63e : 5f0c06          >        bbr 5,zpt,fail10371
c641 : df0c06          >        bbs 5,zpt,ok10371
                       >        trap            ;bbs branch not taken
c644 : 4c44c6          >        jmp *           ;failed anyway
                       >
c647 :                 >fail10371
                       >        trap            ;bbr branch taken
c647 : 4c47c6          >        jmp *           ;failed anyway
                       >
c64a :                 >ok10371
                       >        tst_a $33,0
c64a : 08              >            php         ;save flags
c64b : c933            >            cmp #$33     ;test result
                       >            trap_ne
c64d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c64f : 68              >            pla         ;load status
c650 : 48              >            pha
                       >            cmp_flag 0
c651 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c653 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c655 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c656 : a9ff            >            lda #$ff                ;allow test to cha
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c658 : 48              >            pha         ;use stack to load status
c659 : a9cc            >            lda #$cc     ;precharge accu
c65b : 28              >            plp
                       >
c65c : 5f0c06          >        bbr 5,zpt,fail20371
c65f : df0c06          >        bbs 5,zpt,ok20371
                       >        trap            ;bbs branch not taken
c662 : 4c62c6          >        jmp *           ;failed anyway
                       >
c665 :                 >fail20371
                       >        trap            ;bbr branch taken
c665 : 4c65c6          >        jmp *           ;failed anyway
                       >
c668 :                 >ok20371
                       >        tst_a $cc,$ff
c668 : 08              >            php         ;save flags
c669 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c66b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c66d : 68              >            pla         ;load status
c66e : 48              >            pha
                       >            cmp_flag $ff
c66f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c671 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c673 : 28              >            plp         ;restore status
                       >
c674 : a50c            >        lda zpt
c676 : c920            >        cmp #(1<<5)
                       >        trap_ne         ;zp altered
c678 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c67a : a9df            >        lda #$ff-(1<<5) ;testing 1 bit off
c67c : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c67e : a900            >            lda #0                  ;allow test to cha
                       >
c680 : 48              >            pha         ;use stack to load status
c681 : a933            >            lda #$33     ;precharge accu
c683 : 28              >            plp
                       >
c684 : df0c06          >        bbs 5,zpt,fail30371
c687 : 5f0c06          >        bbr 5,zpt,ok30371
                       >        trap            ;bbr branch not taken
c68a : 4c8ac6          >        jmp *           ;failed anyway
                       >
c68d :                 >fail30371
                       >        trap            ;bbs branch taken
c68d : 4c8dc6          >        jmp *           ;failed anyway
                       >
c690 :                 >ok30371
                       >        tst_a $33,0
c690 : 08              >            php         ;save flags
c691 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c693 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c695 : 68              >            pla         ;load status
c696 : 48              >            pha
                       >            cmp_flag 0
c697 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c699 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c69b : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c69c : a9ff            >            lda #$ff                ;allow test to cha
                       >
c69e : 48              >            pha         ;use stack to load status
c69f : a9cc            >            lda #$cc     ;precharge accu
c6a1 : 28              >            plp
                       >
c6a2 : df0c06          >        bbs 5,zpt,fail40371
c6a5 : 5f0c06          >        bbr 5,zpt,ok40371
                       >        trap            ;bbr branch not taken
c6a8 : 4ca8c6          >        jmp *           ;failed anyway
                       >
c6ab :                 >fail40371
                       >        trap            ;bbs branch taken
c6ab : 4cabc6          >        jmp *           ;failed anyway
                       >
c6ae :                 >ok40371
                       >        tst_a $cc,$ff
c6ae : 08              >            php         ;save flags
c6af : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c6b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6b3 : 68              >            pla         ;load status
c6b4 : 48              >            pha
                       >            cmp_flag $ff
c6b5 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c6b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6b9 : 28              >            plp         ;restore status
                       >
c6ba : a50c            >        lda zpt
c6bc : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne         ;zp altered
c6be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 6
c6c0 : a940            >        lda #(1<<6)    ;testing 1 bit on
c6c2 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c6c4 : a900            >            lda #0                  ;allow test to cha
                       >
c6c6 : 48              >            pha         ;use stack to load status
c6c7 : a933            >            lda #$33     ;precharge accu
c6c9 : 28              >            plp
                       >
c6ca : 6f0c06          >        bbr 6,zpt,fail10406
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c6cd : ef0c06          >        bbs 6,zpt,ok10406
                       >        trap            ;bbs branch not taken
c6d0 : 4cd0c6          >        jmp *           ;failed anyway
                       >
c6d3 :                 >fail10406
                       >        trap            ;bbr branch taken
c6d3 : 4cd3c6          >        jmp *           ;failed anyway
                       >
c6d6 :                 >ok10406
                       >        tst_a $33,0
c6d6 : 08              >            php         ;save flags
c6d7 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c6d9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6db : 68              >            pla         ;load status
c6dc : 48              >            pha
                       >            cmp_flag 0
c6dd : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c6df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6e1 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c6e2 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c6e4 : 48              >            pha         ;use stack to load status
c6e5 : a9cc            >            lda #$cc     ;precharge accu
c6e7 : 28              >            plp
                       >
c6e8 : 6f0c06          >        bbr 6,zpt,fail20406
c6eb : ef0c06          >        bbs 6,zpt,ok20406
                       >        trap            ;bbs branch not taken
c6ee : 4ceec6          >        jmp *           ;failed anyway
                       >
c6f1 :                 >fail20406
                       >        trap            ;bbr branch taken
c6f1 : 4cf1c6          >        jmp *           ;failed anyway
                       >
c6f4 :                 >ok20406
                       >        tst_a $cc,$ff
c6f4 : 08              >            php         ;save flags
c6f5 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c6f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6f9 : 68              >            pla         ;load status
c6fa : 48              >            pha
                       >            cmp_flag $ff
c6fb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c6fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6ff : 28              >            plp         ;restore status
                       >
c700 : a50c            >        lda zpt
c702 : c940            >        cmp #(1<<6)
                       >        trap_ne         ;zp altered
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c704 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c706 : a9bf            >        lda #$ff-(1<<6) ;testing 1 bit off
c708 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c70a : a900            >            lda #0                  ;allow test to cha
                       >
c70c : 48              >            pha         ;use stack to load status
c70d : a933            >            lda #$33     ;precharge accu
c70f : 28              >            plp
                       >
c710 : ef0c06          >        bbs 6,zpt,fail30406
c713 : 6f0c06          >        bbr 6,zpt,ok30406
                       >        trap            ;bbr branch not taken
c716 : 4c16c7          >        jmp *           ;failed anyway
                       >
c719 :                 >fail30406
                       >        trap            ;bbs branch taken
c719 : 4c19c7          >        jmp *           ;failed anyway
                       >
c71c :                 >ok30406
                       >        tst_a $33,0
c71c : 08              >            php         ;save flags
c71d : c933            >            cmp #$33     ;test result
                       >            trap_ne
c71f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c721 : 68              >            pla         ;load status
c722 : 48              >            pha
                       >            cmp_flag 0
c723 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c725 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c727 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c728 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c72a : 48              >            pha         ;use stack to load status
c72b : a9cc            >            lda #$cc     ;precharge accu
c72d : 28              >            plp
                       >
c72e : ef0c06          >        bbs 6,zpt,fail40406
c731 : 6f0c06          >        bbr 6,zpt,ok40406
                       >        trap            ;bbr branch not taken
c734 : 4c34c7          >        jmp *           ;failed anyway
                       >
c737 :                 >fail40406
                       >        trap            ;bbs branch taken
c737 : 4c37c7          >        jmp *           ;failed anyway
                       >
c73a :                 >ok40406
                       >        tst_a $cc,$ff
c73a : 08              >            php         ;save flags
c73b : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c73d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c73f : 68              >            pla         ;load status
c740 : 48              >            pha
                       >            cmp_flag $ff
c741 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c743 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c745 : 28              >            plp         ;restore status
                       >
c746 : a50c            >        lda zpt
c748 : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne         ;zp altered
c74a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 7
c74c : a980            >        lda #(1<<7)    ;testing 1 bit on
c74e : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c750 : a900            >            lda #0                  ;allow test to cha
                       >
c752 : 48              >            pha         ;use stack to load status
c753 : a933            >            lda #$33     ;precharge accu
c755 : 28              >            plp
                       >
c756 : 7f0c06          >        bbr 7,zpt,fail10441
c759 : ff0c06          >        bbs 7,zpt,ok10441
                       >        trap            ;bbs branch not taken
c75c : 4c5cc7          >        jmp *           ;failed anyway
                       >
c75f :                 >fail10441
                       >        trap            ;bbr branch taken
c75f : 4c5fc7          >        jmp *           ;failed anyway
                       >
c762 :                 >ok10441
                       >        tst_a $33,0
c762 : 08              >            php         ;save flags
c763 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c765 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c767 : 68              >            pla         ;load status
c768 : 48              >            pha
                       >            cmp_flag 0
c769 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c76b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c76d : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c76e : a9ff            >            lda #$ff                ;allow test to cha
                       >
c770 : 48              >            pha         ;use stack to load status
c771 : a9cc            >            lda #$cc     ;precharge accu
c773 : 28              >            plp
                       >
c774 : 7f0c06          >        bbr 7,zpt,fail20441
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c777 : ff0c06          >        bbs 7,zpt,ok20441
                       >        trap            ;bbs branch not taken
c77a : 4c7ac7          >        jmp *           ;failed anyway
                       >
c77d :                 >fail20441
                       >        trap            ;bbr branch taken
c77d : 4c7dc7          >        jmp *           ;failed anyway
                       >
c780 :                 >ok20441
                       >        tst_a $cc,$ff
c780 : 08              >            php         ;save flags
c781 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c783 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c785 : 68              >            pla         ;load status
c786 : 48              >            pha
                       >            cmp_flag $ff
c787 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c789 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c78b : 28              >            plp         ;restore status
                       >
c78c : a50c            >        lda zpt
c78e : c980            >        cmp #(1<<7)
                       >        trap_ne         ;zp altered
c790 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c792 : a97f            >        lda #$ff-(1<<7) ;testing 1 bit off
c794 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c796 : a900            >            lda #0                  ;allow test to cha
                       >
c798 : 48              >            pha         ;use stack to load status
c799 : a933            >            lda #$33     ;precharge accu
c79b : 28              >            plp
                       >
c79c : ff0c06          >        bbs 7,zpt,fail30441
c79f : 7f0c06          >        bbr 7,zpt,ok30441
                       >        trap            ;bbr branch not taken
c7a2 : 4ca2c7          >        jmp *           ;failed anyway
                       >
c7a5 :                 >fail30441
                       >        trap            ;bbs branch taken
c7a5 : 4ca5c7          >        jmp *           ;failed anyway
                       >
c7a8 :                 >ok30441
                       >        tst_a $33,0
c7a8 : 08              >            php         ;save flags
c7a9 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c7ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7ad : 68              >            pla         ;load status
c7ae : 48              >            pha
                       >            cmp_flag 0
c7af : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c7b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7b3 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c7b4 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c7b6 : 48              >            pha         ;use stack to load status
c7b7 : a9cc            >            lda #$cc     ;precharge accu
c7b9 : 28              >            plp
                       >
c7ba : ff0c06          >        bbs 7,zpt,fail40441
c7bd : 7f0c06          >        bbr 7,zpt,ok40441
                       >        trap            ;bbr branch not taken
c7c0 : 4cc0c7          >        jmp *           ;failed anyway
                       >
c7c3 :                 >fail40441
                       >        trap            ;bbs branch taken
c7c3 : 4cc3c7          >        jmp *           ;failed anyway
                       >
c7c6 :                 >ok40441
                       >        tst_a $cc,$ff
c7c6 : 08              >            php         ;save flags
c7c7 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c7c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7cb : 68              >            pla         ;load status
c7cc : 48              >            pha
                       >            cmp_flag $ff
c7cd : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c7cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7d1 : 28              >            plp         ;restore status
                       >
c7d2 : a50c            >        lda zpt
c7d4 : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne         ;zp altered
c7d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
c7d8 : e011                     cpx #$11
                                trap_ne         ;x overwritten
c7da : d0fe            >        bne *           ;failed not equal (non zero)
                        
c7dc : c022                     cpy #$22
                                trap_ne         ;y overwritten
c7de : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c7e0 : ad0002          >            lda test_case   ;previous test
c7e3 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c7e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
c7e7 : a907            >            lda #test_num   ;*** next tests' number
c7e9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                        
                        bbrc    macro           ;\1 = bitnum
                                bbr \1,zpt,skip\?
                                eor #(1<<\1)
                        skip\?
                                endm
                        bbsc    macro           ;\1 = bitnum
                                bbs \1,zpt,skip\?
                                eor #(1<<\1)
                        skip\?
                                endm
                        
c7ec : a900                     lda #0          ;combined bit test
c7ee : 850c                     sta zpt
c7f0 : a900             bbcl    lda #0
                                bbrc 0
c7f2 : 0f0c02          >        bbr 0,zpt,skip0480
c7f5 : 4901            >        eor #(1<<0)
c7f7 :                 >skip0480
                        
                                bbrc 1
c7f7 : 1f0c02          >        bbr 1,zpt,skip0481
c7fa : 4902            >        eor #(1<<1)
c7fc :                 >skip0481
                        
                                bbrc 2
c7fc : 2f0c02          >        bbr 2,zpt,skip0482
c7ff : 4904            >        eor #(1<<2)
c801 :                 >skip0482
                        
                                bbrc 3
c801 : 3f0c02          >        bbr 3,zpt,skip0483
c804 : 4908            >        eor #(1<<3)
c806 :                 >skip0483
                        
                                bbrc 4
c806 : 4f0c02          >        bbr 4,zpt,skip0484
c809 : 4910            >        eor #(1<<4)
c80b :                 >skip0484
                        
                                bbrc 5
c80b : 5f0c02          >        bbr 5,zpt,skip0485
c80e : 4920            >        eor #(1<<5)
c810 :                 >skip0485
                        
                                bbrc 6
c810 : 6f0c02          >        bbr 6,zpt,skip0486
c813 : 4940            >        eor #(1<<6)
c815 :                 >skip0486
                        
                                bbrc 7
c815 : 7f0c02          >        bbr 7,zpt,skip0487
c818 : 4980            >        eor #(1<<7)
c81a :                 >skip0487
                        
c81a : 450c                     eor zpt
                                trap_ne         ;failed bbr bitnum in accu
c81c : d0fe            >        bne *           ;failed not equal (non zero)
                        
c81e : a9ff                     lda #$ff
                                bbsc 0
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c820 : 8f0c02          >        bbs 0,zpt,skip0489
c823 : 4901            >        eor #(1<<0)
c825 :                 >skip0489
                        
                                bbsc 1
c825 : 9f0c02          >        bbs 1,zpt,skip0490
c828 : 4902            >        eor #(1<<1)
c82a :                 >skip0490
                        
                                bbsc 2
c82a : af0c02          >        bbs 2,zpt,skip0491
c82d : 4904            >        eor #(1<<2)
c82f :                 >skip0491
                        
                                bbsc 3
c82f : bf0c02          >        bbs 3,zpt,skip0492
c832 : 4908            >        eor #(1<<3)
c834 :                 >skip0492
                        
                                bbsc 4
c834 : cf0c02          >        bbs 4,zpt,skip0493
c837 : 4910            >        eor #(1<<4)
c839 :                 >skip0493
                        
                                bbsc 5
c839 : df0c02          >        bbs 5,zpt,skip0494
c83c : 4920            >        eor #(1<<5)
c83e :                 >skip0494
                        
                                bbsc 6
c83e : ef0c02          >        bbs 6,zpt,skip0495
c841 : 4940            >        eor #(1<<6)
c843 :                 >skip0495
                        
                                bbsc 7
c843 : ff0c02          >        bbs 7,zpt,skip0496
c846 : 4980            >        eor #(1<<7)
c848 :                 >skip0496
                        
c848 : 450c                     eor zpt
                                trap_ne         ;failed bbs bitnum in accu
c84a : d0fe            >        bne *           ;failed not equal (non zero)
                        
c84c : e60c                     inc zpt
c84e : d0a0                     bne bbcl
                                next_test
c850 : ad0002          >            lda test_case   ;previous test
c853 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c855 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
c857 : a908            >            lda #test_num   ;*** next tests' number
c859 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                            endif
                        
                        ; testing NOP
                        
                        nop_test    macro       ;\1 = opcode, \2 = # of bytes
                                    ldy #$42
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    ldx #4-\2
                                    db  \1          ;test nop length
                                if \2 = 1
                                    dex
                                    dex
                                endif
                                if \2 = 2
                                    iny
                                    dex
                                endif
                                if \2 = 3
                                    iny
                                    iny
                                endif
                                    dex
                                    trap_ne         ;wrong number of bytes
                                    set_a $ff-\1,0
                                    db  \1          ;test nop integrity - flag
                                    nop
                                    nop
                                    tst_a $ff-\1,0
                                    set_a $aa-\1,$ff
                                    db  \1          ;test nop integrity - flag
                                    nop
                                    nop
                                    tst_a $aa-\1,$ff
                                    cpy #$42
                                    trap_ne         ;y changed
                                    cpx #0
                                    trap_ne         ;x changed
                                    endm
                        
                            if skip_nop = 0
                                nop_test $02,2
c85c : a042            >            ldy #$42
c85e : a202            >            ldx #4-2
c860 : 02              >            db  $02          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
c861 : c8              >            iny
c862 : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
c863 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
c864 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$02,0
                       >            load_flag 0
c866 : a900            >            lda #0             ;allow test to change I
                       >
c868 : 48              >            pha         ;use stack to load status
c869 : a9fd            >            lda #$ff-$02     ;precharge accu
c86b : 28              >            plp
                       >
c86c : 02              >            db  $02          ;test nop integrity - fla
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c86d : ea              >            nop
c86e : ea              >            nop
                       >            tst_a $ff-$02,0
c86f : 08              >            php         ;save flags
c870 : c9fd            >            cmp #$ff-$02     ;test result
                       >            trap_ne
c872 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c874 : 68              >            pla         ;load status
c875 : 48              >            pha
                       >            cmp_flag 0
c876 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c878 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c87a : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$02,$ff
                       >            load_flag $ff
c87b : a9ff            >            lda #$ff             ;allow test to change
                       >
c87d : 48              >            pha         ;use stack to load status
c87e : a9a8            >            lda #$aa-$02     ;precharge accu
c880 : 28              >            plp
                       >
c881 : 02              >            db  $02          ;test nop integrity - fla
c882 : ea              >            nop
c883 : ea              >            nop
                       >            tst_a $aa-$02,$ff
c884 : 08              >            php         ;save flags
c885 : c9a8            >            cmp #$aa-$02     ;test result
                       >            trap_ne
c887 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c889 : 68              >            pla         ;load status
c88a : 48              >            pha
                       >            cmp_flag $ff
c88b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c88d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c88f : 28              >            plp         ;restore status
                       >
c890 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
c892 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c894 : e000            >            cpx #0
                       >            trap_ne         ;x changed
c896 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $22,2
c898 : a042            >            ldy #$42
c89a : a202            >            ldx #4-2
c89c : 22              >            db  $22          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        if 2 = 2
c89d : c8              >            iny
c89e : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
c89f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
c8a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$22,0
                       >            load_flag 0
c8a2 : a900            >            lda #0             ;allow test to change I
                       >
c8a4 : 48              >            pha         ;use stack to load status
c8a5 : a9dd            >            lda #$ff-$22     ;precharge accu
c8a7 : 28              >            plp
                       >
c8a8 : 22              >            db  $22          ;test nop integrity - fla
c8a9 : ea              >            nop
c8aa : ea              >            nop
                       >            tst_a $ff-$22,0
c8ab : 08              >            php         ;save flags
c8ac : c9dd            >            cmp #$ff-$22     ;test result
                       >            trap_ne
c8ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c8b0 : 68              >            pla         ;load status
c8b1 : 48              >            pha
                       >            cmp_flag 0
c8b2 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c8b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c8b6 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$22,$ff
                       >            load_flag $ff
c8b7 : a9ff            >            lda #$ff             ;allow test to change
                       >
c8b9 : 48              >            pha         ;use stack to load status
c8ba : a988            >            lda #$aa-$22     ;precharge accu
c8bc : 28              >            plp
                       >
c8bd : 22              >            db  $22          ;test nop integrity - fla
c8be : ea              >            nop
c8bf : ea              >            nop
                       >            tst_a $aa-$22,$ff
c8c0 : 08              >            php         ;save flags
c8c1 : c988            >            cmp #$aa-$22     ;test result
                       >            trap_ne
c8c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c8c5 : 68              >            pla         ;load status
c8c6 : 48              >            pha
                       >            cmp_flag $ff
c8c7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c8c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c8cb : 28              >            plp         ;restore status
                       >
c8cc : c042            >            cpy #$42
                       >            trap_ne         ;y changed
c8ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c8d0 : e000            >            cpx #0
                       >            trap_ne         ;x changed
c8d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $42,2
c8d4 : a042            >            ldy #$42
c8d6 : a202            >            ldx #4-2
c8d8 : 42              >            db  $42          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
c8d9 : c8              >            iny
c8da : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
c8db : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
c8dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$42,0
                       >            load_flag 0
c8de : a900            >            lda #0             ;allow test to change I
                       >
c8e0 : 48              >            pha         ;use stack to load status
c8e1 : a9bd            >            lda #$ff-$42     ;precharge accu
c8e3 : 28              >            plp
                       >
c8e4 : 42              >            db  $42          ;test nop integrity - fla
c8e5 : ea              >            nop
c8e6 : ea              >            nop
                       >            tst_a $ff-$42,0
c8e7 : 08              >            php         ;save flags
c8e8 : c9bd            >            cmp #$ff-$42     ;test result
                       >            trap_ne
c8ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c8ec : 68              >            pla         ;load status
c8ed : 48              >            pha
                       >            cmp_flag 0
c8ee : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c8f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c8f2 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$42,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c8f3 : a9ff            >            lda #$ff             ;allow test to change
                       >
c8f5 : 48              >            pha         ;use stack to load status
c8f6 : a968            >            lda #$aa-$42     ;precharge accu
c8f8 : 28              >            plp
                       >
c8f9 : 42              >            db  $42          ;test nop integrity - fla
c8fa : ea              >            nop
c8fb : ea              >            nop
                       >            tst_a $aa-$42,$ff
c8fc : 08              >            php         ;save flags
c8fd : c968            >            cmp #$aa-$42     ;test result
                       >            trap_ne
c8ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c901 : 68              >            pla         ;load status
c902 : 48              >            pha
                       >            cmp_flag $ff
c903 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c905 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c907 : 28              >            plp         ;restore status
                       >
c908 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
c90a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c90c : e000            >            cpx #0
                       >            trap_ne         ;x changed
c90e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $62,2
c910 : a042            >            ldy #$42
c912 : a202            >            ldx #4-2
c914 : 62              >            db  $62          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
c915 : c8              >            iny
c916 : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
c917 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
c918 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$62,0
                       >            load_flag 0
c91a : a900            >            lda #0             ;allow test to change I
                       >
c91c : 48              >            pha         ;use stack to load status
c91d : a99d            >            lda #$ff-$62     ;precharge accu
c91f : 28              >            plp
                       >
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c920 : 62              >            db  $62          ;test nop integrity - fla
c921 : ea              >            nop
c922 : ea              >            nop
                       >            tst_a $ff-$62,0
c923 : 08              >            php         ;save flags
c924 : c99d            >            cmp #$ff-$62     ;test result
                       >            trap_ne
c926 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c928 : 68              >            pla         ;load status
c929 : 48              >            pha
                       >            cmp_flag 0
c92a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c92c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c92e : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$62,$ff
                       >            load_flag $ff
c92f : a9ff            >            lda #$ff             ;allow test to change
                       >
c931 : 48              >            pha         ;use stack to load status
c932 : a948            >            lda #$aa-$62     ;precharge accu
c934 : 28              >            plp
                       >
c935 : 62              >            db  $62          ;test nop integrity - fla
c936 : ea              >            nop
c937 : ea              >            nop
                       >            tst_a $aa-$62,$ff
c938 : 08              >            php         ;save flags
c939 : c948            >            cmp #$aa-$62     ;test result
                       >            trap_ne
c93b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c93d : 68              >            pla         ;load status
c93e : 48              >            pha
                       >            cmp_flag $ff
c93f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c941 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c943 : 28              >            plp         ;restore status
                       >
c944 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
c946 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c948 : e000            >            cpx #0
                       >            trap_ne         ;x changed
c94a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $82,2
c94c : a042            >            ldy #$42
c94e : a202            >            ldx #4-2
c950 : 82              >            db  $82          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        endif
                       >        if 2 = 2
c951 : c8              >            iny
c952 : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
c953 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
c954 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$82,0
                       >            load_flag 0
c956 : a900            >            lda #0             ;allow test to change I
                       >
c958 : 48              >            pha         ;use stack to load status
c959 : a97d            >            lda #$ff-$82     ;precharge accu
c95b : 28              >            plp
                       >
c95c : 82              >            db  $82          ;test nop integrity - fla
c95d : ea              >            nop
c95e : ea              >            nop
                       >            tst_a $ff-$82,0
c95f : 08              >            php         ;save flags
c960 : c97d            >            cmp #$ff-$82     ;test result
                       >            trap_ne
c962 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c964 : 68              >            pla         ;load status
c965 : 48              >            pha
                       >            cmp_flag 0
c966 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c968 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c96a : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$82,$ff
                       >            load_flag $ff
c96b : a9ff            >            lda #$ff             ;allow test to change
                       >
c96d : 48              >            pha         ;use stack to load status
c96e : a928            >            lda #$aa-$82     ;precharge accu
c970 : 28              >            plp
                       >
c971 : 82              >            db  $82          ;test nop integrity - fla
c972 : ea              >            nop
c973 : ea              >            nop
                       >            tst_a $aa-$82,$ff
c974 : 08              >            php         ;save flags
c975 : c928            >            cmp #$aa-$82     ;test result
                       >            trap_ne
c977 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c979 : 68              >            pla         ;load status
c97a : 48              >            pha
                       >            cmp_flag $ff
c97b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
c97d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c97f : 28              >            plp         ;restore status
                       >
c980 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
c982 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c984 : e000            >            cpx #0
                       >            trap_ne         ;x changed
c986 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $c2,2
c988 : a042            >            ldy #$42
c98a : a202            >            ldx #4-2
c98c : c2              >            db  $c2          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
c98d : c8              >            iny
c98e : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
c98f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
c990 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$c2,0
                       >            load_flag 0
c992 : a900            >            lda #0             ;allow test to change I
                       >
c994 : 48              >            pha         ;use stack to load status
c995 : a93d            >            lda #$ff-$c2     ;precharge accu
c997 : 28              >            plp
                       >
c998 : c2              >            db  $c2          ;test nop integrity - fla
c999 : ea              >            nop
c99a : ea              >            nop
                       >            tst_a $ff-$c2,0
c99b : 08              >            php         ;save flags
c99c : c93d            >            cmp #$ff-$c2     ;test result
                       >            trap_ne
c99e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9a0 : 68              >            pla         ;load status
c9a1 : 48              >            pha
                       >            cmp_flag 0
c9a2 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c9a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9a6 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$c2,$ff
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            load_flag $ff
c9a7 : a9ff            >            lda #$ff             ;allow test to change
                       >
c9a9 : 48              >            pha         ;use stack to load status
c9aa : a9e8            >            lda #$aa-$c2     ;precharge accu
c9ac : 28              >            plp
                       >
c9ad : c2              >            db  $c2          ;test nop integrity - fla
c9ae : ea              >            nop
c9af : ea              >            nop
                       >            tst_a $aa-$c2,$ff
c9b0 : 08              >            php         ;save flags
c9b1 : c9e8            >            cmp #$aa-$c2     ;test result
                       >            trap_ne
c9b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9b5 : 68              >            pla         ;load status
c9b6 : 48              >            pha
                       >            cmp_flag $ff
c9b7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c9b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9bb : 28              >            plp         ;restore status
                       >
c9bc : c042            >            cpy #$42
                       >            trap_ne         ;y changed
c9be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9c0 : e000            >            cpx #0
                       >            trap_ne         ;x changed
c9c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $e2,2
c9c4 : a042            >            ldy #$42
c9c6 : a202            >            ldx #4-2
c9c8 : e2              >            db  $e2          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
c9c9 : c8              >            iny
c9ca : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
c9cb : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
c9cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$e2,0
                       >            load_flag 0
c9ce : a900            >            lda #0             ;allow test to change I
                       >
c9d0 : 48              >            pha         ;use stack to load status
c9d1 : a91d            >            lda #$ff-$e2     ;precharge accu
c9d3 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c9d4 : e2              >            db  $e2          ;test nop integrity - fla
c9d5 : ea              >            nop
c9d6 : ea              >            nop
                       >            tst_a $ff-$e2,0
c9d7 : 08              >            php         ;save flags
c9d8 : c91d            >            cmp #$ff-$e2     ;test result
                       >            trap_ne
c9da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9dc : 68              >            pla         ;load status
c9dd : 48              >            pha
                       >            cmp_flag 0
c9de : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c9e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9e2 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$e2,$ff
                       >            load_flag $ff
c9e3 : a9ff            >            lda #$ff             ;allow test to change
                       >
c9e5 : 48              >            pha         ;use stack to load status
c9e6 : a9c8            >            lda #$aa-$e2     ;precharge accu
c9e8 : 28              >            plp
                       >
c9e9 : e2              >            db  $e2          ;test nop integrity - fla
c9ea : ea              >            nop
c9eb : ea              >            nop
                       >            tst_a $aa-$e2,$ff
c9ec : 08              >            php         ;save flags
c9ed : c9c8            >            cmp #$aa-$e2     ;test result
                       >            trap_ne
c9ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9f1 : 68              >            pla         ;load status
c9f2 : 48              >            pha
                       >            cmp_flag $ff
c9f3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c9f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9f7 : 28              >            plp         ;restore status
                       >
c9f8 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
c9fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9fc : e000            >            cpx #0
                       >            trap_ne         ;x changed
c9fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $44,2
ca00 : a042            >            ldy #$42
ca02 : a202            >            ldx #4-2
ca04 : 44              >            db  $44          ;test nop length
                       >        if 2 = 1
                       >            dex
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            dex
                       >        endif
                       >        if 2 = 2
ca05 : c8              >            iny
ca06 : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
ca07 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ca08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$44,0
                       >            load_flag 0
ca0a : a900            >            lda #0             ;allow test to change I
                       >
ca0c : 48              >            pha         ;use stack to load status
ca0d : a9bb            >            lda #$ff-$44     ;precharge accu
ca0f : 28              >            plp
                       >
ca10 : 44              >            db  $44          ;test nop integrity - fla
ca11 : ea              >            nop
ca12 : ea              >            nop
                       >            tst_a $ff-$44,0
ca13 : 08              >            php         ;save flags
ca14 : c9bb            >            cmp #$ff-$44     ;test result
                       >            trap_ne
ca16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca18 : 68              >            pla         ;load status
ca19 : 48              >            pha
                       >            cmp_flag 0
ca1a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ca1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca1e : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$44,$ff
                       >            load_flag $ff
ca1f : a9ff            >            lda #$ff             ;allow test to change
                       >
ca21 : 48              >            pha         ;use stack to load status
ca22 : a966            >            lda #$aa-$44     ;precharge accu
ca24 : 28              >            plp
                       >
ca25 : 44              >            db  $44          ;test nop integrity - fla
ca26 : ea              >            nop
ca27 : ea              >            nop
                       >            tst_a $aa-$44,$ff
ca28 : 08              >            php         ;save flags
ca29 : c966            >            cmp #$aa-$44     ;test result
                       >            trap_ne
ca2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca2d : 68              >            pla         ;load status
ca2e : 48              >            pha
                       >            cmp_flag $ff
ca2f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >            trap_ne
ca31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca33 : 28              >            plp         ;restore status
                       >
ca34 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
ca36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca38 : e000            >            cpx #0
                       >            trap_ne         ;x changed
ca3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $54,2
ca3c : a042            >            ldy #$42
ca3e : a202            >            ldx #4-2
ca40 : 54              >            db  $54          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
ca41 : c8              >            iny
ca42 : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
ca43 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ca44 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$54,0
                       >            load_flag 0
ca46 : a900            >            lda #0             ;allow test to change I
                       >
ca48 : 48              >            pha         ;use stack to load status
ca49 : a9ab            >            lda #$ff-$54     ;precharge accu
ca4b : 28              >            plp
                       >
ca4c : 54              >            db  $54          ;test nop integrity - fla
ca4d : ea              >            nop
ca4e : ea              >            nop
                       >            tst_a $ff-$54,0
ca4f : 08              >            php         ;save flags
ca50 : c9ab            >            cmp #$ff-$54     ;test result
                       >            trap_ne
ca52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca54 : 68              >            pla         ;load status
ca55 : 48              >            pha
                       >            cmp_flag 0
ca56 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ca58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca5a : 28              >            plp         ;restore status
                       >
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            set_a $aa-$54,$ff
                       >            load_flag $ff
ca5b : a9ff            >            lda #$ff             ;allow test to change
                       >
ca5d : 48              >            pha         ;use stack to load status
ca5e : a956            >            lda #$aa-$54     ;precharge accu
ca60 : 28              >            plp
                       >
ca61 : 54              >            db  $54          ;test nop integrity - fla
ca62 : ea              >            nop
ca63 : ea              >            nop
                       >            tst_a $aa-$54,$ff
ca64 : 08              >            php         ;save flags
ca65 : c956            >            cmp #$aa-$54     ;test result
                       >            trap_ne
ca67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca69 : 68              >            pla         ;load status
ca6a : 48              >            pha
                       >            cmp_flag $ff
ca6b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ca6d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca6f : 28              >            plp         ;restore status
                       >
ca70 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
ca72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca74 : e000            >            cpx #0
                       >            trap_ne         ;x changed
ca76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $d4,2
ca78 : a042            >            ldy #$42
ca7a : a202            >            ldx #4-2
ca7c : d4              >            db  $d4          ;test nop length
                       >        if 2 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
ca7d : c8              >            iny
ca7e : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
ca7f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ca80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$d4,0
                       >            load_flag 0
ca82 : a900            >            lda #0             ;allow test to change I
                       >
ca84 : 48              >            pha         ;use stack to load status
ca85 : a92b            >            lda #$ff-$d4     ;precharge accu
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ca87 : 28              >            plp
                       >
ca88 : d4              >            db  $d4          ;test nop integrity - fla
ca89 : ea              >            nop
ca8a : ea              >            nop
                       >            tst_a $ff-$d4,0
ca8b : 08              >            php         ;save flags
ca8c : c92b            >            cmp #$ff-$d4     ;test result
                       >            trap_ne
ca8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca90 : 68              >            pla         ;load status
ca91 : 48              >            pha
                       >            cmp_flag 0
ca92 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ca94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca96 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$d4,$ff
                       >            load_flag $ff
ca97 : a9ff            >            lda #$ff             ;allow test to change
                       >
ca99 : 48              >            pha         ;use stack to load status
ca9a : a9d6            >            lda #$aa-$d4     ;precharge accu
ca9c : 28              >            plp
                       >
ca9d : d4              >            db  $d4          ;test nop integrity - fla
ca9e : ea              >            nop
ca9f : ea              >            nop
                       >            tst_a $aa-$d4,$ff
caa0 : 08              >            php         ;save flags
caa1 : c9d6            >            cmp #$aa-$d4     ;test result
                       >            trap_ne
caa3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
caa5 : 68              >            pla         ;load status
caa6 : 48              >            pha
                       >            cmp_flag $ff
caa7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
caa9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
caab : 28              >            plp         ;restore status
                       >
caac : c042            >            cpy #$42
                       >            trap_ne         ;y changed
caae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cab0 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cab2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $f4,2
cab4 : a042            >            ldy #$42
cab6 : a202            >            ldx #4-2
cab8 : f4              >            db  $f4          ;test nop length
                       >        if 2 = 1
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            dex
                       >            dex
                       >        endif
                       >        if 2 = 2
cab9 : c8              >            iny
caba : ca              >            dex
                       >        endif
                       >        if 2 = 3
                       >            iny
                       >            iny
                       >        endif
cabb : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cabc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$f4,0
                       >            load_flag 0
cabe : a900            >            lda #0             ;allow test to change I
                       >
cac0 : 48              >            pha         ;use stack to load status
cac1 : a90b            >            lda #$ff-$f4     ;precharge accu
cac3 : 28              >            plp
                       >
cac4 : f4              >            db  $f4          ;test nop integrity - fla
cac5 : ea              >            nop
cac6 : ea              >            nop
                       >            tst_a $ff-$f4,0
cac7 : 08              >            php         ;save flags
cac8 : c90b            >            cmp #$ff-$f4     ;test result
                       >            trap_ne
caca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cacc : 68              >            pla         ;load status
cacd : 48              >            pha
                       >            cmp_flag 0
cace : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cad0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cad2 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$f4,$ff
                       >            load_flag $ff
cad3 : a9ff            >            lda #$ff             ;allow test to change
                       >
cad5 : 48              >            pha         ;use stack to load status
cad6 : a9b6            >            lda #$aa-$f4     ;precharge accu
cad8 : 28              >            plp
                       >
cad9 : f4              >            db  $f4          ;test nop integrity - fla
cada : ea              >            nop
cadb : ea              >            nop
                       >            tst_a $aa-$f4,$ff
cadc : 08              >            php         ;save flags
cadd : c9b6            >            cmp #$aa-$f4     ;test result
                       >            trap_ne
cadf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cae1 : 68              >            pla         ;load status
cae2 : 48              >            pha
                       >            cmp_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cae3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cae5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cae7 : 28              >            plp         ;restore status
                       >
cae8 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
caea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
caec : e000            >            cpx #0
                       >            trap_ne         ;x changed
caee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $5c,3
caf0 : a042            >            ldy #$42
caf2 : a201            >            ldx #4-3
caf4 : 5c              >            db  $5c          ;test nop length
                       >        if 3 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 3 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 3 = 3
caf5 : c8              >            iny
caf6 : c8              >            iny
                       >        endif
caf7 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
caf8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$5c,0
                       >            load_flag 0
cafa : a900            >            lda #0             ;allow test to change I
                       >
cafc : 48              >            pha         ;use stack to load status
cafd : a9a3            >            lda #$ff-$5c     ;precharge accu
caff : 28              >            plp
                       >
cb00 : 5c              >            db  $5c          ;test nop integrity - fla
cb01 : ea              >            nop
cb02 : ea              >            nop
                       >            tst_a $ff-$5c,0
cb03 : 08              >            php         ;save flags
cb04 : c9a3            >            cmp #$ff-$5c     ;test result
                       >            trap_ne
cb06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb08 : 68              >            pla         ;load status
cb09 : 48              >            pha
                       >            cmp_flag 0
cb0a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cb0c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb0e : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >            set_a $aa-$5c,$ff
                       >            load_flag $ff
cb0f : a9ff            >            lda #$ff             ;allow test to change
                       >
cb11 : 48              >            pha         ;use stack to load status
cb12 : a94e            >            lda #$aa-$5c     ;precharge accu
cb14 : 28              >            plp
                       >
cb15 : 5c              >            db  $5c          ;test nop integrity - fla
cb16 : ea              >            nop
cb17 : ea              >            nop
                       >            tst_a $aa-$5c,$ff
cb18 : 08              >            php         ;save flags
cb19 : c94e            >            cmp #$aa-$5c     ;test result
                       >            trap_ne
cb1b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb1d : 68              >            pla         ;load status
cb1e : 48              >            pha
                       >            cmp_flag $ff
cb1f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cb21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb23 : 28              >            plp         ;restore status
                       >
cb24 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cb26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb28 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cb2a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $dc,3
cb2c : a042            >            ldy #$42
cb2e : a201            >            ldx #4-3
cb30 : dc              >            db  $dc          ;test nop length
                       >        if 3 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 3 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 3 = 3
cb31 : c8              >            iny
cb32 : c8              >            iny
                       >        endif
cb33 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cb34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$dc,0
                       >            load_flag 0
cb36 : a900            >            lda #0             ;allow test to change I
                       >
cb38 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cb39 : a923            >            lda #$ff-$dc     ;precharge accu
cb3b : 28              >            plp
                       >
cb3c : dc              >            db  $dc          ;test nop integrity - fla
cb3d : ea              >            nop
cb3e : ea              >            nop
                       >            tst_a $ff-$dc,0
cb3f : 08              >            php         ;save flags
cb40 : c923            >            cmp #$ff-$dc     ;test result
                       >            trap_ne
cb42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb44 : 68              >            pla         ;load status
cb45 : 48              >            pha
                       >            cmp_flag 0
cb46 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cb48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb4a : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$dc,$ff
                       >            load_flag $ff
cb4b : a9ff            >            lda #$ff             ;allow test to change
                       >
cb4d : 48              >            pha         ;use stack to load status
cb4e : a9ce            >            lda #$aa-$dc     ;precharge accu
cb50 : 28              >            plp
                       >
cb51 : dc              >            db  $dc          ;test nop integrity - fla
cb52 : ea              >            nop
cb53 : ea              >            nop
                       >            tst_a $aa-$dc,$ff
cb54 : 08              >            php         ;save flags
cb55 : c9ce            >            cmp #$aa-$dc     ;test result
                       >            trap_ne
cb57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb59 : 68              >            pla         ;load status
cb5a : 48              >            pha
                       >            cmp_flag $ff
cb5b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cb5d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb5f : 28              >            plp         ;restore status
                       >
cb60 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cb62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb64 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cb66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $fc,3
cb68 : a042            >            ldy #$42
cb6a : a201            >            ldx #4-3
cb6c : fc              >            db  $fc          ;test nop length
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        if 3 = 1
                       >            dex
                       >            dex
                       >        endif
                       >        if 3 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 3 = 3
cb6d : c8              >            iny
cb6e : c8              >            iny
                       >        endif
cb6f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cb70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$fc,0
                       >            load_flag 0
cb72 : a900            >            lda #0             ;allow test to change I
                       >
cb74 : 48              >            pha         ;use stack to load status
cb75 : a903            >            lda #$ff-$fc     ;precharge accu
cb77 : 28              >            plp
                       >
cb78 : fc              >            db  $fc          ;test nop integrity - fla
cb79 : ea              >            nop
cb7a : ea              >            nop
                       >            tst_a $ff-$fc,0
cb7b : 08              >            php         ;save flags
cb7c : c903            >            cmp #$ff-$fc     ;test result
                       >            trap_ne
cb7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb80 : 68              >            pla         ;load status
cb81 : 48              >            pha
                       >            cmp_flag 0
cb82 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cb84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb86 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$fc,$ff
                       >            load_flag $ff
cb87 : a9ff            >            lda #$ff             ;allow test to change
                       >
cb89 : 48              >            pha         ;use stack to load status
cb8a : a9ae            >            lda #$aa-$fc     ;precharge accu
cb8c : 28              >            plp
                       >
cb8d : fc              >            db  $fc          ;test nop integrity - fla
cb8e : ea              >            nop
cb8f : ea              >            nop
                       >            tst_a $aa-$fc,$ff
cb90 : 08              >            php         ;save flags
cb91 : c9ae            >            cmp #$aa-$fc     ;test result
                       >            trap_ne
cb93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb95 : 68              >            pla         ;load status
cb96 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            cmp_flag $ff
cb97 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cb99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb9b : 28              >            plp         ;restore status
                       >
cb9c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cb9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cba0 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cba2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $03,1
cba4 : a042            >            ldy #$42
cba6 : a203            >            ldx #4-1
cba8 : 03              >            db  $03          ;test nop length
                       >        if 1 = 1
cba9 : ca              >            dex
cbaa : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cbab : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cbac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$03,0
                       >            load_flag 0
cbae : a900            >            lda #0             ;allow test to change I
                       >
cbb0 : 48              >            pha         ;use stack to load status
cbb1 : a9fc            >            lda #$ff-$03     ;precharge accu
cbb3 : 28              >            plp
                       >
cbb4 : 03              >            db  $03          ;test nop integrity - fla
cbb5 : ea              >            nop
cbb6 : ea              >            nop
                       >            tst_a $ff-$03,0
cbb7 : 08              >            php         ;save flags
cbb8 : c9fc            >            cmp #$ff-$03     ;test result
                       >            trap_ne
cbba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbbc : 68              >            pla         ;load status
cbbd : 48              >            pha
                       >            cmp_flag 0
cbbe : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cbc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cbc2 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$03,$ff
                       >            load_flag $ff
cbc3 : a9ff            >            lda #$ff             ;allow test to change
                       >
cbc5 : 48              >            pha         ;use stack to load status
cbc6 : a9a7            >            lda #$aa-$03     ;precharge accu
cbc8 : 28              >            plp
                       >
cbc9 : 03              >            db  $03          ;test nop integrity - fla
cbca : ea              >            nop
cbcb : ea              >            nop
                       >            tst_a $aa-$03,$ff
cbcc : 08              >            php         ;save flags
cbcd : c9a7            >            cmp #$aa-$03     ;test result
                       >            trap_ne
cbcf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbd1 : 68              >            pla         ;load status
cbd2 : 48              >            pha
                       >            cmp_flag $ff
cbd3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cbd5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbd7 : 28              >            plp         ;restore status
                       >
cbd8 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cbda : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbdc : e000            >            cpx #0
                       >            trap_ne         ;x changed
cbde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $13,1
cbe0 : a042            >            ldy #$42
cbe2 : a203            >            ldx #4-1
cbe4 : 13              >            db  $13          ;test nop length
                       >        if 1 = 1
cbe5 : ca              >            dex
cbe6 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cbe7 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cbe8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$13,0
                       >            load_flag 0
cbea : a900            >            lda #0             ;allow test to change I
                       >
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cbec : 48              >            pha         ;use stack to load status
cbed : a9ec            >            lda #$ff-$13     ;precharge accu
cbef : 28              >            plp
                       >
cbf0 : 13              >            db  $13          ;test nop integrity - fla
cbf1 : ea              >            nop
cbf2 : ea              >            nop
                       >            tst_a $ff-$13,0
cbf3 : 08              >            php         ;save flags
cbf4 : c9ec            >            cmp #$ff-$13     ;test result
                       >            trap_ne
cbf6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbf8 : 68              >            pla         ;load status
cbf9 : 48              >            pha
                       >            cmp_flag 0
cbfa : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cbfc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbfe : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$13,$ff
                       >            load_flag $ff
cbff : a9ff            >            lda #$ff             ;allow test to change
                       >
cc01 : 48              >            pha         ;use stack to load status
cc02 : a997            >            lda #$aa-$13     ;precharge accu
cc04 : 28              >            plp
                       >
cc05 : 13              >            db  $13          ;test nop integrity - fla
cc06 : ea              >            nop
cc07 : ea              >            nop
                       >            tst_a $aa-$13,$ff
cc08 : 08              >            php         ;save flags
cc09 : c997            >            cmp #$aa-$13     ;test result
                       >            trap_ne
cc0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc0d : 68              >            pla         ;load status
cc0e : 48              >            pha
                       >            cmp_flag $ff
cc0f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cc11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc13 : 28              >            plp         ;restore status
                       >
cc14 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cc16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc18 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cc1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $23,1
cc1c : a042            >            ldy #$42
cc1e : a203            >            ldx #4-1
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cc20 : 23              >            db  $23          ;test nop length
                       >        if 1 = 1
cc21 : ca              >            dex
cc22 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cc23 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cc24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$23,0
                       >            load_flag 0
cc26 : a900            >            lda #0             ;allow test to change I
                       >
cc28 : 48              >            pha         ;use stack to load status
cc29 : a9dc            >            lda #$ff-$23     ;precharge accu
cc2b : 28              >            plp
                       >
cc2c : 23              >            db  $23          ;test nop integrity - fla
cc2d : ea              >            nop
cc2e : ea              >            nop
                       >            tst_a $ff-$23,0
cc2f : 08              >            php         ;save flags
cc30 : c9dc            >            cmp #$ff-$23     ;test result
                       >            trap_ne
cc32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc34 : 68              >            pla         ;load status
cc35 : 48              >            pha
                       >            cmp_flag 0
cc36 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cc38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc3a : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$23,$ff
                       >            load_flag $ff
cc3b : a9ff            >            lda #$ff             ;allow test to change
                       >
cc3d : 48              >            pha         ;use stack to load status
cc3e : a987            >            lda #$aa-$23     ;precharge accu
cc40 : 28              >            plp
                       >
cc41 : 23              >            db  $23          ;test nop integrity - fla
cc42 : ea              >            nop
cc43 : ea              >            nop
                       >            tst_a $aa-$23,$ff
cc44 : 08              >            php         ;save flags
cc45 : c987            >            cmp #$aa-$23     ;test result
                       >            trap_ne
cc47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc49 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cc4a : 48              >            pha
                       >            cmp_flag $ff
cc4b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cc4d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc4f : 28              >            plp         ;restore status
                       >
cc50 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cc52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc54 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cc56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $33,1
cc58 : a042            >            ldy #$42
cc5a : a203            >            ldx #4-1
cc5c : 33              >            db  $33          ;test nop length
                       >        if 1 = 1
cc5d : ca              >            dex
cc5e : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cc5f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cc60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$33,0
                       >            load_flag 0
cc62 : a900            >            lda #0             ;allow test to change I
                       >
cc64 : 48              >            pha         ;use stack to load status
cc65 : a9cc            >            lda #$ff-$33     ;precharge accu
cc67 : 28              >            plp
                       >
cc68 : 33              >            db  $33          ;test nop integrity - fla
cc69 : ea              >            nop
cc6a : ea              >            nop
                       >            tst_a $ff-$33,0
cc6b : 08              >            php         ;save flags
cc6c : c9cc            >            cmp #$ff-$33     ;test result
                       >            trap_ne
cc6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc70 : 68              >            pla         ;load status
cc71 : 48              >            pha
                       >            cmp_flag 0
cc72 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cc74 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
cc76 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$33,$ff
                       >            load_flag $ff
cc77 : a9ff            >            lda #$ff             ;allow test to change
                       >
cc79 : 48              >            pha         ;use stack to load status
cc7a : a977            >            lda #$aa-$33     ;precharge accu
cc7c : 28              >            plp
                       >
cc7d : 33              >            db  $33          ;test nop integrity - fla
cc7e : ea              >            nop
cc7f : ea              >            nop
                       >            tst_a $aa-$33,$ff
cc80 : 08              >            php         ;save flags
cc81 : c977            >            cmp #$aa-$33     ;test result
                       >            trap_ne
cc83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc85 : 68              >            pla         ;load status
cc86 : 48              >            pha
                       >            cmp_flag $ff
cc87 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cc89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc8b : 28              >            plp         ;restore status
                       >
cc8c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cc8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc90 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cc92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $43,1
cc94 : a042            >            ldy #$42
cc96 : a203            >            ldx #4-1
cc98 : 43              >            db  $43          ;test nop length
                       >        if 1 = 1
cc99 : ca              >            dex
cc9a : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cc9b : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cc9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$43,0
                       >            load_flag 0
cc9e : a900            >            lda #0             ;allow test to change I
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
cca0 : 48              >            pha         ;use stack to load status
cca1 : a9bc            >            lda #$ff-$43     ;precharge accu
cca3 : 28              >            plp
                       >
cca4 : 43              >            db  $43          ;test nop integrity - fla
cca5 : ea              >            nop
cca6 : ea              >            nop
                       >            tst_a $ff-$43,0
cca7 : 08              >            php         ;save flags
cca8 : c9bc            >            cmp #$ff-$43     ;test result
                       >            trap_ne
ccaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccac : 68              >            pla         ;load status
ccad : 48              >            pha
                       >            cmp_flag 0
ccae : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ccb0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccb2 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$43,$ff
                       >            load_flag $ff
ccb3 : a9ff            >            lda #$ff             ;allow test to change
                       >
ccb5 : 48              >            pha         ;use stack to load status
ccb6 : a967            >            lda #$aa-$43     ;precharge accu
ccb8 : 28              >            plp
                       >
ccb9 : 43              >            db  $43          ;test nop integrity - fla
ccba : ea              >            nop
ccbb : ea              >            nop
                       >            tst_a $aa-$43,$ff
ccbc : 08              >            php         ;save flags
ccbd : c967            >            cmp #$aa-$43     ;test result
                       >            trap_ne
ccbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccc1 : 68              >            pla         ;load status
ccc2 : 48              >            pha
                       >            cmp_flag $ff
ccc3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ccc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccc7 : 28              >            plp         ;restore status
                       >
ccc8 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
ccca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cccc : e000            >            cpx #0
                       >            trap_ne         ;x changed
ccce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $53,1
ccd0 : a042            >            ldy #$42
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ccd2 : a203            >            ldx #4-1
ccd4 : 53              >            db  $53          ;test nop length
                       >        if 1 = 1
ccd5 : ca              >            dex
ccd6 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
ccd7 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ccd8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$53,0
                       >            load_flag 0
ccda : a900            >            lda #0             ;allow test to change I
                       >
ccdc : 48              >            pha         ;use stack to load status
ccdd : a9ac            >            lda #$ff-$53     ;precharge accu
ccdf : 28              >            plp
                       >
cce0 : 53              >            db  $53          ;test nop integrity - fla
cce1 : ea              >            nop
cce2 : ea              >            nop
                       >            tst_a $ff-$53,0
cce3 : 08              >            php         ;save flags
cce4 : c9ac            >            cmp #$ff-$53     ;test result
                       >            trap_ne
cce6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cce8 : 68              >            pla         ;load status
cce9 : 48              >            pha
                       >            cmp_flag 0
ccea : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ccec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccee : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$53,$ff
                       >            load_flag $ff
ccef : a9ff            >            lda #$ff             ;allow test to change
                       >
ccf1 : 48              >            pha         ;use stack to load status
ccf2 : a957            >            lda #$aa-$53     ;precharge accu
ccf4 : 28              >            plp
                       >
ccf5 : 53              >            db  $53          ;test nop integrity - fla
ccf6 : ea              >            nop
ccf7 : ea              >            nop
                       >            tst_a $aa-$53,$ff
ccf8 : 08              >            php         ;save flags
ccf9 : c957            >            cmp #$aa-$53     ;test result
                       >            trap_ne
ccfb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ccfd : 68              >            pla         ;load status
ccfe : 48              >            pha
                       >            cmp_flag $ff
ccff : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cd01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd03 : 28              >            plp         ;restore status
                       >
cd04 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cd06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd08 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cd0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $63,1
cd0c : a042            >            ldy #$42
cd0e : a203            >            ldx #4-1
cd10 : 63              >            db  $63          ;test nop length
                       >        if 1 = 1
cd11 : ca              >            dex
cd12 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cd13 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cd14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$63,0
                       >            load_flag 0
cd16 : a900            >            lda #0             ;allow test to change I
                       >
cd18 : 48              >            pha         ;use stack to load status
cd19 : a99c            >            lda #$ff-$63     ;precharge accu
cd1b : 28              >            plp
                       >
cd1c : 63              >            db  $63          ;test nop integrity - fla
cd1d : ea              >            nop
cd1e : ea              >            nop
                       >            tst_a $ff-$63,0
cd1f : 08              >            php         ;save flags
cd20 : c99c            >            cmp #$ff-$63     ;test result
                       >            trap_ne
cd22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd24 : 68              >            pla         ;load status
cd25 : 48              >            pha
                       >            cmp_flag 0
cd26 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cd28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd2a : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$63,$ff
                       >            load_flag $ff
cd2b : a9ff            >            lda #$ff             ;allow test to change
                       >
cd2d : 48              >            pha         ;use stack to load status
cd2e : a947            >            lda #$aa-$63     ;precharge accu
cd30 : 28              >            plp
                       >
cd31 : 63              >            db  $63          ;test nop integrity - fla
cd32 : ea              >            nop
cd33 : ea              >            nop
                       >            tst_a $aa-$63,$ff
cd34 : 08              >            php         ;save flags
cd35 : c947            >            cmp #$aa-$63     ;test result
                       >            trap_ne
cd37 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd39 : 68              >            pla         ;load status
cd3a : 48              >            pha
                       >            cmp_flag $ff
cd3b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cd3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd3f : 28              >            plp         ;restore status
                       >
cd40 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cd42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd44 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cd46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $73,1
cd48 : a042            >            ldy #$42
cd4a : a203            >            ldx #4-1
cd4c : 73              >            db  $73          ;test nop length
                       >        if 1 = 1
cd4d : ca              >            dex
cd4e : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cd4f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cd50 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$73,0
                       >            load_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cd52 : a900            >            lda #0             ;allow test to change I
                       >
cd54 : 48              >            pha         ;use stack to load status
cd55 : a98c            >            lda #$ff-$73     ;precharge accu
cd57 : 28              >            plp
                       >
cd58 : 73              >            db  $73          ;test nop integrity - fla
cd59 : ea              >            nop
cd5a : ea              >            nop
                       >            tst_a $ff-$73,0
cd5b : 08              >            php         ;save flags
cd5c : c98c            >            cmp #$ff-$73     ;test result
                       >            trap_ne
cd5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd60 : 68              >            pla         ;load status
cd61 : 48              >            pha
                       >            cmp_flag 0
cd62 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cd64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd66 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$73,$ff
                       >            load_flag $ff
cd67 : a9ff            >            lda #$ff             ;allow test to change
                       >
cd69 : 48              >            pha         ;use stack to load status
cd6a : a937            >            lda #$aa-$73     ;precharge accu
cd6c : 28              >            plp
                       >
cd6d : 73              >            db  $73          ;test nop integrity - fla
cd6e : ea              >            nop
cd6f : ea              >            nop
                       >            tst_a $aa-$73,$ff
cd70 : 08              >            php         ;save flags
cd71 : c937            >            cmp #$aa-$73     ;test result
                       >            trap_ne
cd73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd75 : 68              >            pla         ;load status
cd76 : 48              >            pha
                       >            cmp_flag $ff
cd77 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cd79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd7b : 28              >            plp         ;restore status
                       >
cd7c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cd7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd80 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cd82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $83,1
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cd84 : a042            >            ldy #$42
cd86 : a203            >            ldx #4-1
cd88 : 83              >            db  $83          ;test nop length
                       >        if 1 = 1
cd89 : ca              >            dex
cd8a : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cd8b : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cd8c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$83,0
                       >            load_flag 0
cd8e : a900            >            lda #0             ;allow test to change I
                       >
cd90 : 48              >            pha         ;use stack to load status
cd91 : a97c            >            lda #$ff-$83     ;precharge accu
cd93 : 28              >            plp
                       >
cd94 : 83              >            db  $83          ;test nop integrity - fla
cd95 : ea              >            nop
cd96 : ea              >            nop
                       >            tst_a $ff-$83,0
cd97 : 08              >            php         ;save flags
cd98 : c97c            >            cmp #$ff-$83     ;test result
                       >            trap_ne
cd9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd9c : 68              >            pla         ;load status
cd9d : 48              >            pha
                       >            cmp_flag 0
cd9e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cda0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cda2 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$83,$ff
                       >            load_flag $ff
cda3 : a9ff            >            lda #$ff             ;allow test to change
                       >
cda5 : 48              >            pha         ;use stack to load status
cda6 : a927            >            lda #$aa-$83     ;precharge accu
cda8 : 28              >            plp
                       >
cda9 : 83              >            db  $83          ;test nop integrity - fla
cdaa : ea              >            nop
cdab : ea              >            nop
                       >            tst_a $aa-$83,$ff
cdac : 08              >            php         ;save flags
cdad : c927            >            cmp #$aa-$83     ;test result
                       >            trap_ne
cdaf : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
cdb1 : 68              >            pla         ;load status
cdb2 : 48              >            pha
                       >            cmp_flag $ff
cdb3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cdb5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdb7 : 28              >            plp         ;restore status
                       >
cdb8 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cdba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdbc : e000            >            cpx #0
                       >            trap_ne         ;x changed
cdbe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $93,1
cdc0 : a042            >            ldy #$42
cdc2 : a203            >            ldx #4-1
cdc4 : 93              >            db  $93          ;test nop length
                       >        if 1 = 1
cdc5 : ca              >            dex
cdc6 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cdc7 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cdc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$93,0
                       >            load_flag 0
cdca : a900            >            lda #0             ;allow test to change I
                       >
cdcc : 48              >            pha         ;use stack to load status
cdcd : a96c            >            lda #$ff-$93     ;precharge accu
cdcf : 28              >            plp
                       >
cdd0 : 93              >            db  $93          ;test nop integrity - fla
cdd1 : ea              >            nop
cdd2 : ea              >            nop
                       >            tst_a $ff-$93,0
cdd3 : 08              >            php         ;save flags
cdd4 : c96c            >            cmp #$ff-$93     ;test result
                       >            trap_ne
cdd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdd8 : 68              >            pla         ;load status
cdd9 : 48              >            pha
                       >            cmp_flag 0
cdda : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
cddc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdde : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$93,$ff
                       >            load_flag $ff
cddf : a9ff            >            lda #$ff             ;allow test to change
                       >
cde1 : 48              >            pha         ;use stack to load status
cde2 : a917            >            lda #$aa-$93     ;precharge accu
cde4 : 28              >            plp
                       >
cde5 : 93              >            db  $93          ;test nop integrity - fla
cde6 : ea              >            nop
cde7 : ea              >            nop
                       >            tst_a $aa-$93,$ff
cde8 : 08              >            php         ;save flags
cde9 : c917            >            cmp #$aa-$93     ;test result
                       >            trap_ne
cdeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cded : 68              >            pla         ;load status
cdee : 48              >            pha
                       >            cmp_flag $ff
cdef : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cdf1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdf3 : 28              >            plp         ;restore status
                       >
cdf4 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cdf6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdf8 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cdfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $a3,1
cdfc : a042            >            ldy #$42
cdfe : a203            >            ldx #4-1
ce00 : a3              >            db  $a3          ;test nop length
                       >        if 1 = 1
ce01 : ca              >            dex
ce02 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
ce03 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ce04 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$a3,0
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            load_flag 0
ce06 : a900            >            lda #0             ;allow test to change I
                       >
ce08 : 48              >            pha         ;use stack to load status
ce09 : a95c            >            lda #$ff-$a3     ;precharge accu
ce0b : 28              >            plp
                       >
ce0c : a3              >            db  $a3          ;test nop integrity - fla
ce0d : ea              >            nop
ce0e : ea              >            nop
                       >            tst_a $ff-$a3,0
ce0f : 08              >            php         ;save flags
ce10 : c95c            >            cmp #$ff-$a3     ;test result
                       >            trap_ne
ce12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce14 : 68              >            pla         ;load status
ce15 : 48              >            pha
                       >            cmp_flag 0
ce16 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ce18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce1a : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$a3,$ff
                       >            load_flag $ff
ce1b : a9ff            >            lda #$ff             ;allow test to change
                       >
ce1d : 48              >            pha         ;use stack to load status
ce1e : a907            >            lda #$aa-$a3     ;precharge accu
ce20 : 28              >            plp
                       >
ce21 : a3              >            db  $a3          ;test nop integrity - fla
ce22 : ea              >            nop
ce23 : ea              >            nop
                       >            tst_a $aa-$a3,$ff
ce24 : 08              >            php         ;save flags
ce25 : c907            >            cmp #$aa-$a3     ;test result
                       >            trap_ne
ce27 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce29 : 68              >            pla         ;load status
ce2a : 48              >            pha
                       >            cmp_flag $ff
ce2b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ce2d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce2f : 28              >            plp         ;restore status
                       >
ce30 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
ce32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce34 : e000            >            cpx #0
                       >            trap_ne         ;x changed
ce36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                nop_test $b3,1
ce38 : a042            >            ldy #$42
ce3a : a203            >            ldx #4-1
ce3c : b3              >            db  $b3          ;test nop length
                       >        if 1 = 1
ce3d : ca              >            dex
ce3e : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
ce3f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ce40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$b3,0
                       >            load_flag 0
ce42 : a900            >            lda #0             ;allow test to change I
                       >
ce44 : 48              >            pha         ;use stack to load status
ce45 : a94c            >            lda #$ff-$b3     ;precharge accu
ce47 : 28              >            plp
                       >
ce48 : b3              >            db  $b3          ;test nop integrity - fla
ce49 : ea              >            nop
ce4a : ea              >            nop
                       >            tst_a $ff-$b3,0
ce4b : 08              >            php         ;save flags
ce4c : c94c            >            cmp #$ff-$b3     ;test result
                       >            trap_ne
ce4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce50 : 68              >            pla         ;load status
ce51 : 48              >            pha
                       >            cmp_flag 0
ce52 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ce54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce56 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$b3,$ff
                       >            load_flag $ff
ce57 : a9ff            >            lda #$ff             ;allow test to change
                       >
ce59 : 48              >            pha         ;use stack to load status
ce5a : a9f7            >            lda #$aa-$b3     ;precharge accu
ce5c : 28              >            plp
                       >
ce5d : b3              >            db  $b3          ;test nop integrity - fla
ce5e : ea              >            nop
ce5f : ea              >            nop
                       >            tst_a $aa-$b3,$ff
ce60 : 08              >            php         ;save flags
ce61 : c9f7            >            cmp #$aa-$b3     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ce63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce65 : 68              >            pla         ;load status
ce66 : 48              >            pha
                       >            cmp_flag $ff
ce67 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ce69 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce6b : 28              >            plp         ;restore status
                       >
ce6c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
ce6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce70 : e000            >            cpx #0
                       >            trap_ne         ;x changed
ce72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $c3,1
ce74 : a042            >            ldy #$42
ce76 : a203            >            ldx #4-1
ce78 : c3              >            db  $c3          ;test nop length
                       >        if 1 = 1
ce79 : ca              >            dex
ce7a : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
ce7b : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ce7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$c3,0
                       >            load_flag 0
ce7e : a900            >            lda #0             ;allow test to change I
                       >
ce80 : 48              >            pha         ;use stack to load status
ce81 : a93c            >            lda #$ff-$c3     ;precharge accu
ce83 : 28              >            plp
                       >
ce84 : c3              >            db  $c3          ;test nop integrity - fla
ce85 : ea              >            nop
ce86 : ea              >            nop
                       >            tst_a $ff-$c3,0
ce87 : 08              >            php         ;save flags
ce88 : c93c            >            cmp #$ff-$c3     ;test result
                       >            trap_ne
ce8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce8c : 68              >            pla         ;load status
ce8d : 48              >            pha
                       >            cmp_flag 0
ce8e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >            trap_ne
ce90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce92 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$c3,$ff
                       >            load_flag $ff
ce93 : a9ff            >            lda #$ff             ;allow test to change
                       >
ce95 : 48              >            pha         ;use stack to load status
ce96 : a9e7            >            lda #$aa-$c3     ;precharge accu
ce98 : 28              >            plp
                       >
ce99 : c3              >            db  $c3          ;test nop integrity - fla
ce9a : ea              >            nop
ce9b : ea              >            nop
                       >            tst_a $aa-$c3,$ff
ce9c : 08              >            php         ;save flags
ce9d : c9e7            >            cmp #$aa-$c3     ;test result
                       >            trap_ne
ce9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cea1 : 68              >            pla         ;load status
cea2 : 48              >            pha
                       >            cmp_flag $ff
cea3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cea5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cea7 : 28              >            plp         ;restore status
                       >
cea8 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
ceaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ceac : e000            >            cpx #0
                       >            trap_ne         ;x changed
ceae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $d3,1
ceb0 : a042            >            ldy #$42
ceb2 : a203            >            ldx #4-1
ceb4 : d3              >            db  $d3          ;test nop length
                       >        if 1 = 1
ceb5 : ca              >            dex
ceb6 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
ceb7 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
ceb8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            set_a $ff-$d3,0
                       >            load_flag 0
ceba : a900            >            lda #0             ;allow test to change I
                       >
cebc : 48              >            pha         ;use stack to load status
cebd : a92c            >            lda #$ff-$d3     ;precharge accu
cebf : 28              >            plp
                       >
cec0 : d3              >            db  $d3          ;test nop integrity - fla
cec1 : ea              >            nop
cec2 : ea              >            nop
                       >            tst_a $ff-$d3,0
cec3 : 08              >            php         ;save flags
cec4 : c92c            >            cmp #$ff-$d3     ;test result
                       >            trap_ne
cec6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cec8 : 68              >            pla         ;load status
cec9 : 48              >            pha
                       >            cmp_flag 0
ceca : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cecc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cece : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$d3,$ff
                       >            load_flag $ff
cecf : a9ff            >            lda #$ff             ;allow test to change
                       >
ced1 : 48              >            pha         ;use stack to load status
ced2 : a9d7            >            lda #$aa-$d3     ;precharge accu
ced4 : 28              >            plp
                       >
ced5 : d3              >            db  $d3          ;test nop integrity - fla
ced6 : ea              >            nop
ced7 : ea              >            nop
                       >            tst_a $aa-$d3,$ff
ced8 : 08              >            php         ;save flags
ced9 : c9d7            >            cmp #$aa-$d3     ;test result
                       >            trap_ne
cedb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cedd : 68              >            pla         ;load status
cede : 48              >            pha
                       >            cmp_flag $ff
cedf : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cee1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cee3 : 28              >            plp         ;restore status
                       >
cee4 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cee6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cee8 : e000            >            cpx #0
                       >            trap_ne         ;x changed
ceea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                                nop_test $e3,1
ceec : a042            >            ldy #$42
ceee : a203            >            ldx #4-1
cef0 : e3              >            db  $e3          ;test nop length
                       >        if 1 = 1
cef1 : ca              >            dex
cef2 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cef3 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cef4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$e3,0
                       >            load_flag 0
cef6 : a900            >            lda #0             ;allow test to change I
                       >
cef8 : 48              >            pha         ;use stack to load status
cef9 : a91c            >            lda #$ff-$e3     ;precharge accu
cefb : 28              >            plp
                       >
cefc : e3              >            db  $e3          ;test nop integrity - fla
cefd : ea              >            nop
cefe : ea              >            nop
                       >            tst_a $ff-$e3,0
ceff : 08              >            php         ;save flags
cf00 : c91c            >            cmp #$ff-$e3     ;test result
                       >            trap_ne
cf02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf04 : 68              >            pla         ;load status
cf05 : 48              >            pha
                       >            cmp_flag 0
cf06 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cf08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf0a : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$e3,$ff
                       >            load_flag $ff
cf0b : a9ff            >            lda #$ff             ;allow test to change
                       >
cf0d : 48              >            pha         ;use stack to load status
cf0e : a9c7            >            lda #$aa-$e3     ;precharge accu
cf10 : 28              >            plp
                       >
cf11 : e3              >            db  $e3          ;test nop integrity - fla
cf12 : ea              >            nop
cf13 : ea              >            nop
                       >            tst_a $aa-$e3,$ff
cf14 : 08              >            php         ;save flags
cf15 : c9c7            >            cmp #$aa-$e3     ;test result
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
cf17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf19 : 68              >            pla         ;load status
cf1a : 48              >            pha
                       >            cmp_flag $ff
cf1b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cf1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf1f : 28              >            plp         ;restore status
                       >
cf20 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cf22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf24 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cf26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $f3,1
cf28 : a042            >            ldy #$42
cf2a : a203            >            ldx #4-1
cf2c : f3              >            db  $f3          ;test nop length
                       >        if 1 = 1
cf2d : ca              >            dex
cf2e : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cf2f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cf30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$f3,0
                       >            load_flag 0
cf32 : a900            >            lda #0             ;allow test to change I
                       >
cf34 : 48              >            pha         ;use stack to load status
cf35 : a90c            >            lda #$ff-$f3     ;precharge accu
cf37 : 28              >            plp
                       >
cf38 : f3              >            db  $f3          ;test nop integrity - fla
cf39 : ea              >            nop
cf3a : ea              >            nop
                       >            tst_a $ff-$f3,0
cf3b : 08              >            php         ;save flags
cf3c : c90c            >            cmp #$ff-$f3     ;test result
                       >            trap_ne
cf3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf40 : 68              >            pla         ;load status
cf41 : 48              >            pha
                       >            cmp_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cf42 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cf44 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf46 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$f3,$ff
                       >            load_flag $ff
cf47 : a9ff            >            lda #$ff             ;allow test to change
                       >
cf49 : 48              >            pha         ;use stack to load status
cf4a : a9b7            >            lda #$aa-$f3     ;precharge accu
cf4c : 28              >            plp
                       >
cf4d : f3              >            db  $f3          ;test nop integrity - fla
cf4e : ea              >            nop
cf4f : ea              >            nop
                       >            tst_a $aa-$f3,$ff
cf50 : 08              >            php         ;save flags
cf51 : c9b7            >            cmp #$aa-$f3     ;test result
                       >            trap_ne
cf53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf55 : 68              >            pla         ;load status
cf56 : 48              >            pha
                       >            cmp_flag $ff
cf57 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cf59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf5b : 28              >            plp         ;restore status
                       >
cf5c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cf5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf60 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cf62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $0b,1
cf64 : a042            >            ldy #$42
cf66 : a203            >            ldx #4-1
cf68 : 0b              >            db  $0b          ;test nop length
                       >        if 1 = 1
cf69 : ca              >            dex
cf6a : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cf6b : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cf6c : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >            set_a $ff-$0b,0
                       >            load_flag 0
cf6e : a900            >            lda #0             ;allow test to change I
                       >
cf70 : 48              >            pha         ;use stack to load status
cf71 : a9f4            >            lda #$ff-$0b     ;precharge accu
cf73 : 28              >            plp
                       >
cf74 : 0b              >            db  $0b          ;test nop integrity - fla
cf75 : ea              >            nop
cf76 : ea              >            nop
                       >            tst_a $ff-$0b,0
cf77 : 08              >            php         ;save flags
cf78 : c9f4            >            cmp #$ff-$0b     ;test result
                       >            trap_ne
cf7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf7c : 68              >            pla         ;load status
cf7d : 48              >            pha
                       >            cmp_flag 0
cf7e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cf80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf82 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$0b,$ff
                       >            load_flag $ff
cf83 : a9ff            >            lda #$ff             ;allow test to change
                       >
cf85 : 48              >            pha         ;use stack to load status
cf86 : a99f            >            lda #$aa-$0b     ;precharge accu
cf88 : 28              >            plp
                       >
cf89 : 0b              >            db  $0b          ;test nop integrity - fla
cf8a : ea              >            nop
cf8b : ea              >            nop
                       >            tst_a $aa-$0b,$ff
cf8c : 08              >            php         ;save flags
cf8d : c99f            >            cmp #$aa-$0b     ;test result
                       >            trap_ne
cf8f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf91 : 68              >            pla         ;load status
cf92 : 48              >            pha
                       >            cmp_flag $ff
cf93 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cf95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf97 : 28              >            plp         ;restore status
                       >
cf98 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cf9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf9c : e000            >            cpx #0
                       >            trap_ne         ;x changed
cf9e : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                        
                                nop_test $1b,1
cfa0 : a042            >            ldy #$42
cfa2 : a203            >            ldx #4-1
cfa4 : 1b              >            db  $1b          ;test nop length
                       >        if 1 = 1
cfa5 : ca              >            dex
cfa6 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cfa7 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cfa8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$1b,0
                       >            load_flag 0
cfaa : a900            >            lda #0             ;allow test to change I
                       >
cfac : 48              >            pha         ;use stack to load status
cfad : a9e4            >            lda #$ff-$1b     ;precharge accu
cfaf : 28              >            plp
                       >
cfb0 : 1b              >            db  $1b          ;test nop integrity - fla
cfb1 : ea              >            nop
cfb2 : ea              >            nop
                       >            tst_a $ff-$1b,0
cfb3 : 08              >            php         ;save flags
cfb4 : c9e4            >            cmp #$ff-$1b     ;test result
                       >            trap_ne
cfb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfb8 : 68              >            pla         ;load status
cfb9 : 48              >            pha
                       >            cmp_flag 0
cfba : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cfbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfbe : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$1b,$ff
                       >            load_flag $ff
cfbf : a9ff            >            lda #$ff             ;allow test to change
                       >
cfc1 : 48              >            pha         ;use stack to load status
cfc2 : a98f            >            lda #$aa-$1b     ;precharge accu
cfc4 : 28              >            plp
                       >
cfc5 : 1b              >            db  $1b          ;test nop integrity - fla
cfc6 : ea              >            nop
cfc7 : ea              >            nop
                       >            tst_a $aa-$1b,$ff
cfc8 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cfc9 : c98f            >            cmp #$aa-$1b     ;test result
                       >            trap_ne
cfcb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfcd : 68              >            pla         ;load status
cfce : 48              >            pha
                       >            cmp_flag $ff
cfcf : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cfd1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfd3 : 28              >            plp         ;restore status
                       >
cfd4 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
cfd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfd8 : e000            >            cpx #0
                       >            trap_ne         ;x changed
cfda : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $2b,1
cfdc : a042            >            ldy #$42
cfde : a203            >            ldx #4-1
cfe0 : 2b              >            db  $2b          ;test nop length
                       >        if 1 = 1
cfe1 : ca              >            dex
cfe2 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
cfe3 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
cfe4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$2b,0
                       >            load_flag 0
cfe6 : a900            >            lda #0             ;allow test to change I
                       >
cfe8 : 48              >            pha         ;use stack to load status
cfe9 : a9d4            >            lda #$ff-$2b     ;precharge accu
cfeb : 28              >            plp
                       >
cfec : 2b              >            db  $2b          ;test nop integrity - fla
cfed : ea              >            nop
cfee : ea              >            nop
                       >            tst_a $ff-$2b,0
cfef : 08              >            php         ;save flags
cff0 : c9d4            >            cmp #$ff-$2b     ;test result
                       >            trap_ne
cff2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cff4 : 68              >            pla         ;load status
cff5 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            cmp_flag 0
cff6 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cff8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cffa : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$2b,$ff
                       >            load_flag $ff
cffb : a9ff            >            lda #$ff             ;allow test to change
                       >
cffd : 48              >            pha         ;use stack to load status
cffe : a97f            >            lda #$aa-$2b     ;precharge accu
d000 : 28              >            plp
                       >
d001 : 2b              >            db  $2b          ;test nop integrity - fla
d002 : ea              >            nop
d003 : ea              >            nop
                       >            tst_a $aa-$2b,$ff
d004 : 08              >            php         ;save flags
d005 : c97f            >            cmp #$aa-$2b     ;test result
                       >            trap_ne
d007 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d009 : 68              >            pla         ;load status
d00a : 48              >            pha
                       >            cmp_flag $ff
d00b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d00d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d00f : 28              >            plp         ;restore status
                       >
d010 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d012 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d014 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d016 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $3b,1
d018 : a042            >            ldy #$42
d01a : a203            >            ldx #4-1
d01c : 3b              >            db  $3b          ;test nop length
                       >        if 1 = 1
d01d : ca              >            dex
d01e : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d01f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d020 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$3b,0
                       >            load_flag 0
d022 : a900            >            lda #0             ;allow test to change I
                       >
d024 : 48              >            pha         ;use stack to load status
d025 : a9c4            >            lda #$ff-$3b     ;precharge accu
d027 : 28              >            plp
                       >
d028 : 3b              >            db  $3b          ;test nop integrity - fla
d029 : ea              >            nop
d02a : ea              >            nop
                       >            tst_a $ff-$3b,0
d02b : 08              >            php         ;save flags
d02c : c9c4            >            cmp #$ff-$3b     ;test result
                       >            trap_ne
d02e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d030 : 68              >            pla         ;load status
d031 : 48              >            pha
                       >            cmp_flag 0
d032 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d034 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d036 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$3b,$ff
                       >            load_flag $ff
d037 : a9ff            >            lda #$ff             ;allow test to change
                       >
d039 : 48              >            pha         ;use stack to load status
d03a : a96f            >            lda #$aa-$3b     ;precharge accu
d03c : 28              >            plp
                       >
d03d : 3b              >            db  $3b          ;test nop integrity - fla
d03e : ea              >            nop
d03f : ea              >            nop
                       >            tst_a $aa-$3b,$ff
d040 : 08              >            php         ;save flags
d041 : c96f            >            cmp #$aa-$3b     ;test result
                       >            trap_ne
d043 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d045 : 68              >            pla         ;load status
d046 : 48              >            pha
                       >            cmp_flag $ff
d047 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d049 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d04b : 28              >            plp         ;restore status
                       >
d04c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d04e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d050 : e000            >            cpx #0
                       >            trap_ne         ;x changed
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d052 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $4b,1
d054 : a042            >            ldy #$42
d056 : a203            >            ldx #4-1
d058 : 4b              >            db  $4b          ;test nop length
                       >        if 1 = 1
d059 : ca              >            dex
d05a : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d05b : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d05c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$4b,0
                       >            load_flag 0
d05e : a900            >            lda #0             ;allow test to change I
                       >
d060 : 48              >            pha         ;use stack to load status
d061 : a9b4            >            lda #$ff-$4b     ;precharge accu
d063 : 28              >            plp
                       >
d064 : 4b              >            db  $4b          ;test nop integrity - fla
d065 : ea              >            nop
d066 : ea              >            nop
                       >            tst_a $ff-$4b,0
d067 : 08              >            php         ;save flags
d068 : c9b4            >            cmp #$ff-$4b     ;test result
                       >            trap_ne
d06a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d06c : 68              >            pla         ;load status
d06d : 48              >            pha
                       >            cmp_flag 0
d06e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d070 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d072 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$4b,$ff
                       >            load_flag $ff
d073 : a9ff            >            lda #$ff             ;allow test to change
                       >
d075 : 48              >            pha         ;use stack to load status
d076 : a95f            >            lda #$aa-$4b     ;precharge accu
d078 : 28              >            plp
                       >
d079 : 4b              >            db  $4b          ;test nop integrity - fla
d07a : ea              >            nop
d07b : ea              >            nop
                       >            tst_a $aa-$4b,$ff
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d07c : 08              >            php         ;save flags
d07d : c95f            >            cmp #$aa-$4b     ;test result
                       >            trap_ne
d07f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d081 : 68              >            pla         ;load status
d082 : 48              >            pha
                       >            cmp_flag $ff
d083 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d085 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d087 : 28              >            plp         ;restore status
                       >
d088 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d08a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d08c : e000            >            cpx #0
                       >            trap_ne         ;x changed
d08e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $5b,1
d090 : a042            >            ldy #$42
d092 : a203            >            ldx #4-1
d094 : 5b              >            db  $5b          ;test nop length
                       >        if 1 = 1
d095 : ca              >            dex
d096 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d097 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d098 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$5b,0
                       >            load_flag 0
d09a : a900            >            lda #0             ;allow test to change I
                       >
d09c : 48              >            pha         ;use stack to load status
d09d : a9a4            >            lda #$ff-$5b     ;precharge accu
d09f : 28              >            plp
                       >
d0a0 : 5b              >            db  $5b          ;test nop integrity - fla
d0a1 : ea              >            nop
d0a2 : ea              >            nop
                       >            tst_a $ff-$5b,0
d0a3 : 08              >            php         ;save flags
d0a4 : c9a4            >            cmp #$ff-$5b     ;test result
                       >            trap_ne
d0a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0a8 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d0a9 : 48              >            pha
                       >            cmp_flag 0
d0aa : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d0ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0ae : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$5b,$ff
                       >            load_flag $ff
d0af : a9ff            >            lda #$ff             ;allow test to change
                       >
d0b1 : 48              >            pha         ;use stack to load status
d0b2 : a94f            >            lda #$aa-$5b     ;precharge accu
d0b4 : 28              >            plp
                       >
d0b5 : 5b              >            db  $5b          ;test nop integrity - fla
d0b6 : ea              >            nop
d0b7 : ea              >            nop
                       >            tst_a $aa-$5b,$ff
d0b8 : 08              >            php         ;save flags
d0b9 : c94f            >            cmp #$aa-$5b     ;test result
                       >            trap_ne
d0bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0bd : 68              >            pla         ;load status
d0be : 48              >            pha
                       >            cmp_flag $ff
d0bf : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d0c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0c3 : 28              >            plp         ;restore status
                       >
d0c4 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d0c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0c8 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d0ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $6b,1
d0cc : a042            >            ldy #$42
d0ce : a203            >            ldx #4-1
d0d0 : 6b              >            db  $6b          ;test nop length
                       >        if 1 = 1
d0d1 : ca              >            dex
d0d2 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d0d3 : ca              >            dex
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne         ;wrong number of bytes
d0d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$6b,0
                       >            load_flag 0
d0d6 : a900            >            lda #0             ;allow test to change I
                       >
d0d8 : 48              >            pha         ;use stack to load status
d0d9 : a994            >            lda #$ff-$6b     ;precharge accu
d0db : 28              >            plp
                       >
d0dc : 6b              >            db  $6b          ;test nop integrity - fla
d0dd : ea              >            nop
d0de : ea              >            nop
                       >            tst_a $ff-$6b,0
d0df : 08              >            php         ;save flags
d0e0 : c994            >            cmp #$ff-$6b     ;test result
                       >            trap_ne
d0e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0e4 : 68              >            pla         ;load status
d0e5 : 48              >            pha
                       >            cmp_flag 0
d0e6 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d0e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0ea : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$6b,$ff
                       >            load_flag $ff
d0eb : a9ff            >            lda #$ff             ;allow test to change
                       >
d0ed : 48              >            pha         ;use stack to load status
d0ee : a93f            >            lda #$aa-$6b     ;precharge accu
d0f0 : 28              >            plp
                       >
d0f1 : 6b              >            db  $6b          ;test nop integrity - fla
d0f2 : ea              >            nop
d0f3 : ea              >            nop
                       >            tst_a $aa-$6b,$ff
d0f4 : 08              >            php         ;save flags
d0f5 : c93f            >            cmp #$aa-$6b     ;test result
                       >            trap_ne
d0f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0f9 : 68              >            pla         ;load status
d0fa : 48              >            pha
                       >            cmp_flag $ff
d0fb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d0fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0ff : 28              >            plp         ;restore status
                       >
d100 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d102 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d104 : e000            >            cpx #0
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne         ;x changed
d106 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $7b,1
d108 : a042            >            ldy #$42
d10a : a203            >            ldx #4-1
d10c : 7b              >            db  $7b          ;test nop length
                       >        if 1 = 1
d10d : ca              >            dex
d10e : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d10f : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d110 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$7b,0
                       >            load_flag 0
d112 : a900            >            lda #0             ;allow test to change I
                       >
d114 : 48              >            pha         ;use stack to load status
d115 : a984            >            lda #$ff-$7b     ;precharge accu
d117 : 28              >            plp
                       >
d118 : 7b              >            db  $7b          ;test nop integrity - fla
d119 : ea              >            nop
d11a : ea              >            nop
                       >            tst_a $ff-$7b,0
d11b : 08              >            php         ;save flags
d11c : c984            >            cmp #$ff-$7b     ;test result
                       >            trap_ne
d11e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d120 : 68              >            pla         ;load status
d121 : 48              >            pha
                       >            cmp_flag 0
d122 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d124 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d126 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$7b,$ff
                       >            load_flag $ff
d127 : a9ff            >            lda #$ff             ;allow test to change
                       >
d129 : 48              >            pha         ;use stack to load status
d12a : a92f            >            lda #$aa-$7b     ;precharge accu
d12c : 28              >            plp
                       >
d12d : 7b              >            db  $7b          ;test nop integrity - fla
d12e : ea              >            nop
d12f : ea              >            nop
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            tst_a $aa-$7b,$ff
d130 : 08              >            php         ;save flags
d131 : c92f            >            cmp #$aa-$7b     ;test result
                       >            trap_ne
d133 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d135 : 68              >            pla         ;load status
d136 : 48              >            pha
                       >            cmp_flag $ff
d137 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d139 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d13b : 28              >            plp         ;restore status
                       >
d13c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d13e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d140 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d142 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $8b,1
d144 : a042            >            ldy #$42
d146 : a203            >            ldx #4-1
d148 : 8b              >            db  $8b          ;test nop length
                       >        if 1 = 1
d149 : ca              >            dex
d14a : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d14b : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d14c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$8b,0
                       >            load_flag 0
d14e : a900            >            lda #0             ;allow test to change I
                       >
d150 : 48              >            pha         ;use stack to load status
d151 : a974            >            lda #$ff-$8b     ;precharge accu
d153 : 28              >            plp
                       >
d154 : 8b              >            db  $8b          ;test nop integrity - fla
d155 : ea              >            nop
d156 : ea              >            nop
                       >            tst_a $ff-$8b,0
d157 : 08              >            php         ;save flags
d158 : c974            >            cmp #$ff-$8b     ;test result
                       >            trap_ne
d15a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d15c : 68              >            pla         ;load status
d15d : 48              >            pha
                       >            cmp_flag 0
d15e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d160 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d162 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$8b,$ff
                       >            load_flag $ff
d163 : a9ff            >            lda #$ff             ;allow test to change
                       >
d165 : 48              >            pha         ;use stack to load status
d166 : a91f            >            lda #$aa-$8b     ;precharge accu
d168 : 28              >            plp
                       >
d169 : 8b              >            db  $8b          ;test nop integrity - fla
d16a : ea              >            nop
d16b : ea              >            nop
                       >            tst_a $aa-$8b,$ff
d16c : 08              >            php         ;save flags
d16d : c91f            >            cmp #$aa-$8b     ;test result
                       >            trap_ne
d16f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d171 : 68              >            pla         ;load status
d172 : 48              >            pha
                       >            cmp_flag $ff
d173 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d175 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d177 : 28              >            plp         ;restore status
                       >
d178 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d17a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d17c : e000            >            cpx #0
                       >            trap_ne         ;x changed
d17e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $9b,1
d180 : a042            >            ldy #$42
d182 : a203            >            ldx #4-1
d184 : 9b              >            db  $9b          ;test nop length
                       >        if 1 = 1
d185 : ca              >            dex
d186 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d187 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d188 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$9b,0
                       >            load_flag 0
d18a : a900            >            lda #0             ;allow test to change I
                       >
d18c : 48              >            pha         ;use stack to load status
d18d : a964            >            lda #$ff-$9b     ;precharge accu
d18f : 28              >            plp
                       >
d190 : 9b              >            db  $9b          ;test nop integrity - fla
d191 : ea              >            nop
d192 : ea              >            nop
                       >            tst_a $ff-$9b,0
d193 : 08              >            php         ;save flags
d194 : c964            >            cmp #$ff-$9b     ;test result
                       >            trap_ne
d196 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d198 : 68              >            pla         ;load status
d199 : 48              >            pha
                       >            cmp_flag 0
d19a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d19c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d19e : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$9b,$ff
                       >            load_flag $ff
d19f : a9ff            >            lda #$ff             ;allow test to change
                       >
d1a1 : 48              >            pha         ;use stack to load status
d1a2 : a90f            >            lda #$aa-$9b     ;precharge accu
d1a4 : 28              >            plp
                       >
d1a5 : 9b              >            db  $9b          ;test nop integrity - fla
d1a6 : ea              >            nop
d1a7 : ea              >            nop
                       >            tst_a $aa-$9b,$ff
d1a8 : 08              >            php         ;save flags
d1a9 : c90f            >            cmp #$aa-$9b     ;test result
                       >            trap_ne
d1ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1ad : 68              >            pla         ;load status
d1ae : 48              >            pha
                       >            cmp_flag $ff
d1af : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d1b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1b3 : 28              >            plp         ;restore status
                       >
d1b4 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d1b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d1b8 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d1ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $ab,1
d1bc : a042            >            ldy #$42
d1be : a203            >            ldx #4-1
d1c0 : ab              >            db  $ab          ;test nop length
                       >        if 1 = 1
d1c1 : ca              >            dex
d1c2 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d1c3 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d1c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$ab,0
                       >            load_flag 0
d1c6 : a900            >            lda #0             ;allow test to change I
                       >
d1c8 : 48              >            pha         ;use stack to load status
d1c9 : a954            >            lda #$ff-$ab     ;precharge accu
d1cb : 28              >            plp
                       >
d1cc : ab              >            db  $ab          ;test nop integrity - fla
d1cd : ea              >            nop
d1ce : ea              >            nop
                       >            tst_a $ff-$ab,0
d1cf : 08              >            php         ;save flags
d1d0 : c954            >            cmp #$ff-$ab     ;test result
                       >            trap_ne
d1d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1d4 : 68              >            pla         ;load status
d1d5 : 48              >            pha
                       >            cmp_flag 0
d1d6 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d1d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1da : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$ab,$ff
                       >            load_flag $ff
d1db : a9ff            >            lda #$ff             ;allow test to change
                       >
d1dd : 48              >            pha         ;use stack to load status
d1de : a9ff            >            lda #$aa-$ab     ;precharge accu
d1e0 : 28              >            plp
                       >
d1e1 : ab              >            db  $ab          ;test nop integrity - fla
d1e2 : ea              >            nop
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d1e3 : ea              >            nop
                       >            tst_a $aa-$ab,$ff
d1e4 : 08              >            php         ;save flags
d1e5 : c9ff            >            cmp #$aa-$ab     ;test result
                       >            trap_ne
d1e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1e9 : 68              >            pla         ;load status
d1ea : 48              >            pha
                       >            cmp_flag $ff
d1eb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d1ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1ef : 28              >            plp         ;restore status
                       >
d1f0 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d1f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1f4 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d1f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $bb,1
d1f8 : a042            >            ldy #$42
d1fa : a203            >            ldx #4-1
d1fc : bb              >            db  $bb          ;test nop length
                       >        if 1 = 1
d1fd : ca              >            dex
d1fe : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d1ff : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d200 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$bb,0
                       >            load_flag 0
d202 : a900            >            lda #0             ;allow test to change I
                       >
d204 : 48              >            pha         ;use stack to load status
d205 : a944            >            lda #$ff-$bb     ;precharge accu
d207 : 28              >            plp
                       >
d208 : bb              >            db  $bb          ;test nop integrity - fla
d209 : ea              >            nop
d20a : ea              >            nop
                       >            tst_a $ff-$bb,0
d20b : 08              >            php         ;save flags
d20c : c944            >            cmp #$ff-$bb     ;test result
                       >            trap_ne
d20e : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
d210 : 68              >            pla         ;load status
d211 : 48              >            pha
                       >            cmp_flag 0
d212 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d214 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d216 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$bb,$ff
                       >            load_flag $ff
d217 : a9ff            >            lda #$ff             ;allow test to change
                       >
d219 : 48              >            pha         ;use stack to load status
d21a : a9ef            >            lda #$aa-$bb     ;precharge accu
d21c : 28              >            plp
                       >
d21d : bb              >            db  $bb          ;test nop integrity - fla
d21e : ea              >            nop
d21f : ea              >            nop
                       >            tst_a $aa-$bb,$ff
d220 : 08              >            php         ;save flags
d221 : c9ef            >            cmp #$aa-$bb     ;test result
                       >            trap_ne
d223 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d225 : 68              >            pla         ;load status
d226 : 48              >            pha
                       >            cmp_flag $ff
d227 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d229 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d22b : 28              >            plp         ;restore status
                       >
d22c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d22e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d230 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d232 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $eb,1
d234 : a042            >            ldy #$42
d236 : a203            >            ldx #4-1
d238 : eb              >            db  $eb          ;test nop length
                       >        if 1 = 1
d239 : ca              >            dex
d23a : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        endif
d23b : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d23c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$eb,0
                       >            load_flag 0
d23e : a900            >            lda #0             ;allow test to change I
                       >
d240 : 48              >            pha         ;use stack to load status
d241 : a914            >            lda #$ff-$eb     ;precharge accu
d243 : 28              >            plp
                       >
d244 : eb              >            db  $eb          ;test nop integrity - fla
d245 : ea              >            nop
d246 : ea              >            nop
                       >            tst_a $ff-$eb,0
d247 : 08              >            php         ;save flags
d248 : c914            >            cmp #$ff-$eb     ;test result
                       >            trap_ne
d24a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d24c : 68              >            pla         ;load status
d24d : 48              >            pha
                       >            cmp_flag 0
d24e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d250 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d252 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$eb,$ff
                       >            load_flag $ff
d253 : a9ff            >            lda #$ff             ;allow test to change
                       >
d255 : 48              >            pha         ;use stack to load status
d256 : a9bf            >            lda #$aa-$eb     ;precharge accu
d258 : 28              >            plp
                       >
d259 : eb              >            db  $eb          ;test nop integrity - fla
d25a : ea              >            nop
d25b : ea              >            nop
                       >            tst_a $aa-$eb,$ff
d25c : 08              >            php         ;save flags
d25d : c9bf            >            cmp #$aa-$eb     ;test result
                       >            trap_ne
d25f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d261 : 68              >            pla         ;load status
d262 : 48              >            pha
                       >            cmp_flag $ff
d263 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d265 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d267 : 28              >            plp         ;restore status
                       >
d268 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d26a : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
d26c : e000            >            cpx #0
                       >            trap_ne         ;x changed
d26e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $fb,1
d270 : a042            >            ldy #$42
d272 : a203            >            ldx #4-1
d274 : fb              >            db  $fb          ;test nop length
                       >        if 1 = 1
d275 : ca              >            dex
d276 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d277 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d278 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$fb,0
                       >            load_flag 0
d27a : a900            >            lda #0             ;allow test to change I
                       >
d27c : 48              >            pha         ;use stack to load status
d27d : a904            >            lda #$ff-$fb     ;precharge accu
d27f : 28              >            plp
                       >
d280 : fb              >            db  $fb          ;test nop integrity - fla
d281 : ea              >            nop
d282 : ea              >            nop
                       >            tst_a $ff-$fb,0
d283 : 08              >            php         ;save flags
d284 : c904            >            cmp #$ff-$fb     ;test result
                       >            trap_ne
d286 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d288 : 68              >            pla         ;load status
d289 : 48              >            pha
                       >            cmp_flag 0
d28a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d28c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d28e : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$fb,$ff
                       >            load_flag $ff
d28f : a9ff            >            lda #$ff             ;allow test to change
                       >
d291 : 48              >            pha         ;use stack to load status
d292 : a9af            >            lda #$aa-$fb     ;precharge accu
d294 : 28              >            plp
                       >
d295 : fb              >            db  $fb          ;test nop integrity - fla
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d296 : ea              >            nop
d297 : ea              >            nop
                       >            tst_a $aa-$fb,$ff
d298 : 08              >            php         ;save flags
d299 : c9af            >            cmp #$aa-$fb     ;test result
                       >            trap_ne
d29b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d29d : 68              >            pla         ;load status
d29e : 48              >            pha
                       >            cmp_flag $ff
d29f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d2a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2a3 : 28              >            plp         ;restore status
                       >
d2a4 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d2a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2a8 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d2aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                            if rkwl_wdc_op = 0      ;NOPs not available on Roc
                                nop_test $07,1
                                nop_test $17,1
                                nop_test $27,1
                                nop_test $37,1
                                nop_test $47,1
                                nop_test $57,1
                                nop_test $67,1
                                nop_test $77,1
                                nop_test $87,1
                                nop_test $97,1
                                nop_test $a7,1
                                nop_test $b7,1
                                nop_test $c7,1
                                nop_test $d7,1
                                nop_test $e7,1
                                nop_test $f7,1
                                nop_test $0f,1
                                nop_test $1f,1
                                nop_test $2f,1
                                nop_test $3f,1
                                nop_test $4f,1
                                nop_test $5f,1
                                nop_test $6f,1
                                nop_test $7f,1
                                nop_test $8f,1
                                nop_test $9f,1
                                nop_test $af,1
                                nop_test $bf,1
                                nop_test $cf,1
                                nop_test $df,1
                                nop_test $ef,1
                                nop_test $ff,1
                            endif
                            if  wdc_op = 0          ;NOPs not available on WDC
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                nop_test $cb,1
d2ac : a042            >            ldy #$42
d2ae : a203            >            ldx #4-1
d2b0 : cb              >            db  $cb          ;test nop length
                       >        if 1 = 1
d2b1 : ca              >            dex
d2b2 : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d2b3 : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d2b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$cb,0
                       >            load_flag 0
d2b6 : a900            >            lda #0             ;allow test to change I
                       >
d2b8 : 48              >            pha         ;use stack to load status
d2b9 : a934            >            lda #$ff-$cb     ;precharge accu
d2bb : 28              >            plp
                       >
d2bc : cb              >            db  $cb          ;test nop integrity - fla
d2bd : ea              >            nop
d2be : ea              >            nop
                       >            tst_a $ff-$cb,0
d2bf : 08              >            php         ;save flags
d2c0 : c934            >            cmp #$ff-$cb     ;test result
                       >            trap_ne
d2c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2c4 : 68              >            pla         ;load status
d2c5 : 48              >            pha
                       >            cmp_flag 0
d2c6 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d2c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2ca : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$cb,$ff
                       >            load_flag $ff
d2cb : a9ff            >            lda #$ff             ;allow test to change
                       >
d2cd : 48              >            pha         ;use stack to load status
d2ce : a9df            >            lda #$aa-$cb     ;precharge accu
d2d0 : 28              >            plp
                       >
d2d1 : cb              >            db  $cb          ;test nop integrity - fla
d2d2 : ea              >            nop
d2d3 : ea              >            nop
                       >            tst_a $aa-$cb,$ff
d2d4 : 08              >            php         ;save flags
d2d5 : c9df            >            cmp #$aa-$cb     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d2d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2d9 : 68              >            pla         ;load status
d2da : 48              >            pha
                       >            cmp_flag $ff
d2db : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d2dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2df : 28              >            plp         ;restore status
                       >
d2e0 : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d2e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2e4 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d2e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                nop_test $db,1
d2e8 : a042            >            ldy #$42
d2ea : a203            >            ldx #4-1
d2ec : db              >            db  $db          ;test nop length
                       >        if 1 = 1
d2ed : ca              >            dex
d2ee : ca              >            dex
                       >        endif
                       >        if 1 = 2
                       >            iny
                       >            dex
                       >        endif
                       >        if 1 = 3
                       >            iny
                       >            iny
                       >        endif
d2ef : ca              >            dex
                       >            trap_ne         ;wrong number of bytes
d2f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                       >            set_a $ff-$db,0
                       >            load_flag 0
d2f2 : a900            >            lda #0             ;allow test to change I
                       >
d2f4 : 48              >            pha         ;use stack to load status
d2f5 : a924            >            lda #$ff-$db     ;precharge accu
d2f7 : 28              >            plp
                       >
d2f8 : db              >            db  $db          ;test nop integrity - fla
d2f9 : ea              >            nop
d2fa : ea              >            nop
                       >            tst_a $ff-$db,0
d2fb : 08              >            php         ;save flags
d2fc : c924            >            cmp #$ff-$db     ;test result
                       >            trap_ne
d2fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d300 : 68              >            pla         ;load status
d301 : 48              >            pha
                       >            cmp_flag 0
d302 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >            trap_ne
d304 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d306 : 28              >            plp         ;restore status
                       >
                       >            set_a $aa-$db,$ff
                       >            load_flag $ff
d307 : a9ff            >            lda #$ff             ;allow test to change
                       >
d309 : 48              >            pha         ;use stack to load status
d30a : a9cf            >            lda #$aa-$db     ;precharge accu
d30c : 28              >            plp
                       >
d30d : db              >            db  $db          ;test nop integrity - fla
d30e : ea              >            nop
d30f : ea              >            nop
                       >            tst_a $aa-$db,$ff
d310 : 08              >            php         ;save flags
d311 : c9cf            >            cmp #$aa-$db     ;test result
                       >            trap_ne
d313 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d315 : 68              >            pla         ;load status
d316 : 48              >            pha
                       >            cmp_flag $ff
d317 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d319 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d31b : 28              >            plp         ;restore status
                       >
d31c : c042            >            cpy #$42
                       >            trap_ne         ;y changed
d31e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d320 : e000            >            cpx #0
                       >            trap_ne         ;x changed
d322 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                            endif
                                next_test
d324 : ad0002          >            lda test_case   ;previous test
d327 : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d329 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
d32b : a909            >            lda #test_num   ;*** next tests' number
d32d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                            endif
                        
                        ; jump indirect (test page cross bug is fixed)
d330 : a203                     ldx #3          ;prepare table
d332 : bd9ce3           ji1     lda ji_adr,x
d335 : 9dfd02                   sta ji_tab,x
d338 : ca                       dex
d339 : 10f7                     bpl ji1
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d33b : a9e6                     lda #hi(ji_px) ;high address if page cross bug
d33d : 8d0302                   sta pg_x
                                set_stat 0
                       >            load_flag 0
d340 : a900            >            lda #0             ;allow test to change I
                       >
d342 : 48              >            pha         ;use stack to load status
d343 : 28              >            plp
                        
d344 : a949                     lda #'I'
d346 : a24e                     ldx #'N'
d348 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
d34a : 6cfd02                   jmp (ji_tab)
d34d : ea                       nop
                                trap_ne         ;runover protection
d34e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
d350 : 88                       dey
d351 : 88                       dey
d352 : 08               ji_ret  php             ;either SP or Y count will fai
d353 : 88                       dey
d354 : 88                       dey
d355 : 88                       dey
d356 : 28                       plp
                                trap_eq         ;returned flags OK?
d357 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
d359 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
d35b : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
d35d : 50fe            >        bvc *           ;failed overflow clear
                        
d35f : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
d361 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d363 : e04f                     cpx #('N'+1)
                                trap_ne
d365 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d367 : c03e                     cpy #('D'-6)
                                trap_ne
d369 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d36b : ba                       tsx             ;SP check
d36c : e0ff                     cpx #$ff
                                trap_ne
d36e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d370 : ad0002          >            lda test_case   ;previous test
d373 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d375 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
d377 : a90a            >            lda #test_num   ;*** next tests' number
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d379 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; jump indexed indirect
d37c : a20b                     ldx #11         ;prepare table
d37e : bdd8e3           jxi1    lda jxi_adr,x
d381 : 9df902                   sta jxi_tab,x
d384 : ca                       dex
d385 : 10f7                     bpl jxi1
d387 : a9e5                     lda #hi(jxi_px) ;high address if page cross bu
d389 : 8d0302                   sta pg_x
                                set_stat 0
                       >            load_flag 0
d38c : a900            >            lda #0             ;allow test to change I
                       >
d38e : 48              >            pha         ;use stack to load status
d38f : 28              >            plp
                        
d390 : a958                     lda #'X'
d392 : a204                     ldx #4
d394 : a049                     ldy #'I'        ;N=0, V=0, Z=0, C=0
d396 : 7cf902                   jmp (jxi_tab,x)
d399 : ea                       nop
                                trap_ne         ;runover protection
d39a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
d39c : 88                       dey
d39d : 88                       dey
d39e : 08               jxi_ret php             ;either SP or Y count will fai
d39f : 88                       dey
d3a0 : 88                       dey
d3a1 : 88                       dey
d3a2 : 28                       plp
                                trap_eq         ;returned flags OK?
d3a3 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
d3a5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
d3a7 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
d3a9 : 50fe            >        bvc *           ;failed overflow clear
                        
d3ab : c9f2                     cmp #('X'^$aa)  ;returned registers OK?
                                trap_ne
d3ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3af : e006                     cpx #6
                                trap_ne
d3b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3b3 : c043                     cpy #('I'-6)
                                trap_ne
d3b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3b7 : ba                       tsx             ;SP check
d3b8 : e0ff                     cpx #$ff
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d3ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
d3bc : a9d8                     lda #lo(jxp_ok) ;test with index causing a pag
d3be : 8d0003                   sta jxp_tab
d3c1 : a9d3                     lda #hi(jxp_ok)
d3c3 : 8d0103                   sta jxp_tab+1
d3c6 : a9d5                     lda #lo(jxp_px)
d3c8 : 8d0302                   sta pg_x
d3cb : a9d3                     lda #hi(jxp_px)
d3cd : 8d0402                   sta pg_x+1
d3d0 : a2ff                     ldx #$ff
d3d2 : 7c0102                   jmp (jxp_tab-$ff,x)
                        
d3d5 :                  jxp_px
                                trap            ;page cross by index to wrong 
d3d5 : 4cd5d3          >        jmp *           ;failed anyway
                        
                        
d3d8 :                  jxp_ok
                                next_test
d3d8 : ad0002          >            lda test_case   ;previous test
d3db : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d3dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
d3df : a90b            >            lda #test_num   ;*** next tests' number
d3e1 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if ROM_vectors = 1
                        ; test BRK clears decimal mode
                                load_flag 0     ;with interrupts enabled if al
d3e4 : a900            >            lda #0                  ;allow test to cha
                        
d3e6 : 48                       pha
d3e7 : a942                     lda #'B'
d3e9 : a252                     ldx #'R'
d3eb : a04b                     ldy #'K'
d3ed : 28                       plp             ;N=0, V=0, Z=0, C=0
d3ee : 00                       brk
d3ef : 88                       dey             ;should not be executed
d3f0 :                  brk_ret0                ;address of break return
d3f0 : 08                       php             ;either SP or Y count will fai
d3f1 : 88                       dey
d3f2 : 88                       dey
d3f3 : 88                       dey
d3f4 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X st
                                trap_ne
d3f6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3f8 : e053                     cpx #'R'+1
                                trap_ne
d3fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3fc : c045                     cpy #'K'-6
                                trap_ne
d3fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d400 : 68                       pla             ;returned flags OK (unchanged)
                                cmp_flag 0
d401 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                        
                                trap_ne
d403 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d405 : ba                       tsx             ;sp?
d406 : e0ff                     cpx #$ff
                                trap_ne
d408 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        ;pass 2
                                load_flag $ff   ;with interrupts disabled if a
d40a : a9ff            >            lda #$ff                ;allow test to cha
                        
d40c : 48                       pha
d40d : a9bd                     lda #$ff-'B'
d40f : a2ad                     ldx #$ff-'R'
d411 : a0b4                     ldy #$ff-'K'
d413 : 28                       plp             ;N=1, V=1, Z=1, C=1
d414 : 00                       brk
d415 : 88                       dey             ;should not be executed
d416 :                  brk_ret1                ;address of break return
d416 : 08                       php             ;either SP or Y count will fai
d417 : 88                       dey
d418 : 88                       dey
d419 : 88                       dey
d41a : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X st
                                trap_ne
d41c : d0fe            >        bne *           ;failed not equal (non zero)
                        
d41e : e0ae                     cpx #$ff-'R'+1
                                trap_ne
d420 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d422 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
d424 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d426 : 68                       pla             ;returned flags OK (unchanged)
                                cmp_flag $ff
d427 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                        
                                trap_ne
d429 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d42b : ba                       tsx             ;sp?
d42c : e0ff                     cpx #$ff
                                trap_ne
d42e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d430 : ad0002          >            lda test_case   ;previous test
d433 : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d435 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
d437 : a90c            >            lda #test_num   ;*** next tests' number
d439 : 8d0002          >            sta test_case
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            ;check_ram       ;uncomment to find altere
                        
                            endif
                        
                        ; testing accumulator increment/decrement INC A & DEC 
d43c : a2ac                     ldx #$ac    ;protect x & y
d43e : a0dc                     ldy #$dc
                                set_a $fe,$ff
                       >            load_flag $ff
d440 : a9ff            >            lda #$ff             ;allow test to change
                       >
d442 : 48              >            pha         ;use stack to load status
d443 : a9fe            >            lda #$fe     ;precharge accu
d445 : 28              >            plp
                        
d446 : 1a                       inc a           ;ff
                                tst_as $ff,$ff-zero
d447 : 48              >            pha
d448 : 08              >            php         ;save flags
d449 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d44b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d44d : 68              >            pla         ;load status
d44e : 48              >            pha
                       >            cmp_flag $ff-zero
d44f : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
d451 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d453 : 28              >            plp         ;restore status
d454 : 68              >            pla
                        
d455 : 1a                       inc a           ;00
                                tst_as 0,$ff-minus
d456 : 48              >            pha
d457 : 08              >            php         ;save flags
d458 : c900            >            cmp #0     ;test result
                       >            trap_ne
d45a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d45c : 68              >            pla         ;load status
d45d : 48              >            pha
                       >            cmp_flag $ff-minus
d45e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
d460 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d462 : 28              >            plp         ;restore status
d463 : 68              >            pla
                        
d464 : 1a                       inc a           ;01
                                tst_as 1,$ff-minus-zero
d465 : 48              >            pha
d466 : 08              >            php         ;save flags
d467 : c901            >            cmp #1     ;test result
                       >            trap_ne
d469 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d46b : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d46c : 48              >            pha
                       >            cmp_flag $ff-minus-zero
d46d : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
d46f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d471 : 28              >            plp         ;restore status
d472 : 68              >            pla
                        
d473 : 3a                       dec a           ;00
                                tst_as 0,$ff-minus
d474 : 48              >            pha
d475 : 08              >            php         ;save flags
d476 : c900            >            cmp #0     ;test result
                       >            trap_ne
d478 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d47a : 68              >            pla         ;load status
d47b : 48              >            pha
                       >            cmp_flag $ff-minus
d47c : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
d47e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d480 : 28              >            plp         ;restore status
d481 : 68              >            pla
                        
d482 : 3a                       dec a           ;ff
                                tst_as $ff,$ff-zero
d483 : 48              >            pha
d484 : 08              >            php         ;save flags
d485 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d487 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d489 : 68              >            pla         ;load status
d48a : 48              >            pha
                       >            cmp_flag $ff-zero
d48b : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
d48d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d48f : 28              >            plp         ;restore status
d490 : 68              >            pla
                        
d491 : 3a                       dec a           ;fe
                                set_a $fe,0
                       >            load_flag 0
d492 : a900            >            lda #0             ;allow test to change I
                       >
d494 : 48              >            pha         ;use stack to load status
d495 : a9fe            >            lda #$fe     ;precharge accu
d497 : 28              >            plp
                        
d498 : 1a                       inc a           ;ff
                                tst_as $ff,minus
d499 : 48              >            pha
d49a : 08              >            php         ;save flags
d49b : c9ff            >            cmp #$ff     ;test result
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
d49d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d49f : 68              >            pla         ;load status
d4a0 : 48              >            pha
                       >            cmp_flag minus
d4a1 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
d4a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4a5 : 28              >            plp         ;restore status
d4a6 : 68              >            pla
                        
d4a7 : 1a                       inc a           ;00
                                tst_as 0,zero
d4a8 : 48              >            pha
d4a9 : 08              >            php         ;save flags
d4aa : c900            >            cmp #0     ;test result
                       >            trap_ne
d4ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4ae : 68              >            pla         ;load status
d4af : 48              >            pha
                       >            cmp_flag zero
d4b0 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d4b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4b4 : 28              >            plp         ;restore status
d4b5 : 68              >            pla
                        
d4b6 : 1a                       inc a           ;01
                                tst_as 1,0
d4b7 : 48              >            pha
d4b8 : 08              >            php         ;save flags
d4b9 : c901            >            cmp #1     ;test result
                       >            trap_ne
d4bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4bd : 68              >            pla         ;load status
d4be : 48              >            pha
                       >            cmp_flag 0
d4bf : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d4c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4c3 : 28              >            plp         ;restore status
d4c4 : 68              >            pla
                        
d4c5 : 3a                       dec a           ;00
                                tst_as 0,zero
d4c6 : 48              >            pha
d4c7 : 08              >            php         ;save flags
d4c8 : c900            >            cmp #0     ;test result
                       >            trap_ne
d4ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4cc : 68              >            pla         ;load status
d4cd : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            cmp_flag zero
d4ce : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d4d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4d2 : 28              >            plp         ;restore status
d4d3 : 68              >            pla
                        
d4d4 : 3a                       dec a           ;ff
                                tst_as $ff,minus
d4d5 : 48              >            pha
d4d6 : 08              >            php         ;save flags
d4d7 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d4d9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4db : 68              >            pla         ;load status
d4dc : 48              >            pha
                       >            cmp_flag minus
d4dd : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
d4df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4e1 : 28              >            plp         ;restore status
d4e2 : 68              >            pla
                        
d4e3 : e0ac                     cpx #$ac
                                trap_ne     ;x altered during test
d4e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d4e7 : c0dc                     cpy #$dc
                                trap_ne     ;y altered during test
d4e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d4eb : ba                       tsx
d4ec : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d4ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d4f0 : ad0002          >            lda test_case   ;previous test
d4f3 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d4f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
d4f7 : a90d            >            lda #test_num   ;*** next tests' number
d4f9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing load / store accumulator LDA / STA (zp)
d4fc : a299                     ldx #$99    ;protect x & y
d4fe : a066                     ldy #$66
                                set_stat 0
                       >            load_flag 0
d500 : a900            >            lda #0             ;allow test to change I
                       >
d502 : 48              >            pha         ;use stack to load status
d503 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
d504 : b224                     lda (ind1)
d506 : 08                       php         ;test stores do not alter flags
d507 : 49c3                     eor #$c3
d509 : 28                       plp
d50a : 9230                     sta (indt)
d50c : 08                       php         ;flags after load/store sequence
d50d : 49c3                     eor #$c3
d50f : c9c3                     cmp #$c3    ;test result
                                trap_ne
d511 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d513 : 68                       pla         ;load status
                                eor_flag 0
d514 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d516 : cd1502                   cmp fLDx    ;test flags
                                trap_ne
d519 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d51b : a900            >            lda #0             ;allow test to change I
                       >
d51d : 48              >            pha         ;use stack to load status
d51e : 28              >            plp
                        
d51f : b226                     lda (ind1+2)
d521 : 08                       php         ;test stores do not alter flags
d522 : 49c3                     eor #$c3
d524 : 28                       plp
d525 : 9232                     sta (indt+2)
d527 : 08                       php         ;flags after load/store sequence
d528 : 49c3                     eor #$c3
d52a : c982                     cmp #$82    ;test result
                                trap_ne
d52c : d0fe            >        bne *           ;failed not equal (non zero)
                        
d52e : 68                       pla         ;load status
                                eor_flag 0
d52f : 4930            >            eor #0|fao         ;invert expected flags 
                        
d531 : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
d534 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d536 : a900            >            lda #0             ;allow test to change I
                       >
d538 : 48              >            pha         ;use stack to load status
d539 : 28              >            plp
                        
d53a : b228                     lda (ind1+4)
d53c : 08                       php         ;test stores do not alter flags
d53d : 49c3                     eor #$c3
d53f : 28                       plp
d540 : 9234                     sta (indt+4)
d542 : 08                       php         ;flags after load/store sequence
d543 : 49c3                     eor #$c3
d545 : c941                     cmp #$41    ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d547 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d549 : 68                       pla         ;load status
                                eor_flag 0
d54a : 4930            >            eor #0|fao         ;invert expected flags 
                        
d54c : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
d54f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d551 : a900            >            lda #0             ;allow test to change I
                       >
d553 : 48              >            pha         ;use stack to load status
d554 : 28              >            plp
                        
d555 : b22a                     lda (ind1+6)
d557 : 08                       php         ;test stores do not alter flags
d558 : 49c3                     eor #$c3
d55a : 28                       plp
d55b : 9236                     sta (indt+6)
d55d : 08                       php         ;flags after load/store sequence
d55e : 49c3                     eor #$c3
d560 : c900                     cmp #0      ;test result
                                trap_ne
d562 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d564 : 68                       pla         ;load status
                                eor_flag 0
d565 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d567 : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
d56a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d56c : e099                     cpx #$99
                                trap_ne     ;x altered during test
d56e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d570 : c066                     cpy #$66
                                trap_ne     ;y altered during test
d572 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
d574 : a003                     ldy #3      ;testing store result
d576 : a200                     ldx #0
d578 : b90502           tstai1  lda abst,y
d57b : 49c3                     eor #$c3
d57d : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
d580 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d582 : 8a                       txa
d583 : 990502                   sta abst,y  ;clear
d586 : 88                       dey
d587 : 10ef                     bpl tstai1
                        
d589 : a299                     ldx #$99    ;protect x & y
d58b : a066                     ldy #$66
                                set_stat $ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d58d : a9ff            >            lda #$ff             ;allow test to change
                       >
d58f : 48              >            pha         ;use stack to load status
d590 : 28              >            plp
                        
d591 : b224                     lda (ind1)
d593 : 08                       php         ;test stores do not alter flags
d594 : 49c3                     eor #$c3
d596 : 28                       plp
d597 : 9230                     sta (indt)
d599 : 08                       php         ;flags after load/store sequence
d59a : 49c3                     eor #$c3
d59c : c9c3                     cmp #$c3    ;test result
                                trap_ne
d59e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5a0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d5a1 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d5a3 : cd1502                   cmp fLDx    ;test flags
                                trap_ne
d5a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d5a8 : a9ff            >            lda #$ff             ;allow test to change
                       >
d5aa : 48              >            pha         ;use stack to load status
d5ab : 28              >            plp
                        
d5ac : b226                     lda (ind1+2)
d5ae : 08                       php         ;test stores do not alter flags
d5af : 49c3                     eor #$c3
d5b1 : 28                       plp
d5b2 : 9232                     sta (indt+2)
d5b4 : 08                       php         ;flags after load/store sequence
d5b5 : 49c3                     eor #$c3
d5b7 : c982                     cmp #$82    ;test result
                                trap_ne
d5b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5bb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d5bc : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d5be : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
d5c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d5c3 : a9ff            >            lda #$ff             ;allow test to change
                       >
d5c5 : 48              >            pha         ;use stack to load status
d5c6 : 28              >            plp
                        
d5c7 : b228                     lda (ind1+4)
d5c9 : 08                       php         ;test stores do not alter flags
d5ca : 49c3                     eor #$c3
d5cc : 28                       plp
d5cd : 9234                     sta (indt+4)
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d5cf : 08                       php         ;flags after load/store sequence
d5d0 : 49c3                     eor #$c3
d5d2 : c941                     cmp #$41    ;test result
                                trap_ne
d5d4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5d6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d5d7 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d5d9 : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
d5dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d5de : a9ff            >            lda #$ff             ;allow test to change
                       >
d5e0 : 48              >            pha         ;use stack to load status
d5e1 : 28              >            plp
                        
d5e2 : b22a                     lda (ind1+6)
d5e4 : 08                       php         ;test stores do not alter flags
d5e5 : 49c3                     eor #$c3
d5e7 : 28                       plp
d5e8 : 9236                     sta (indt+6)
d5ea : 08                       php         ;flags after load/store sequence
d5eb : 49c3                     eor #$c3
d5ed : c900                     cmp #0      ;test result
                                trap_ne
d5ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5f1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d5f2 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d5f4 : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
d5f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5f9 : e099                     cpx #$99
                                trap_ne     ;x altered during test
d5fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5fd : c066                     cpy #$66
                                trap_ne     ;y altered during test
d5ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
d601 : a003                     ldy #3      ;testing store result
d603 : a200                     ldx #0
d605 : b90502           tstai2  lda abst,y
d608 : 49c3                     eor #$c3
d60a : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
d60d : d0fe            >        bne *           ;failed not equal (non zero)
                        
d60f : 8a                       txa
d610 : 990502                   sta abst,y  ;clear
d613 : 88                       dey
d614 : 10ef                     bpl tstai2
d616 : ba                       tsx
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d617 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d619 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d61b : ad0002          >            lda test_case   ;previous test
d61e : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d620 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
d622 : a90e            >            lda #test_num   ;*** next tests' number
d624 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing STZ - zp / abs / zp,x / abs,x
d627 : a07b                     ldy #123    ;protect y
d629 : a204                     ldx #4      ;precharge test area
d62b : a907                     lda #7
d62d : 950c             tstz1   sta zpt,x
d62f : 0a                       asl a
d630 : ca                       dex
d631 : 10fa                     bpl tstz1
d633 : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
d635 : a9ff            >            lda #$ff             ;allow test to change
                       >
d637 : 48              >            pha         ;use stack to load status
d638 : a955            >            lda #$55     ;precharge accu
d63a : 28              >            plp
                        
d63b : 640c                     stz zpt
d63d : 640d                     stz zpt+1
d63f : 640e                     stz zpt+2
d641 : 640f                     stz zpt+3
d643 : 6410                     stz zpt+4
                                tst_a $55,$ff
d645 : 08              >            php         ;save flags
d646 : c955            >            cmp #$55     ;test result
                       >            trap_ne
d648 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d64a : 68              >            pla         ;load status
d64b : 48              >            pha
                       >            cmp_flag $ff
d64c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d64e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d650 : 28              >            plp         ;restore status
                        
d651 : b50c             tstz2   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
d653 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d655 : ca                       dex
d656 : 10f9                     bpl tstz2
d658 : a204                     ldx #4      ;precharge test area
d65a : a907                     lda #7
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d65c : 950c             tstz3   sta zpt,x
d65e : 0a                       asl a
d65f : ca                       dex
d660 : 10fa                     bpl tstz3
d662 : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
d664 : a900            >            lda #0             ;allow test to change I
                       >
d666 : 48              >            pha         ;use stack to load status
d667 : a9aa            >            lda #$aa     ;precharge accu
d669 : 28              >            plp
                        
d66a : 640c                     stz zpt
d66c : 640d                     stz zpt+1
d66e : 640e                     stz zpt+2
d670 : 640f                     stz zpt+3
d672 : 6410                     stz zpt+4
                                tst_a $aa,0
d674 : 08              >            php         ;save flags
d675 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
d677 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d679 : 68              >            pla         ;load status
d67a : 48              >            pha
                       >            cmp_flag 0
d67b : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d67d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d67f : 28              >            plp         ;restore status
                        
d680 : b50c             tstz4   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
d682 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d684 : ca                       dex
d685 : 10f9                     bpl tstz4
                        
d687 : a204                     ldx #4      ;precharge test area
d689 : a907                     lda #7
d68b : 9d0502           tstz5   sta abst,x
d68e : 0a                       asl a
d68f : ca                       dex
d690 : 10f9                     bpl tstz5
d692 : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
d694 : a9ff            >            lda #$ff             ;allow test to change
                       >
d696 : 48              >            pha         ;use stack to load status
d697 : a955            >            lda #$55     ;precharge accu
d699 : 28              >            plp
                        
d69a : 9c0502                   stz abst
d69d : 9c0602                   stz abst+1
d6a0 : 9c0702                   stz abst+2
d6a3 : 9c0802                   stz abst+3
d6a6 : 9c0902                   stz abst+4
                                tst_a $55,$ff
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d6a9 : 08              >            php         ;save flags
d6aa : c955            >            cmp #$55     ;test result
                       >            trap_ne
d6ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6ae : 68              >            pla         ;load status
d6af : 48              >            pha
                       >            cmp_flag $ff
d6b0 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d6b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6b4 : 28              >            plp         ;restore status
                        
d6b5 : bd0502           tstz6   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
d6b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d6ba : ca                       dex
d6bb : 10f8                     bpl tstz6
d6bd : a204                     ldx #4      ;precharge test area
d6bf : a907                     lda #7
d6c1 : 9d0502           tstz7   sta abst,x
d6c4 : 0a                       asl a
d6c5 : ca                       dex
d6c6 : 10f9                     bpl tstz7
d6c8 : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
d6ca : a900            >            lda #0             ;allow test to change I
                       >
d6cc : 48              >            pha         ;use stack to load status
d6cd : a9aa            >            lda #$aa     ;precharge accu
d6cf : 28              >            plp
                        
d6d0 : 9c0502                   stz abst
d6d3 : 9c0602                   stz abst+1
d6d6 : 9c0702                   stz abst+2
d6d9 : 9c0802                   stz abst+3
d6dc : 9c0902                   stz abst+4
                                tst_a $aa,0
d6df : 08              >            php         ;save flags
d6e0 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
d6e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6e4 : 68              >            pla         ;load status
d6e5 : 48              >            pha
                       >            cmp_flag 0
d6e6 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d6e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6ea : 28              >            plp         ;restore status
                        
d6eb : bd0502           tstz8   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
d6ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
d6f0 : ca                       dex
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d6f1 : 10f8                     bpl tstz8
                        
d6f3 : a204                     ldx #4      ;precharge test area
d6f5 : a907                     lda #7
d6f7 : 950c             tstz11  sta zpt,x
d6f9 : 0a                       asl a
d6fa : ca                       dex
d6fb : 10fa                     bpl tstz11
d6fd : a204                     ldx #4
d6ff :                  tstz15
                                set_a $55,$ff
                       >            load_flag $ff
d6ff : a9ff            >            lda #$ff             ;allow test to change
                       >
d701 : 48              >            pha         ;use stack to load status
d702 : a955            >            lda #$55     ;precharge accu
d704 : 28              >            plp
                        
d705 : 740c                     stz zpt,x
                                tst_a $55,$ff
d707 : 08              >            php         ;save flags
d708 : c955            >            cmp #$55     ;test result
                       >            trap_ne
d70a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d70c : 68              >            pla         ;load status
d70d : 48              >            pha
                       >            cmp_flag $ff
d70e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d710 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d712 : 28              >            plp         ;restore status
                        
d713 : ca                       dex
d714 : 10e9                     bpl tstz15
d716 : a204                     ldx #4
d718 : b50c             tstz12  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
d71a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d71c : ca                       dex
d71d : 10f9                     bpl tstz12
d71f : a204                     ldx #4      ;precharge test area
d721 : a907                     lda #7
d723 : 950c             tstz13  sta zpt,x
d725 : 0a                       asl a
d726 : ca                       dex
d727 : 10fa                     bpl tstz13
d729 : a204                     ldx #4
d72b :                  tstz16
                                set_a $aa,0
                       >            load_flag 0
d72b : a900            >            lda #0             ;allow test to change I
                       >
d72d : 48              >            pha         ;use stack to load status
d72e : a9aa            >            lda #$aa     ;precharge accu
d730 : 28              >            plp
                        
d731 : 740c                     stz zpt,x
                                tst_a $aa,0
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d733 : 08              >            php         ;save flags
d734 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
d736 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d738 : 68              >            pla         ;load status
d739 : 48              >            pha
                       >            cmp_flag 0
d73a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d73c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d73e : 28              >            plp         ;restore status
                        
d73f : ca                       dex
d740 : 10e9                     bpl tstz16
d742 : a204                     ldx #4
d744 : b50c             tstz14  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
d746 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d748 : ca                       dex
d749 : 10f9                     bpl tstz14
                        
d74b : a204                     ldx #4      ;precharge test area
d74d : a907                     lda #7
d74f : 9d0502           tstz21  sta abst,x
d752 : 0a                       asl a
d753 : ca                       dex
d754 : 10f9                     bpl tstz21
d756 : a204                     ldx #4
d758 :                  tstz25
                                set_a $55,$ff
                       >            load_flag $ff
d758 : a9ff            >            lda #$ff             ;allow test to change
                       >
d75a : 48              >            pha         ;use stack to load status
d75b : a955            >            lda #$55     ;precharge accu
d75d : 28              >            plp
                        
d75e : 9e0502                   stz abst,x
                                tst_a $55,$ff
d761 : 08              >            php         ;save flags
d762 : c955            >            cmp #$55     ;test result
                       >            trap_ne
d764 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d766 : 68              >            pla         ;load status
d767 : 48              >            pha
                       >            cmp_flag $ff
d768 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d76a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d76c : 28              >            plp         ;restore status
                        
d76d : ca                       dex
d76e : 10e8                     bpl tstz25
d770 : a204                     ldx #4
d772 : bd0502           tstz22  lda abst,x   ;verify zeros stored
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                trap_ne     ;non zero after STZ zp
d775 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d777 : ca                       dex
d778 : 10f8                     bpl tstz22
d77a : a204                     ldx #4      ;precharge test area
d77c : a907                     lda #7
d77e : 9d0502           tstz23  sta abst,x
d781 : 0a                       asl a
d782 : ca                       dex
d783 : 10f9                     bpl tstz23
d785 : a204                     ldx #4
d787 :                  tstz26
                                set_a $aa,0
                       >            load_flag 0
d787 : a900            >            lda #0             ;allow test to change I
                       >
d789 : 48              >            pha         ;use stack to load status
d78a : a9aa            >            lda #$aa     ;precharge accu
d78c : 28              >            plp
                        
d78d : 9e0502                   stz abst,x
                                tst_a $aa,0
d790 : 08              >            php         ;save flags
d791 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
d793 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d795 : 68              >            pla         ;load status
d796 : 48              >            pha
                       >            cmp_flag 0
d797 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d799 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d79b : 28              >            plp         ;restore status
                        
d79c : ca                       dex
d79d : 10e8                     bpl tstz26
d79f : a204                     ldx #4
d7a1 : bd0502           tstz24  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
d7a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7a6 : ca                       dex
d7a7 : 10f8                     bpl tstz24
                        
d7a9 : c07b                     cpy #123
                                trap_ne     ;y altered during test
d7ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7ad : ba                       tsx
d7ae : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d7b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d7b2 : ad0002          >            lda test_case   ;previous test
d7b5 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d7b7 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
000f =                 >test_num = test_num + 1
d7b9 : a90f            >            lda #test_num   ;*** next tests' number
d7bb : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing BIT - zp,x / abs,x / #
d7be : a042                     ldy #$42
d7c0 : a203                     ldx #3
                                set_a $ff,0
                       >            load_flag 0
d7c2 : a900            >            lda #0             ;allow test to change I
                       >
d7c4 : 48              >            pha         ;use stack to load status
d7c5 : a9ff            >            lda #$ff     ;precharge accu
d7c7 : 28              >            plp
                        
d7c8 : 3413                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,fz
d7ca : 08              >            php         ;save flags
d7cb : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d7cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7cf : 68              >            pla         ;load status
d7d0 : 48              >            pha
                       >            cmp_flag fz
d7d1 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d7d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7d5 : 28              >            plp         ;restore status
                        
d7d6 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d7d7 : a900            >            lda #0             ;allow test to change I
                       >
d7d9 : 48              >            pha         ;use stack to load status
d7da : a901            >            lda #1     ;precharge accu
d7dc : 28              >            plp
                        
d7dd : 3413                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
d7df : 08              >            php         ;save flags
d7e0 : c901            >            cmp #1     ;test result
                       >            trap_ne
d7e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7e4 : 68              >            pla         ;load status
d7e5 : 48              >            pha
                       >            cmp_flag fv
d7e6 : c970            >            cmp #(fv|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d7e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7ea : 28              >            plp         ;restore status
                        
d7eb : ca                       dex
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                set_a 1,0
                       >            load_flag 0
d7ec : a900            >            lda #0             ;allow test to change I
                       >
d7ee : 48              >            pha         ;use stack to load status
d7ef : a901            >            lda #1     ;precharge accu
d7f1 : 28              >            plp
                        
d7f2 : 3413                     bit zp1,x   ;82 - should set N (M7) & Z / clea
                                tst_a 1,fnz
d7f4 : 08              >            php         ;save flags
d7f5 : c901            >            cmp #1     ;test result
                       >            trap_ne
d7f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7f9 : 68              >            pla         ;load status
d7fa : 48              >            pha
                       >            cmp_flag fnz
d7fb : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d7fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7ff : 28              >            plp         ;restore status
                        
d800 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d801 : a900            >            lda #0             ;allow test to change I
                       >
d803 : 48              >            pha         ;use stack to load status
d804 : a901            >            lda #1     ;precharge accu
d806 : 28              >            plp
                        
d807 : 3413                     bit zp1,x   ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,fnv
d809 : 08              >            php         ;save flags
d80a : c901            >            cmp #1     ;test result
                       >            trap_ne
d80c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d80e : 68              >            pla         ;load status
d80f : 48              >            pha
                       >            cmp_flag fnv
d810 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d812 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d814 : 28              >            plp         ;restore status
                        
                        
                                set_a 1,$ff
                       >            load_flag $ff
d815 : a9ff            >            lda #$ff             ;allow test to change
                       >
d817 : 48              >            pha         ;use stack to load status
d818 : a901            >            lda #1     ;precharge accu
d81a : 28              >            plp
                        
d81b : 3413                     bit zp1,x   ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,~fz
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d81d : 08              >            php         ;save flags
d81e : c901            >            cmp #1     ;test result
                       >            trap_ne
d820 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d822 : 68              >            pla         ;load status
d823 : 48              >            pha
                       >            cmp_flag ~fz
d824 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d826 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d828 : 28              >            plp         ;restore status
                        
d829 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
d82a : a9ff            >            lda #$ff             ;allow test to change
                       >
d82c : 48              >            pha         ;use stack to load status
d82d : a901            >            lda #1     ;precharge accu
d82f : 28              >            plp
                        
d830 : 3413                     bit zp1,x   ;82 - should set N (M7) & Z / clea
                                tst_a 1,~fv
d832 : 08              >            php         ;save flags
d833 : c901            >            cmp #1     ;test result
                       >            trap_ne
d835 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d837 : 68              >            pla         ;load status
d838 : 48              >            pha
                       >            cmp_flag ~fv
d839 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d83b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d83d : 28              >            plp         ;restore status
                        
d83e : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
d83f : a9ff            >            lda #$ff             ;allow test to change
                       >
d841 : 48              >            pha         ;use stack to load status
d842 : a901            >            lda #1     ;precharge accu
d844 : 28              >            plp
                        
d845 : 3413                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
d847 : 08              >            php         ;save flags
d848 : c901            >            cmp #1     ;test result
                       >            trap_ne
d84a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d84c : 68              >            pla         ;load status
d84d : 48              >            pha
                       >            cmp_flag ~fnz
d84e : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
d850 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d852 : 28              >            plp         ;restore status
                        
d853 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
d854 : a9ff            >            lda #$ff             ;allow test to change
                       >
d856 : 48              >            pha         ;use stack to load status
d857 : a9ff            >            lda #$ff     ;precharge accu
d859 : 28              >            plp
                        
d85a : 3413                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
d85c : 08              >            php         ;save flags
d85d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d85f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d861 : 68              >            pla         ;load status
d862 : 48              >            pha
                       >            cmp_flag ~fnv
d863 : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d865 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d867 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,0
                       >            load_flag 0
d868 : a900            >            lda #0             ;allow test to change I
                       >
d86a : 48              >            pha         ;use stack to load status
d86b : a9ff            >            lda #$ff     ;precharge accu
d86d : 28              >            plp
                        
d86e : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,fz
d871 : 08              >            php         ;save flags
d872 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d874 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d876 : 68              >            pla         ;load status
d877 : 48              >            pha
                       >            cmp_flag fz
d878 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d87a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d87c : 28              >            plp         ;restore status
                        
d87d : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d87e : a900            >            lda #0             ;allow test to change I
                       >
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d880 : 48              >            pha         ;use stack to load status
d881 : a901            >            lda #1     ;precharge accu
d883 : 28              >            plp
                        
d884 : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
d887 : 08              >            php         ;save flags
d888 : c901            >            cmp #1     ;test result
                       >            trap_ne
d88a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d88c : 68              >            pla         ;load status
d88d : 48              >            pha
                       >            cmp_flag fv
d88e : c970            >            cmp #(fv|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d890 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d892 : 28              >            plp         ;restore status
                        
d893 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d894 : a900            >            lda #0             ;allow test to change I
                       >
d896 : 48              >            pha         ;use stack to load status
d897 : a901            >            lda #1     ;precharge accu
d899 : 28              >            plp
                        
d89a : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clea
                                tst_a 1,fnz
d89d : 08              >            php         ;save flags
d89e : c901            >            cmp #1     ;test result
                       >            trap_ne
d8a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8a2 : 68              >            pla         ;load status
d8a3 : 48              >            pha
                       >            cmp_flag fnz
d8a4 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d8a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8a8 : 28              >            plp         ;restore status
                        
d8a9 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d8aa : a900            >            lda #0             ;allow test to change I
                       >
d8ac : 48              >            pha         ;use stack to load status
d8ad : a901            >            lda #1     ;precharge accu
d8af : 28              >            plp
                        
d8b0 : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,fnv
d8b3 : 08              >            php         ;save flags
d8b4 : c901            >            cmp #1     ;test result
                       >            trap_ne
d8b6 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
d8b8 : 68              >            pla         ;load status
d8b9 : 48              >            pha
                       >            cmp_flag fnv
d8ba : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d8bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8be : 28              >            plp         ;restore status
                        
                        
                                set_a 1,$ff
                       >            load_flag $ff
d8bf : a9ff            >            lda #$ff             ;allow test to change
                       >
d8c1 : 48              >            pha         ;use stack to load status
d8c2 : a901            >            lda #1     ;precharge accu
d8c4 : 28              >            plp
                        
d8c5 : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,~fz
d8c8 : 08              >            php         ;save flags
d8c9 : c901            >            cmp #1     ;test result
                       >            trap_ne
d8cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8cd : 68              >            pla         ;load status
d8ce : 48              >            pha
                       >            cmp_flag ~fz
d8cf : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d8d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8d3 : 28              >            plp         ;restore status
                        
d8d4 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
d8d5 : a9ff            >            lda #$ff             ;allow test to change
                       >
d8d7 : 48              >            pha         ;use stack to load status
d8d8 : a901            >            lda #1     ;precharge accu
d8da : 28              >            plp
                        
d8db : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clea
                                tst_a 1,~fv
d8de : 08              >            php         ;save flags
d8df : c901            >            cmp #1     ;test result
                       >            trap_ne
d8e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8e3 : 68              >            pla         ;load status
d8e4 : 48              >            pha
                       >            cmp_flag ~fv
d8e5 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d8e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8e9 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page  138
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
d8ea : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
d8eb : a9ff            >            lda #$ff             ;allow test to change
                       >
d8ed : 48              >            pha         ;use stack to load status
d8ee : a901            >            lda #1     ;precharge accu
d8f0 : 28              >            plp
                        
d8f1 : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
d8f4 : 08              >            php         ;save flags
d8f5 : c901            >            cmp #1     ;test result
                       >            trap_ne
d8f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8f9 : 68              >            pla         ;load status
d8fa : 48              >            pha
                       >            cmp_flag ~fnz
d8fb : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d8fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8ff : 28              >            plp         ;restore status
                        
d900 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
d901 : a9ff            >            lda #$ff             ;allow test to change
                       >
d903 : 48              >            pha         ;use stack to load status
d904 : a9ff            >            lda #$ff     ;precharge accu
d906 : 28              >            plp
                        
d907 : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
d90a : 08              >            php         ;save flags
d90b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d90d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d90f : 68              >            pla         ;load status
d910 : 48              >            pha
                       >            cmp_flag ~fnv
d911 : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d913 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d915 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,0
                       >            load_flag 0
d916 : a900            >            lda #0             ;allow test to change I
                       >
d918 : 48              >            pha         ;use stack to load status
d919 : a9ff            >            lda #$ff     ;precharge accu
d91b : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  139
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d91c : 8900                     bit #$00    ;00 - should set Z
                                tst_a $ff,fz
d91e : 08              >            php         ;save flags
d91f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d921 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d923 : 68              >            pla         ;load status
d924 : 48              >            pha
                       >            cmp_flag fz
d925 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d927 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d929 : 28              >            plp         ;restore status
                        
d92a : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d92b : a900            >            lda #0             ;allow test to change I
                       >
d92d : 48              >            pha         ;use stack to load status
d92e : a901            >            lda #1     ;precharge accu
d930 : 28              >            plp
                        
d931 : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,0
d933 : 08              >            php         ;save flags
d934 : c901            >            cmp #1     ;test result
                       >            trap_ne
d936 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d938 : 68              >            pla         ;load status
d939 : 48              >            pha
                       >            cmp_flag 0
d93a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d93c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d93e : 28              >            plp         ;restore status
                        
                        ; *** DEBUG INFO ***
                        ; if it fails the previous test and your BIT # has set
                        ; see http://forum.6502.org/viewtopic.php?f=2&t=2241&p
                        ; why it shouldn't alter N or V flags on a BIT #
d93f : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d940 : a900            >            lda #0             ;allow test to change I
                       >
d942 : 48              >            pha         ;use stack to load status
d943 : a901            >            lda #1     ;precharge accu
d945 : 28              >            plp
                        
d946 : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,fz
d948 : 08              >            php         ;save flags
d949 : c901            >            cmp #1     ;test result
                       >            trap_ne
d94b : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  140
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
d94d : 68              >            pla         ;load status
d94e : 48              >            pha
                       >            cmp_flag fz
d94f : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d951 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d953 : 28              >            plp         ;restore status
                        
d954 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
d955 : a900            >            lda #0             ;allow test to change I
                       >
d957 : 48              >            pha         ;use stack to load status
d958 : a901            >            lda #1     ;precharge accu
d95a : 28              >            plp
                        
d95b : 89c3                     bit #$c3    ;c3 - should clear Z
                                tst_a 1,0
d95d : 08              >            php         ;save flags
d95e : c901            >            cmp #1     ;test result
                       >            trap_ne
d960 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d962 : 68              >            pla         ;load status
d963 : 48              >            pha
                       >            cmp_flag 0
d964 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d966 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d968 : 28              >            plp         ;restore status
                        
                        
                                set_a 1,$ff
                       >            load_flag $ff
d969 : a9ff            >            lda #$ff             ;allow test to change
                       >
d96b : 48              >            pha         ;use stack to load status
d96c : a901            >            lda #1     ;precharge accu
d96e : 28              >            plp
                        
d96f : 89c3                     bit #$c3    ;c3 - clear Z
                                tst_a 1,~fz
d971 : 08              >            php         ;save flags
d972 : c901            >            cmp #1     ;test result
                       >            trap_ne
d974 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d976 : 68              >            pla         ;load status
d977 : 48              >            pha
                       >            cmp_flag ~fz
d978 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d97a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d97c : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page  141
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
d97d : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
d97e : a9ff            >            lda #$ff             ;allow test to change
                       >
d980 : 48              >            pha         ;use stack to load status
d981 : a901            >            lda #1     ;precharge accu
d983 : 28              >            plp
                        
d984 : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,$ff
d986 : 08              >            php         ;save flags
d987 : c901            >            cmp #1     ;test result
                       >            trap_ne
d989 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d98b : 68              >            pla         ;load status
d98c : 48              >            pha
                       >            cmp_flag $ff
d98d : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d98f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d991 : 28              >            plp         ;restore status
                        
d992 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
d993 : a9ff            >            lda #$ff             ;allow test to change
                       >
d995 : 48              >            pha         ;use stack to load status
d996 : a901            >            lda #1     ;precharge accu
d998 : 28              >            plp
                        
d999 : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,~fz
d99b : 08              >            php         ;save flags
d99c : c901            >            cmp #1     ;test result
                       >            trap_ne
d99e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9a0 : 68              >            pla         ;load status
d9a1 : 48              >            pha
                       >            cmp_flag ~fz
d9a2 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d9a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9a6 : 28              >            plp         ;restore status
                        
d9a7 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
d9a8 : a9ff            >            lda #$ff             ;allow test to change
                       >
d9aa : 48              >            pha         ;use stack to load status
d9ab : a9ff            >            lda #$ff     ;precharge accu
d9ad : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  142
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d9ae : 8900                     bit #$00   ;00 - should set Z
                                tst_a $ff,$ff
d9b0 : 08              >            php         ;save flags
d9b1 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d9b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9b5 : 68              >            pla         ;load status
d9b6 : 48              >            pha
                       >            cmp_flag $ff
d9b7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d9b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9bb : 28              >            plp         ;restore status
                        
                        
d9bc : e003                     cpx #3
                                trap_ne     ;x altered during test
d9be : d0fe            >        bne *           ;failed not equal (non zero)
                        
d9c0 : c042                     cpy #$42
                                trap_ne     ;y altered during test
d9c2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d9c4 : ba                       tsx
d9c5 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d9c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d9c9 : ad0002          >            lda test_case   ;previous test
d9cc : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d9ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
d9d0 : a910            >            lda #test_num   ;*** next tests' number
d9d2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing TRB, TSB - zp / abs
                        
                        trbt    macro       ;\1 = memory, \2 = flags
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                trb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
AS65 Assembler for R6502 [1.42].                                     Page  143
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+3
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong
                                endm
                        
                        tsbt    macro       ;\1 = memory, \2 = flags
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                tsb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+4
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong
                                endm
                        
d9d5 : a2c0                     ldx #$c0
d9d7 : a000                     ldy #0      ;op1 - memory save
                                ;   zpt     ;op1 - memory modifiable
d9d9 : 640d                     stz zpt+1   ;op2 - accu
                                ;   zpt+2   ;and flags
                                ;   zpt+3   ;memory after reset
                                ;   zpt+4   ;memory after set
                        
d9db : 98               tbt1    tya
d9dc : 250d                     and zpt+1   ;set Z by anding the 2 operands
d9de : 08                       php
d9df : 68                       pla
d9e0 : 2902                     and #fz     ;mask Z
d9e2 : 850e                     sta zpt+2
d9e4 : 98                       tya         ;reset op1 bits by op2
d9e5 : 49ff                     eor #$ff
d9e7 : 050d                     ora zpt+1
d9e9 : 49ff                     eor #$ff
d9eb : 850f                     sta zpt+3
d9ed : 98                       tya         ;set op1 bits by op2
d9ee : 050d                     ora zpt+1
d9f0 : 8510                     sta zpt+4
                        
                                trbt zpt,$ff
d9f2 : 840c            >        sty zpt
                       >        load_flag $ff
d9f4 : a9ff            >            lda #$ff             ;allow test to change
                       >
d9f6 : 48              >        pha
d9f7 : a50d            >        lda zpt+1
d9f9 : 28              >        plp
AS65 Assembler for R6502 [1.42].                                     Page  144
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d9fa : 140c            >        trb zpt
d9fc : 08              >        php
d9fd : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
d9ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da01 : 68              >        pla
da02 : 48              >        pha
da03 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
da05 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
                       >
                       >        trap_ne     ;flags changed except Z
da07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da09 : 68              >        pla
da0a : 2902            >        and #fz
da0c : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
da0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da10 : a50f            >        lda zpt+3
da12 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
da14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                trbt abst,$ff
da16 : 8c0502          >        sty abst
                       >        load_flag $ff
da19 : a9ff            >            lda #$ff             ;allow test to change
                       >
da1b : 48              >        pha
da1c : a50d            >        lda zpt+1
da1e : 28              >        plp
da1f : 1c0502          >        trb abst
da22 : 08              >        php
da23 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
da25 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da27 : 68              >        pla
da28 : 48              >        pha
da29 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
da2b : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
                       >
                       >        trap_ne     ;flags changed except Z
da2d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da2f : 68              >        pla
da30 : 2902            >        and #fz
da32 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
da34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da36 : a50f            >        lda zpt+3
da38 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
da3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page  145
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                trbt zpt,0
da3c : 840c            >        sty zpt
                       >        load_flag 0
da3e : a900            >            lda #0             ;allow test to change I
                       >
da40 : 48              >        pha
da41 : a50d            >        lda zpt+1
da43 : 28              >        plp
da44 : 140c            >        trb zpt
da46 : 08              >        php
da47 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
da49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da4b : 68              >        pla
da4c : 48              >        pha
da4d : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
da4f : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
da51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da53 : 68              >        pla
da54 : 2902            >        and #fz
da56 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
da58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da5a : a50f            >        lda zpt+3
da5c : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
da5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                trbt abst,0
da60 : 8c0502          >        sty abst
                       >        load_flag 0
da63 : a900            >            lda #0             ;allow test to change I
                       >
da65 : 48              >        pha
da66 : a50d            >        lda zpt+1
da68 : 28              >        plp
da69 : 1c0502          >        trb abst
da6c : 08              >        php
da6d : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
da6f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da71 : 68              >        pla
da72 : 48              >        pha
da73 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
da75 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
da77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da79 : 68              >        pla
da7a : 2902            >        and #fz
da7c : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
AS65 Assembler for R6502 [1.42].                                     Page  146
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

da7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da80 : a50f            >        lda zpt+3
da82 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
da84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt zpt,$ff
da86 : 840c            >        sty zpt
                       >        load_flag $ff
da88 : a9ff            >            lda #$ff             ;allow test to change
                       >
da8a : 48              >        pha
da8b : a50d            >        lda zpt+1
da8d : 28              >        plp
da8e : 040c            >        tsb zpt
da90 : 08              >        php
da91 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
da93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da95 : 68              >        pla
da96 : 48              >        pha
da97 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
da99 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
                       >
                       >        trap_ne     ;flags changed except Z
da9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da9d : 68              >        pla
da9e : 2902            >        and #fz
daa0 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
daa2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
daa4 : a510            >        lda zpt+4
daa6 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
daa8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt abst,$ff
daaa : 8c0502          >        sty abst
                       >        load_flag $ff
daad : a9ff            >            lda #$ff             ;allow test to change
                       >
daaf : 48              >        pha
dab0 : a50d            >        lda zpt+1
dab2 : 28              >        plp
dab3 : 0c0502          >        tsb abst
dab6 : 08              >        php
dab7 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
dab9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dabb : 68              >        pla
dabc : 48              >        pha
dabd : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
dabf : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
AS65 Assembler for R6502 [1.42].                                     Page  147
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >        trap_ne     ;flags changed except Z
dac1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dac3 : 68              >        pla
dac4 : 2902            >        and #fz
dac6 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
dac8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
daca : a510            >        lda zpt+4
dacc : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
dace : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt zpt,0
dad0 : 840c            >        sty zpt
                       >        load_flag 0
dad2 : a900            >            lda #0             ;allow test to change I
                       >
dad4 : 48              >        pha
dad5 : a50d            >        lda zpt+1
dad7 : 28              >        plp
dad8 : 040c            >        tsb zpt
dada : 08              >        php
dadb : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
dadd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dadf : 68              >        pla
dae0 : 48              >        pha
dae1 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
dae3 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
dae5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dae7 : 68              >        pla
dae8 : 2902            >        and #fz
daea : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
daec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
daee : a510            >        lda zpt+4
daf0 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
daf2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt abst,0
daf4 : 8c0502          >        sty abst
                       >        load_flag 0
daf7 : a900            >            lda #0             ;allow test to change I
                       >
daf9 : 48              >        pha
dafa : a50d            >        lda zpt+1
dafc : 28              >        plp
dafd : 0c0502          >        tsb abst
db00 : 08              >        php
db01 : c50d            >        cmp zpt+1
AS65 Assembler for R6502 [1.42].                                     Page  148
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        trap_ne     ;accu was changed
db03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db05 : 68              >        pla
db06 : 48              >        pha
db07 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
db09 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
db0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db0d : 68              >        pla
db0e : 2902            >        and #fz
db10 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
db12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db14 : a510            >        lda zpt+4
db16 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
db18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                        
db1a : c8                       iny         ;iterate op1
db1b : d004                     bne tbt3
db1d : e60d                     inc zpt+1   ;iterate op2
db1f : f003                     beq tbt2
db21 : 4cdbd9           tbt3    jmp tbt1
db24 :                  tbt2
db24 : e0c0                     cpx #$c0
                                trap_ne     ;x altered during test
db26 : d0fe            >        bne *           ;failed not equal (non zero)
                        
db28 : ba                       tsx
db29 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
db2b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
db2d : ad0002          >            lda test_case   ;previous test
db30 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
db32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
db34 : a911            >            lda #test_num   ;*** next tests' number
db36 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if rkwl_wdc_op = 1
                        ; testing RMB, SMB - zp
                        rmbt    macro       ;\1 = bitnum
                                lda #$ff
                                sta zpt
                                set_a $a5,0
                                rmb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff-(1<<\1)
AS65 Assembler for R6502 [1.42].                                     Page  149
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                trap_ne     ;wrong bits set or cleared
                                lda #1<<\1
                                sta zpt
                                set_a $5a,$ff
                                rmb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                trap_ne     ;wrong bits set or cleared
                                endm
                        smbt    macro       ;\1 = bitnum
                                lda #$ff-(1<<\1)
                                sta zpt
                                set_a $a5,0
                                smb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff
                                trap_ne     ;wrong bits set or cleared
                                lda #0
                                sta zpt
                                set_a $5a,$ff
                                smb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                cmp #1<<\1
                                trap_ne     ;wrong bits set or cleared
                                endm
                        
db39 : a2ba                     ldx #$ba    ;protect x & y
db3b : a0d0                     ldy #$d0
                                rmbt 0
db3d : a9ff            >        lda #$ff
db3f : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
db41 : a900            >            lda #0             ;allow test to change I
                       >
db43 : 48              >            pha         ;use stack to load status
db44 : a9a5            >            lda #$a5     ;precharge accu
db46 : 28              >            plp
                       >
db47 : 070c            >        rmb 0,zpt
                       >        tst_a $a5,0
db49 : 08              >            php         ;save flags
db4a : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
db4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db4e : 68              >            pla         ;load status
db4f : 48              >            pha
                       >            cmp_flag 0
db50 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
db52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db54 : 28              >            plp         ;restore status
                       >
db55 : a50c            >        lda zpt
db57 : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne     ;wrong bits set or cleared
db59 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  150
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
db5b : a901            >        lda #1<<0
db5d : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
db5f : a9ff            >            lda #$ff             ;allow test to change
                       >
db61 : 48              >            pha         ;use stack to load status
db62 : a95a            >            lda #$5a     ;precharge accu
db64 : 28              >            plp
                       >
db65 : 070c            >        rmb 0,zpt
                       >        tst_a $5a,$ff
db67 : 08              >            php         ;save flags
db68 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
db6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db6c : 68              >            pla         ;load status
db6d : 48              >            pha
                       >            cmp_flag $ff
db6e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
db70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db72 : 28              >            plp         ;restore status
                       >
db73 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
db75 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 1
db77 : a9ff            >        lda #$ff
db79 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
db7b : a900            >            lda #0             ;allow test to change I
                       >
db7d : 48              >            pha         ;use stack to load status
db7e : a9a5            >            lda #$a5     ;precharge accu
db80 : 28              >            plp
                       >
db81 : 170c            >        rmb 1,zpt
                       >        tst_a $a5,0
db83 : 08              >            php         ;save flags
db84 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
db86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db88 : 68              >            pla         ;load status
db89 : 48              >            pha
                       >            cmp_flag 0
db8a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
db8c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db8e : 28              >            plp         ;restore status
                       >
db8f : a50c            >        lda zpt
AS65 Assembler for R6502 [1.42].                                     Page  151
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

db91 : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne     ;wrong bits set or cleared
db93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db95 : a902            >        lda #1<<1
db97 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
db99 : a9ff            >            lda #$ff             ;allow test to change
                       >
db9b : 48              >            pha         ;use stack to load status
db9c : a95a            >            lda #$5a     ;precharge accu
db9e : 28              >            plp
                       >
db9f : 170c            >        rmb 1,zpt
                       >        tst_a $5a,$ff
dba1 : 08              >            php         ;save flags
dba2 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dba4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dba6 : 68              >            pla         ;load status
dba7 : 48              >            pha
                       >            cmp_flag $ff
dba8 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dbaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbac : 28              >            plp         ;restore status
                       >
dbad : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
dbaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 2
dbb1 : a9ff            >        lda #$ff
dbb3 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dbb5 : a900            >            lda #0             ;allow test to change I
                       >
dbb7 : 48              >            pha         ;use stack to load status
dbb8 : a9a5            >            lda #$a5     ;precharge accu
dbba : 28              >            plp
                       >
dbbb : 270c            >        rmb 2,zpt
                       >        tst_a $a5,0
dbbd : 08              >            php         ;save flags
dbbe : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dbc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbc2 : 68              >            pla         ;load status
dbc3 : 48              >            pha
                       >            cmp_flag 0
dbc4 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dbc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  152
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

dbc8 : 28              >            plp         ;restore status
                       >
dbc9 : a50c            >        lda zpt
dbcb : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne     ;wrong bits set or cleared
dbcd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbcf : a904            >        lda #1<<2
dbd1 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dbd3 : a9ff            >            lda #$ff             ;allow test to change
                       >
dbd5 : 48              >            pha         ;use stack to load status
dbd6 : a95a            >            lda #$5a     ;precharge accu
dbd8 : 28              >            plp
                       >
dbd9 : 270c            >        rmb 2,zpt
                       >        tst_a $5a,$ff
dbdb : 08              >            php         ;save flags
dbdc : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dbde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbe0 : 68              >            pla         ;load status
dbe1 : 48              >            pha
                       >            cmp_flag $ff
dbe2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dbe4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbe6 : 28              >            plp         ;restore status
                       >
dbe7 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
dbe9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 3
dbeb : a9ff            >        lda #$ff
dbed : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dbef : a900            >            lda #0             ;allow test to change I
                       >
dbf1 : 48              >            pha         ;use stack to load status
dbf2 : a9a5            >            lda #$a5     ;precharge accu
dbf4 : 28              >            plp
                       >
dbf5 : 370c            >        rmb 3,zpt
                       >        tst_a $a5,0
dbf7 : 08              >            php         ;save flags
dbf8 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dbfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbfc : 68              >            pla         ;load status
dbfd : 48              >            pha
                       >            cmp_flag 0
dbfe : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
AS65 Assembler for R6502 [1.42].                                     Page  153
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
dc00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc02 : 28              >            plp         ;restore status
                       >
dc03 : a50c            >        lda zpt
dc05 : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne     ;wrong bits set or cleared
dc07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc09 : a908            >        lda #1<<3
dc0b : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dc0d : a9ff            >            lda #$ff             ;allow test to change
                       >
dc0f : 48              >            pha         ;use stack to load status
dc10 : a95a            >            lda #$5a     ;precharge accu
dc12 : 28              >            plp
                       >
dc13 : 370c            >        rmb 3,zpt
                       >        tst_a $5a,$ff
dc15 : 08              >            php         ;save flags
dc16 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dc18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc1a : 68              >            pla         ;load status
dc1b : 48              >            pha
                       >            cmp_flag $ff
dc1c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dc1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc20 : 28              >            plp         ;restore status
                       >
dc21 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
dc23 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 4
dc25 : a9ff            >        lda #$ff
dc27 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dc29 : a900            >            lda #0             ;allow test to change I
                       >
dc2b : 48              >            pha         ;use stack to load status
dc2c : a9a5            >            lda #$a5     ;precharge accu
dc2e : 28              >            plp
                       >
dc2f : 470c            >        rmb 4,zpt
                       >        tst_a $a5,0
dc31 : 08              >            php         ;save flags
dc32 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dc34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc36 : 68              >            pla         ;load status
dc37 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page  154
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            cmp_flag 0
dc38 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dc3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc3c : 28              >            plp         ;restore status
                       >
dc3d : a50c            >        lda zpt
dc3f : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne     ;wrong bits set or cleared
dc41 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc43 : a910            >        lda #1<<4
dc45 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dc47 : a9ff            >            lda #$ff             ;allow test to change
                       >
dc49 : 48              >            pha         ;use stack to load status
dc4a : a95a            >            lda #$5a     ;precharge accu
dc4c : 28              >            plp
                       >
dc4d : 470c            >        rmb 4,zpt
                       >        tst_a $5a,$ff
dc4f : 08              >            php         ;save flags
dc50 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dc52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc54 : 68              >            pla         ;load status
dc55 : 48              >            pha
                       >            cmp_flag $ff
dc56 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dc58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc5a : 28              >            plp         ;restore status
                       >
dc5b : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
dc5d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 5
dc5f : a9ff            >        lda #$ff
dc61 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dc63 : a900            >            lda #0             ;allow test to change I
                       >
dc65 : 48              >            pha         ;use stack to load status
dc66 : a9a5            >            lda #$a5     ;precharge accu
dc68 : 28              >            plp
                       >
dc69 : 570c            >        rmb 5,zpt
                       >        tst_a $a5,0
dc6b : 08              >            php         ;save flags
dc6c : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dc6e : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  155
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
dc70 : 68              >            pla         ;load status
dc71 : 48              >            pha
                       >            cmp_flag 0
dc72 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dc74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc76 : 28              >            plp         ;restore status
                       >
dc77 : a50c            >        lda zpt
dc79 : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne     ;wrong bits set or cleared
dc7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc7d : a920            >        lda #1<<5
dc7f : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dc81 : a9ff            >            lda #$ff             ;allow test to change
                       >
dc83 : 48              >            pha         ;use stack to load status
dc84 : a95a            >            lda #$5a     ;precharge accu
dc86 : 28              >            plp
                       >
dc87 : 570c            >        rmb 5,zpt
                       >        tst_a $5a,$ff
dc89 : 08              >            php         ;save flags
dc8a : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dc8c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc8e : 68              >            pla         ;load status
dc8f : 48              >            pha
                       >            cmp_flag $ff
dc90 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dc92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc94 : 28              >            plp         ;restore status
                       >
dc95 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
dc97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 6
dc99 : a9ff            >        lda #$ff
dc9b : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dc9d : a900            >            lda #0             ;allow test to change I
                       >
dc9f : 48              >            pha         ;use stack to load status
dca0 : a9a5            >            lda #$a5     ;precharge accu
dca2 : 28              >            plp
                       >
dca3 : 670c            >        rmb 6,zpt
                       >        tst_a $a5,0
dca5 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  156
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

dca6 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dca8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcaa : 68              >            pla         ;load status
dcab : 48              >            pha
                       >            cmp_flag 0
dcac : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dcae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcb0 : 28              >            plp         ;restore status
                       >
dcb1 : a50c            >        lda zpt
dcb3 : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne     ;wrong bits set or cleared
dcb5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcb7 : a940            >        lda #1<<6
dcb9 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dcbb : a9ff            >            lda #$ff             ;allow test to change
                       >
dcbd : 48              >            pha         ;use stack to load status
dcbe : a95a            >            lda #$5a     ;precharge accu
dcc0 : 28              >            plp
                       >
dcc1 : 670c            >        rmb 6,zpt
                       >        tst_a $5a,$ff
dcc3 : 08              >            php         ;save flags
dcc4 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dcc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcc8 : 68              >            pla         ;load status
dcc9 : 48              >            pha
                       >            cmp_flag $ff
dcca : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dccc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcce : 28              >            plp         ;restore status
                       >
dccf : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
dcd1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 7
dcd3 : a9ff            >        lda #$ff
dcd5 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dcd7 : a900            >            lda #0             ;allow test to change I
                       >
dcd9 : 48              >            pha         ;use stack to load status
dcda : a9a5            >            lda #$a5     ;precharge accu
dcdc : 28              >            plp
                       >
AS65 Assembler for R6502 [1.42].                                     Page  157
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

dcdd : 770c            >        rmb 7,zpt
                       >        tst_a $a5,0
dcdf : 08              >            php         ;save flags
dce0 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dce2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dce4 : 68              >            pla         ;load status
dce5 : 48              >            pha
                       >            cmp_flag 0
dce6 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dce8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcea : 28              >            plp         ;restore status
                       >
dceb : a50c            >        lda zpt
dced : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne     ;wrong bits set or cleared
dcef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcf1 : a980            >        lda #1<<7
dcf3 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dcf5 : a9ff            >            lda #$ff             ;allow test to change
                       >
dcf7 : 48              >            pha         ;use stack to load status
dcf8 : a95a            >            lda #$5a     ;precharge accu
dcfa : 28              >            plp
                       >
dcfb : 770c            >        rmb 7,zpt
                       >        tst_a $5a,$ff
dcfd : 08              >            php         ;save flags
dcfe : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dd00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd02 : 68              >            pla         ;load status
dd03 : 48              >            pha
                       >            cmp_flag $ff
dd04 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dd06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd08 : 28              >            plp         ;restore status
                       >
dd09 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
dd0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 0
dd0d : a9fe            >        lda #$ff-(1<<0)
dd0f : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dd11 : a900            >            lda #0             ;allow test to change I
                       >
dd13 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].                                     Page  158
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

dd14 : a9a5            >            lda #$a5     ;precharge accu
dd16 : 28              >            plp
                       >
dd17 : 870c            >        smb 0,zpt
                       >        tst_a $a5,0
dd19 : 08              >            php         ;save flags
dd1a : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dd1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd1e : 68              >            pla         ;load status
dd1f : 48              >            pha
                       >            cmp_flag 0
dd20 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dd22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd24 : 28              >            plp         ;restore status
                       >
dd25 : a50c            >        lda zpt
dd27 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
dd29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd2b : a900            >        lda #0
dd2d : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dd2f : a9ff            >            lda #$ff             ;allow test to change
                       >
dd31 : 48              >            pha         ;use stack to load status
dd32 : a95a            >            lda #$5a     ;precharge accu
dd34 : 28              >            plp
                       >
dd35 : 870c            >        smb 0,zpt
                       >        tst_a $5a,$ff
dd37 : 08              >            php         ;save flags
dd38 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dd3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd3c : 68              >            pla         ;load status
dd3d : 48              >            pha
                       >            cmp_flag $ff
dd3e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dd40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd42 : 28              >            plp         ;restore status
                       >
dd43 : a50c            >        lda zpt
dd45 : c901            >        cmp #1<<0
                       >        trap_ne     ;wrong bits set or cleared
dd47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 1
dd49 : a9fd            >        lda #$ff-(1<<1)
dd4b : 850c            >        sta zpt
                       >        set_a $a5,0
AS65 Assembler for R6502 [1.42].                                     Page  159
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            load_flag 0
dd4d : a900            >            lda #0             ;allow test to change I
                       >
dd4f : 48              >            pha         ;use stack to load status
dd50 : a9a5            >            lda #$a5     ;precharge accu
dd52 : 28              >            plp
                       >
dd53 : 970c            >        smb 1,zpt
                       >        tst_a $a5,0
dd55 : 08              >            php         ;save flags
dd56 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dd58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd5a : 68              >            pla         ;load status
dd5b : 48              >            pha
                       >            cmp_flag 0
dd5c : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dd5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd60 : 28              >            plp         ;restore status
                       >
dd61 : a50c            >        lda zpt
dd63 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
dd65 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd67 : a900            >        lda #0
dd69 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dd6b : a9ff            >            lda #$ff             ;allow test to change
                       >
dd6d : 48              >            pha         ;use stack to load status
dd6e : a95a            >            lda #$5a     ;precharge accu
dd70 : 28              >            plp
                       >
dd71 : 970c            >        smb 1,zpt
                       >        tst_a $5a,$ff
dd73 : 08              >            php         ;save flags
dd74 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dd76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd78 : 68              >            pla         ;load status
dd79 : 48              >            pha
                       >            cmp_flag $ff
dd7a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dd7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd7e : 28              >            plp         ;restore status
                       >
dd7f : a50c            >        lda zpt
dd81 : c902            >        cmp #1<<1
                       >        trap_ne     ;wrong bits set or cleared
dd83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page  160
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                smbt 2
dd85 : a9fb            >        lda #$ff-(1<<2)
dd87 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
dd89 : a900            >            lda #0             ;allow test to change I
                       >
dd8b : 48              >            pha         ;use stack to load status
dd8c : a9a5            >            lda #$a5     ;precharge accu
dd8e : 28              >            plp
                       >
dd8f : a70c            >        smb 2,zpt
                       >        tst_a $a5,0
dd91 : 08              >            php         ;save flags
dd92 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dd94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd96 : 68              >            pla         ;load status
dd97 : 48              >            pha
                       >            cmp_flag 0
dd98 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dd9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd9c : 28              >            plp         ;restore status
                       >
dd9d : a50c            >        lda zpt
dd9f : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
dda1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dda3 : a900            >        lda #0
dda5 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dda7 : a9ff            >            lda #$ff             ;allow test to change
                       >
dda9 : 48              >            pha         ;use stack to load status
ddaa : a95a            >            lda #$5a     ;precharge accu
ddac : 28              >            plp
                       >
ddad : a70c            >        smb 2,zpt
                       >        tst_a $5a,$ff
ddaf : 08              >            php         ;save flags
ddb0 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
ddb2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddb4 : 68              >            pla         ;load status
ddb5 : 48              >            pha
                       >            cmp_flag $ff
ddb6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ddb8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddba : 28              >            plp         ;restore status
                       >
ddbb : a50c            >        lda zpt
ddbd : c904            >        cmp #1<<2
AS65 Assembler for R6502 [1.42].                                     Page  161
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        trap_ne     ;wrong bits set or cleared
ddbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 3
ddc1 : a9f7            >        lda #$ff-(1<<3)
ddc3 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
ddc5 : a900            >            lda #0             ;allow test to change I
                       >
ddc7 : 48              >            pha         ;use stack to load status
ddc8 : a9a5            >            lda #$a5     ;precharge accu
ddca : 28              >            plp
                       >
ddcb : b70c            >        smb 3,zpt
                       >        tst_a $a5,0
ddcd : 08              >            php         ;save flags
ddce : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
ddd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddd2 : 68              >            pla         ;load status
ddd3 : 48              >            pha
                       >            cmp_flag 0
ddd4 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ddd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddd8 : 28              >            plp         ;restore status
                       >
ddd9 : a50c            >        lda zpt
dddb : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
dddd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dddf : a900            >        lda #0
dde1 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
dde3 : a9ff            >            lda #$ff             ;allow test to change
                       >
dde5 : 48              >            pha         ;use stack to load status
dde6 : a95a            >            lda #$5a     ;precharge accu
dde8 : 28              >            plp
                       >
dde9 : b70c            >        smb 3,zpt
                       >        tst_a $5a,$ff
ddeb : 08              >            php         ;save flags
ddec : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
ddee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddf0 : 68              >            pla         ;load status
ddf1 : 48              >            pha
                       >            cmp_flag $ff
ddf2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ddf4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  162
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ddf6 : 28              >            plp         ;restore status
                       >
ddf7 : a50c            >        lda zpt
ddf9 : c908            >        cmp #1<<3
                       >        trap_ne     ;wrong bits set or cleared
ddfb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 4
ddfd : a9ef            >        lda #$ff-(1<<4)
ddff : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
de01 : a900            >            lda #0             ;allow test to change I
                       >
de03 : 48              >            pha         ;use stack to load status
de04 : a9a5            >            lda #$a5     ;precharge accu
de06 : 28              >            plp
                       >
de07 : c70c            >        smb 4,zpt
                       >        tst_a $a5,0
de09 : 08              >            php         ;save flags
de0a : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
de0c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de0e : 68              >            pla         ;load status
de0f : 48              >            pha
                       >            cmp_flag 0
de10 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
de12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de14 : 28              >            plp         ;restore status
                       >
de15 : a50c            >        lda zpt
de17 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
de19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de1b : a900            >        lda #0
de1d : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
de1f : a9ff            >            lda #$ff             ;allow test to change
                       >
de21 : 48              >            pha         ;use stack to load status
de22 : a95a            >            lda #$5a     ;precharge accu
de24 : 28              >            plp
                       >
de25 : c70c            >        smb 4,zpt
                       >        tst_a $5a,$ff
de27 : 08              >            php         ;save flags
de28 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
de2a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de2c : 68              >            pla         ;load status
de2d : 48              >            pha
                       >            cmp_flag $ff
de2e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
AS65 Assembler for R6502 [1.42].                                     Page  163
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >            trap_ne
de30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de32 : 28              >            plp         ;restore status
                       >
de33 : a50c            >        lda zpt
de35 : c910            >        cmp #1<<4
                       >        trap_ne     ;wrong bits set or cleared
de37 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 5
de39 : a9df            >        lda #$ff-(1<<5)
de3b : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
de3d : a900            >            lda #0             ;allow test to change I
                       >
de3f : 48              >            pha         ;use stack to load status
de40 : a9a5            >            lda #$a5     ;precharge accu
de42 : 28              >            plp
                       >
de43 : d70c            >        smb 5,zpt
                       >        tst_a $a5,0
de45 : 08              >            php         ;save flags
de46 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
de48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de4a : 68              >            pla         ;load status
de4b : 48              >            pha
                       >            cmp_flag 0
de4c : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
de4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de50 : 28              >            plp         ;restore status
                       >
de51 : a50c            >        lda zpt
de53 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
de55 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de57 : a900            >        lda #0
de59 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
de5b : a9ff            >            lda #$ff             ;allow test to change
                       >
de5d : 48              >            pha         ;use stack to load status
de5e : a95a            >            lda #$5a     ;precharge accu
de60 : 28              >            plp
                       >
de61 : d70c            >        smb 5,zpt
                       >        tst_a $5a,$ff
de63 : 08              >            php         ;save flags
de64 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
de66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  164
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

de68 : 68              >            pla         ;load status
de69 : 48              >            pha
                       >            cmp_flag $ff
de6a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
de6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de6e : 28              >            plp         ;restore status
                       >
de6f : a50c            >        lda zpt
de71 : c920            >        cmp #1<<5
                       >        trap_ne     ;wrong bits set or cleared
de73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 6
de75 : a9bf            >        lda #$ff-(1<<6)
de77 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
de79 : a900            >            lda #0             ;allow test to change I
                       >
de7b : 48              >            pha         ;use stack to load status
de7c : a9a5            >            lda #$a5     ;precharge accu
de7e : 28              >            plp
                       >
de7f : e70c            >        smb 6,zpt
                       >        tst_a $a5,0
de81 : 08              >            php         ;save flags
de82 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
de84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de86 : 68              >            pla         ;load status
de87 : 48              >            pha
                       >            cmp_flag 0
de88 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
de8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de8c : 28              >            plp         ;restore status
                       >
de8d : a50c            >        lda zpt
de8f : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
de91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de93 : a900            >        lda #0
de95 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
de97 : a9ff            >            lda #$ff             ;allow test to change
                       >
de99 : 48              >            pha         ;use stack to load status
de9a : a95a            >            lda #$5a     ;precharge accu
de9c : 28              >            plp
                       >
de9d : e70c            >        smb 6,zpt
                       >        tst_a $5a,$ff
de9f : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  165
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

dea0 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dea2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dea4 : 68              >            pla         ;load status
dea5 : 48              >            pha
                       >            cmp_flag $ff
dea6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dea8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
deaa : 28              >            plp         ;restore status
                       >
deab : a50c            >        lda zpt
dead : c940            >        cmp #1<<6
                       >        trap_ne     ;wrong bits set or cleared
deaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 7
deb1 : a97f            >        lda #$ff-(1<<7)
deb3 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
deb5 : a900            >            lda #0             ;allow test to change I
                       >
deb7 : 48              >            pha         ;use stack to load status
deb8 : a9a5            >            lda #$a5     ;precharge accu
deba : 28              >            plp
                       >
debb : f70c            >        smb 7,zpt
                       >        tst_a $a5,0
debd : 08              >            php         ;save flags
debe : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
dec0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dec2 : 68              >            pla         ;load status
dec3 : 48              >            pha
                       >            cmp_flag 0
dec4 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
dec6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dec8 : 28              >            plp         ;restore status
                       >
dec9 : a50c            >        lda zpt
decb : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
decd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
decf : a900            >        lda #0
ded1 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
ded3 : a9ff            >            lda #$ff             ;allow test to change
                       >
ded5 : 48              >            pha         ;use stack to load status
ded6 : a95a            >            lda #$5a     ;precharge accu
ded8 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page  166
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
ded9 : f70c            >        smb 7,zpt
                       >        tst_a $5a,$ff
dedb : 08              >            php         ;save flags
dedc : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
dede : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dee0 : 68              >            pla         ;load status
dee1 : 48              >            pha
                       >            cmp_flag $ff
dee2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dee4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dee6 : 28              >            plp         ;restore status
                       >
dee7 : a50c            >        lda zpt
dee9 : c980            >        cmp #1<<7
                       >        trap_ne     ;wrong bits set or cleared
deeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
deed : e0ba                     cpx #$ba
                                trap_ne     ;x altered during test
deef : d0fe            >        bne *           ;failed not equal (non zero)
                        
def1 : c0d0                     cpy #$d0
                                trap_ne     ;y altered during test
def3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
def5 : ba                       tsx
def6 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
def8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
defa : ad0002          >            lda test_case   ;previous test
defd : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
deff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
df01 : a912            >            lda #test_num   ;*** next tests' number
df03 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                            endif
                        
                        ; testing CMP - (zp)
df06 : a2de                     ldx #$de    ;protect x & y
df08 : a0ad                     ldy #$ad
                                set_a $80,0
                       >            load_flag 0
df0a : a900            >            lda #0             ;allow test to change I
                       >
df0c : 48              >            pha         ;use stack to load status
df0d : a980            >            lda #$80     ;precharge accu
df0f : 28              >            plp
                        
df10 : d22c                     cmp (ind1+8)
AS65 Assembler for R6502 [1.42].                                     Page  167
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                tst_a $80,fc
df12 : 08              >            php         ;save flags
df13 : c980            >            cmp #$80     ;test result
                       >            trap_ne
df15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df17 : 68              >            pla         ;load status
df18 : 48              >            pha
                       >            cmp_flag fc
df19 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
df1b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df1d : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
df1e : a900            >            lda #0             ;allow test to change I
                       >
df20 : 48              >            pha         ;use stack to load status
df21 : a97f            >            lda #$7f     ;precharge accu
df23 : 28              >            plp
                        
df24 : d22c                     cmp (ind1+8)
                                tst_a $7f,fzc
df26 : 08              >            php         ;save flags
df27 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
df29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df2b : 68              >            pla         ;load status
df2c : 48              >            pha
                       >            cmp_flag fzc
df2d : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
df2f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df31 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
df32 : a900            >            lda #0             ;allow test to change I
                       >
df34 : 48              >            pha         ;use stack to load status
df35 : a97e            >            lda #$7e     ;precharge accu
df37 : 28              >            plp
                        
df38 : d22c                     cmp (ind1+8)
                                tst_a $7e,fn
df3a : 08              >            php         ;save flags
df3b : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
df3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df3f : 68              >            pla         ;load status
df40 : 48              >            pha
                       >            cmp_flag fn
df41 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  168
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

df43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df45 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
df46 : a9ff            >            lda #$ff             ;allow test to change
                       >
df48 : 48              >            pha         ;use stack to load status
df49 : a980            >            lda #$80     ;precharge accu
df4b : 28              >            plp
                        
df4c : d22c                     cmp (ind1+8)
                                tst_a $80,~fnz
df4e : 08              >            php         ;save flags
df4f : c980            >            cmp #$80     ;test result
                       >            trap_ne
df51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df53 : 68              >            pla         ;load status
df54 : 48              >            pha
                       >            cmp_flag ~fnz
df55 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
df57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df59 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
df5a : a9ff            >            lda #$ff             ;allow test to change
                       >
df5c : 48              >            pha         ;use stack to load status
df5d : a97f            >            lda #$7f     ;precharge accu
df5f : 28              >            plp
                        
df60 : d22c                     cmp (ind1+8)
                                tst_a $7f,~fn
df62 : 08              >            php         ;save flags
df63 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
df65 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df67 : 68              >            pla         ;load status
df68 : 48              >            pha
                       >            cmp_flag ~fn
df69 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
df6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df6d : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
df6e : a9ff            >            lda #$ff             ;allow test to change
                       >
df70 : 48              >            pha         ;use stack to load status
df71 : a97e            >            lda #$7e     ;precharge accu
df73 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  169
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

df74 : d22c                     cmp (ind1+8)
                                tst_a $7e,~fzc
df76 : 08              >            php         ;save flags
df77 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
df79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df7b : 68              >            pla         ;load status
df7c : 48              >            pha
                       >            cmp_flag ~fzc
df7d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
df7f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df81 : 28              >            plp         ;restore status
                        
df82 : e0de                     cpx #$de
                                trap_ne     ;x altered during test
df84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
df86 : c0ad                     cpy #$ad
                                trap_ne     ;y altered during test
df88 : d0fe            >        bne *           ;failed not equal (non zero)
                        
df8a : ba                       tsx
df8b : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
df8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
df8f : ad0002          >            lda test_case   ;previous test
df92 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
df94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
df96 : a913            >            lda #test_num   ;*** next tests' number
df98 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing logical instructions - AND EOR ORA (zp)
df9b : a242                     ldx #$42    ;protect x & y
                        
df9d : a000                     ldy #0      ;AND
df9f : a53a                     lda indAN   ;set indirect address
dfa1 : 850c                     sta zpt
dfa3 : a53b                     lda indAN+1
dfa5 : 850d                     sta zpt+1
dfa7 :                  tand1
                                set_ay  absANa,0
                       >            load_flag 0
dfa7 : a900            >            lda #0             ;allow test to change I
                       >
dfa9 : 48              >            pha         ;use stack to load status
dfaa : b95302          >            lda absANa,y    ;precharge accu
dfad : 28              >            plp
                        
dfae : 320c                     and (zpt)
                                tst_ay  absrlo,absflo,0
dfb0 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  170
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

dfb1 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
dfb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dfb6 : 68              >            pla         ;load status
                       >            eor_flag 0
dfb7 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
dfb9 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
dfbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
dfbe : e60c                     inc zpt
dfc0 : c8                       iny
dfc1 : c004                     cpy #4
dfc3 : d0e2                     bne tand1
dfc5 : 88                       dey
dfc6 : c60c                     dec zpt
dfc8 :                  tand2
                                set_ay  absANa,$ff
                       >            load_flag $ff
dfc8 : a9ff            >            lda #$ff             ;allow test to change
                       >
dfca : 48              >            pha         ;use stack to load status
dfcb : b95302          >            lda absANa,y    ;precharge accu
dfce : 28              >            plp
                        
dfcf : 320c                     and (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
dfd1 : 08              >            php         ;save flags
dfd2 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
dfd5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dfd7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
dfd8 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
dfda : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
dfdd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
dfdf : c60c                     dec zpt
dfe1 : 88                       dey
dfe2 : 10e4                     bpl tand2
                        
dfe4 : a000                     ldy #0      ;EOR
dfe6 : a542                     lda indEO   ;set indirect address
dfe8 : 850c                     sta zpt
dfea : a543                     lda indEO+1
dfec : 850d                     sta zpt+1
dfee :                  teor1
                                set_ay  absEOa,0
                       >            load_flag 0
dfee : a900            >            lda #0             ;allow test to change I
                       >
dff0 : 48              >            pha         ;use stack to load status
dff1 : b95702          >            lda absEOa,y    ;precharge accu
dff4 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  171
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

dff5 : 520c                     eor (zpt)
                                tst_ay  absrlo,absflo,0
dff7 : 08              >            php         ;save flags
dff8 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
dffb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dffd : 68              >            pla         ;load status
                       >            eor_flag 0
dffe : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e000 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
e003 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e005 : e60c                     inc zpt
e007 : c8                       iny
e008 : c004                     cpy #4
e00a : d0e2                     bne teor1
e00c : 88                       dey
e00d : c60c                     dec zpt
e00f :                  teor2
                                set_ay  absEOa,$ff
                       >            load_flag $ff
e00f : a9ff            >            lda #$ff             ;allow test to change
                       >
e011 : 48              >            pha         ;use stack to load status
e012 : b95702          >            lda absEOa,y    ;precharge accu
e015 : 28              >            plp
                        
e016 : 520c                     eor (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
e018 : 08              >            php         ;save flags
e019 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e01c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e01e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e01f : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e021 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
e024 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e026 : c60c                     dec zpt
e028 : 88                       dey
e029 : 10e4                     bpl teor2
                        
e02b : a000                     ldy #0      ;ORA
e02d : a54a                     lda indOR   ;set indirect address
e02f : 850c                     sta zpt
e031 : a54b                     lda indOR+1
e033 : 850d                     sta zpt+1
e035 :                  tora1
                                set_ay  absORa,0
                       >            load_flag 0
e035 : a900            >            lda #0             ;allow test to change I
                       >
e037 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].                                     Page  172
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e038 : b94f02          >            lda absORa,y    ;precharge accu
e03b : 28              >            plp
                        
e03c : 120c                     ora (zpt)
                                tst_ay  absrlo,absflo,0
e03e : 08              >            php         ;save flags
e03f : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e042 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e044 : 68              >            pla         ;load status
                       >            eor_flag 0
e045 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e047 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
e04a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e04c : e60c                     inc zpt
e04e : c8                       iny
e04f : c004                     cpy #4
e051 : d0e2                     bne tora1
e053 : 88                       dey
e054 : c60c                     dec zpt
e056 :                  tora2
                                set_ay  absORa,$ff
                       >            load_flag $ff
e056 : a9ff            >            lda #$ff             ;allow test to change
                       >
e058 : 48              >            pha         ;use stack to load status
e059 : b94f02          >            lda absORa,y    ;precharge accu
e05c : 28              >            plp
                        
e05d : 120c                     ora (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
e05f : 08              >            php         ;save flags
e060 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e063 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e065 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e066 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e068 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
e06b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e06d : c60c                     dec zpt
e06f : 88                       dey
e070 : 10e4                     bpl tora2
                        
e072 : e042                     cpx #$42
                                trap_ne     ;x altered during test
e074 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e076 : ba                       tsx
e077 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
e079 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  173
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                                next_test
e07b : ad0002          >            lda test_case   ;previous test
e07e : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e080 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
e082 : a914            >            lda #test_num   ;*** next tests' number
e084 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if I_flag = 3
e087 : 58                       cli
                            endif
                        
                        ; full binary add/subtract test - (zp) only
                        ; iterates through all combinations of operands and ca
                        ; uses increments/decrements to predict result & resul
e088 : d8                       cld
e089 : a20e                     ldx #ad2        ;for indexed test
e08b : a0ff                     ldy #$ff        ;max range
e08d : a900                     lda #0          ;start with adding zeroes & no
e08f : 850c                     sta adfc        ;carry in - for diag
e091 : 850d                     sta ad1         ;operand 1 - accumulator
e093 : 850e                     sta ad2         ;operand 2 - memory or immedia
e095 : 8d0502                   sta ada2        ;non zp
e098 : 850f                     sta adrl        ;expected result bits 0-7
e09a : 8510                     sta adrh        ;expected result bit 8 (carry 
e09c : a9ff                     lda #$ff        ;complemented operand 2 for su
e09e : 8512                     sta sb2
e0a0 : 8d0602                   sta sba2        ;non zp
e0a3 : a902                     lda #2          ;expected Z-flag
e0a5 : 8511                     sta adrf
e0a7 : 18               tadd    clc             ;test with carry clear
e0a8 : 205fe3                   jsr chkadd
e0ab : e60c                     inc adfc        ;now with carry
e0ad : e60f                     inc adrl        ;result +1
e0af : 08                       php             ;save N & Z from low result
e0b0 : 08                       php
e0b1 : 68                       pla             ;accu holds expected flags
e0b2 : 2982                     and #$82        ;mask N & Z
e0b4 : 28                       plp
e0b5 : d002                     bne tadd1
e0b7 : e610                     inc adrh        ;result bit 8 - carry
e0b9 : 0510             tadd1   ora adrh        ;merge C to expected flags
e0bb : 8511                     sta adrf        ;save expected flags except ov
e0bd : 38                       sec             ;test with carry set
e0be : 205fe3                   jsr chkadd
e0c1 : c60c                     dec adfc        ;same for operand +1 but no ca
e0c3 : e60d                     inc ad1
e0c5 : d0e0                     bne tadd        ;iterate op1
e0c7 : a900                     lda #0          ;preset result to op2 when op1
e0c9 : 8510                     sta adrh
e0cb : ee0502                   inc ada2
e0ce : e60e                     inc ad2
e0d0 : 08                       php             ;save NZ as operand 2 becomes 
e0d1 : 68                       pla
e0d2 : 2982                     and #$82        ;mask N00000Z0
e0d4 : 8511                     sta adrf        ;no need to check carry as we 
e0d6 : c612                     dec sb2         ;complement subtract operand 2
AS65 Assembler for R6502 [1.42].                                     Page  174
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e0d8 : ce0602                   dec sba2
e0db : a50e                     lda ad2
e0dd : 850f                     sta adrl
e0df : d0c6                     bne tadd        ;iterate op2
                        
e0e1 : e00e                     cpx #ad2
                                trap_ne         ;x altered during test
e0e3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e0e5 : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test
e0e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e0e9 : ba                       tsx
e0ea : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
e0ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
e0ee : ad0002          >            lda test_case   ;previous test
e0f1 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e0f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
e0f5 : a915            >            lda #test_num   ;*** next tests' number
e0f7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, the V flag is 
                        ;   although V is declared as beeing valid on the 65C0
                        ;   no use in BCD math. No sign = no overflow!
                        ; iterates through all valid combinations of operands 
                        ; uses increments/decrements to predict result & carry
e0fa : f8                       sed
e0fb : a20e                     ldx #ad2        ;for indexed test
e0fd : a0ff                     ldy #$ff        ;max range
e0ff : a999                     lda #$99        ;start with adding 99 to 99 wi
e101 : 850d                     sta ad1         ;operand 1 - accumulator
e103 : 850e                     sta ad2         ;operand 2 - memory or immedia
e105 : 8d0502                   sta ada2        ;non zp
e108 : 850f                     sta adrl        ;expected result bits 0-7
e10a : a901                     lda #1          ;set carry in & out
e10c : 850c                     sta adfc        ;carry in - for diag
e10e : 8510                     sta adrh        ;expected result bit 8 (carry 
e110 : a981                     lda #$81        ;set N & C (99 + 99 + C = 99 +
e112 : 8511                     sta adrf
e114 : a900                     lda #0          ;complemented operand 2 for su
e116 : 8512                     sta sb2
e118 : 8d0602                   sta sba2        ;non zp
e11b : 38               tdad    sec             ;test with carry set
e11c : 2008e2                   jsr chkdad
e11f : c60c                     dec adfc        ;now with carry clear
e121 : a50f                     lda adrl        ;decimal adjust result
e123 : d008                     bne tdad1       ;skip clear carry & preset res
e125 : c610                     dec adrh
e127 : a999                     lda #$99
e129 : 850f                     sta adrl
e12b : d012                     bne tdad3
AS65 Assembler for R6502 [1.42].                                     Page  175
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e12d : 290f             tdad1   and #$f         ;lower nibble mask
e12f : d00c                     bne tdad2       ;no decimal adjust needed
e131 : c60f                     dec adrl        ;decimal adjust (?0-6)
e133 : c60f                     dec adrl
e135 : c60f                     dec adrl
e137 : c60f                     dec adrl
e139 : c60f                     dec adrl
e13b : c60f                     dec adrl
e13d : c60f             tdad2   dec adrl        ;result -1
e13f : 08               tdad3   php             ;save valid flags
e140 : 68                       pla
e141 : 2982                     and #$82        ;N-----Z-
e143 : 0510                     ora adrh        ;N-----ZC
e145 : 8511                     sta adrf
e147 : 18                       clc             ;test with carry clear
e148 : 2008e2                   jsr chkdad
e14b : e60c                     inc adfc        ;same for operand -1 but with 
e14d : a50d                     lda ad1         ;decimal adjust operand 1
e14f : f015                     beq tdad5       ;iterate operand 2
e151 : 290f                     and #$f         ;lower nibble mask
e153 : d00c                     bne tdad4       ;skip decimal adjust
e155 : c60d                     dec ad1         ;decimal adjust (?0-6)
e157 : c60d                     dec ad1
e159 : c60d                     dec ad1
e15b : c60d                     dec ad1
e15d : c60d                     dec ad1
e15f : c60d                     dec ad1
e161 : c60d             tdad4   dec ad1         ;operand 1 -1
e163 : 4c1be1                   jmp tdad        ;iterate op1
                        
e166 : a999             tdad5   lda #$99        ;precharge op1 max
e168 : 850d                     sta ad1
e16a : a50e                     lda ad2         ;decimal adjust operand 2
e16c : f039                     beq tdad7       ;end of iteration
e16e : 290f                     and #$f         ;lower nibble mask
e170 : d018                     bne tdad6       ;skip decimal adjust
e172 : c60e                     dec ad2         ;decimal adjust (?0-6)
e174 : c60e                     dec ad2
e176 : c60e                     dec ad2
e178 : c60e                     dec ad2
e17a : c60e                     dec ad2
e17c : c60e                     dec ad2
e17e : e612                     inc sb2         ;complemented decimal adjust f
e180 : e612                     inc sb2
e182 : e612                     inc sb2
e184 : e612                     inc sb2
e186 : e612                     inc sb2
e188 : e612                     inc sb2
e18a : c60e             tdad6   dec ad2         ;operand 2 -1
e18c : e612                     inc sb2         ;complemented operand for subt
e18e : a512                     lda sb2
e190 : 8d0602                   sta sba2        ;copy as non zp operand
e193 : a50e                     lda ad2
e195 : 8d0502                   sta ada2        ;copy as non zp operand
e198 : 850f                     sta adrl        ;new result since op1+carry=00
e19a : 08                       php             ;save flags
e19b : 68                       pla
e19c : 2982                     and #$82        ;N-----Z-
e19e : 0901                     ora #1          ;N-----ZC
e1a0 : 8511                     sta adrf
e1a2 : e610                     inc adrh        ;result carry
e1a4 : 4c1be1                   jmp tdad        ;iterate op2
AS65 Assembler for R6502 [1.42].                                     Page  176
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
e1a7 : e00e             tdad7   cpx #ad2
                                trap_ne         ;x altered during test
e1a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e1ab : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test
e1ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
e1af : ba                       tsx
e1b0 : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
e1b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e1b4 : d8                       cld
                        
e1b5 : ad0002                   lda test_case
e1b8 : c915                     cmp #test_num
                                trap_ne         ;previous test is out of seque
e1ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
e1bc : a9f0                     lda #$f0        ;mark opcode testing complete
e1be : 8d0002                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has alter
                        ;   designated write areas.
                                check_ram
e1c1 : d8              >            cld
e1c2 : a900            >            lda #0
e1c4 : 850c            >            sta zpt         ;set low byte of indirect 
e1c6 : 850f            >            sta zpt+3       ;checksum high byte
e1c8 : a20b            >            ldx #11         ;reset modifiable RAM
e1ca : 9df902          >ccs11983      sta jxi_tab,x   ;JMP indirect page cross
e1cd : ca              >            dex
e1ce : 10fa            >            bpl ccs11983
e1d0 : 18              >            clc
e1d1 : a209            >            ldx #zp_bss-zero_page ;zeropage - write te
e1d3 : 750a            >ccs31983      adc zero_page,x
e1d5 : 9003            >            bcc ccs21983
e1d7 : e60f            >            inc zpt+3       ;carry to high byte
e1d9 : 18              >            clc
e1da : e8              >ccs21983      inx
e1db : d0f6            >            bne ccs31983
e1dd : a202            >            ldx #hi(abs1)   ;set high byte of indirect
e1df : 860d            >            stx zpt+1
e1e1 : a010            >            ldy #lo(abs1)   ;data after write & execut
e1e3 : 710c            >ccs51983      adc (zpt),y
e1e5 : 9003            >            bcc ccs41983
e1e7 : e60f            >            inc zpt+3       ;carry to high byte
e1e9 : 18              >            clc
e1ea : c8              >ccs41983      iny
e1eb : d0f6            >            bne ccs51983
e1ed : e8              >            inx             ;advance RAM high address
e1ee : 860d            >            stx zpt+1
e1f0 : e010            >            cpx #ram_top
e1f2 : d0ef            >            bne ccs51983
e1f4 : 850e            >            sta zpt+2       ;checksum low is
e1f6 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
e1f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  177
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e1fb : a50f            >            lda zpt+3       ;checksum high is
e1fd : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
e200 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the 
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other back
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S **************************************
                        ; -------------
                                success         ;if you get here everything we
e202 : 4c02e2          >        jmp *           ;test passed, no errors
                        
                        ; -------------
                        ; S U C C E S S **************************************
e205 : 4c00c0                   jmp start       ;run again
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, V flag is igno
                        ; iterates through all valid combinations of operands 
                        ; uses increments/decrements to predict result & carry
e208 :                  chkdad
                        ; decimal ADC / SBC zp
e208 : 08                       php             ;save carry for subtract
e209 : a50d                     lda ad1
e20b : 650e                     adc ad2         ;perform add
e20d : 08                       php
e20e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e210 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e212 : 68                       pla             ;check flags
e213 : 2983                     and #$83        ;mask N-----ZC
e215 : c511                     cmp adrf
                                trap_ne         ;bad flags
e217 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e219 : 28                       plp
e21a : 08                       php             ;save carry for next add
e21b : a50d                     lda ad1
e21d : e512                     sbc sb2         ;perform subtract
e21f : 08                       php
e220 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e222 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e224 : 68                       pla             ;check flags
e225 : 2983                     and #$83        ;mask N-----ZC
e227 : c511                     cmp adrf
                                trap_ne         ;bad flags
e229 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e22b : 28                       plp
                        ; decimal ADC / SBC abs
e22c : 08                       php             ;save carry for subtract
e22d : a50d                     lda ad1
AS65 Assembler for R6502 [1.42].                                     Page  178
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e22f : 6d0502                   adc ada2        ;perform add
e232 : 08                       php
e233 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e235 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e237 : 68                       pla             ;check flags
e238 : 2983                     and #$83        ;mask N-----ZC
e23a : c511                     cmp adrf
                                trap_ne         ;bad flags
e23c : d0fe            >        bne *           ;failed not equal (non zero)
                        
e23e : 28                       plp
e23f : 08                       php             ;save carry for next add
e240 : a50d                     lda ad1
e242 : ed0602                   sbc sba2        ;perform subtract
e245 : 08                       php
e246 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e248 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e24a : 68                       pla             ;check flags
e24b : 2983                     and #$83        ;mask N-----ZC
e24d : c511                     cmp adrf
                                trap_ne         ;bad flags
e24f : d0fe            >        bne *           ;failed not equal (non zero)
                        
e251 : 28                       plp
                        ; decimal ADC / SBC #
e252 : 08                       php             ;save carry for subtract
e253 : a50e                     lda ad2
e255 : 8d0b02                   sta ex_adci+1   ;set ADC # operand
e258 : a50d                     lda ad1
e25a : 200a02                   jsr ex_adci     ;execute ADC # in RAM
e25d : 08                       php
e25e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e260 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e262 : 68                       pla             ;check flags
e263 : 2983                     and #$83        ;mask N-----ZC
e265 : c511                     cmp adrf
                                trap_ne         ;bad flags
e267 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e269 : 28                       plp
e26a : 08                       php             ;save carry for next add
e26b : a512                     lda sb2
e26d : 8d0e02                   sta ex_sbci+1   ;set SBC # operand
e270 : a50d                     lda ad1
e272 : 200d02                   jsr ex_sbci     ;execute SBC # in RAM
e275 : 08                       php
e276 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e278 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e27a : 68                       pla             ;check flags
e27b : 2983                     and #$83        ;mask N-----ZC
e27d : c511                     cmp adrf
                                trap_ne         ;bad flags
e27f : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  179
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e281 : 28                       plp
                        ; decimal ADC / SBC zp,x
e282 : 08                       php             ;save carry for subtract
e283 : a50d                     lda ad1
e285 : 7500                     adc 0,x         ;perform add
e287 : 08                       php
e288 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e28a : d0fe            >        bne *           ;failed not equal (non zero)
                        
e28c : 68                       pla             ;check flags
e28d : 2983                     and #$83        ;mask N-----ZC
e28f : c511                     cmp adrf
                                trap_ne         ;bad flags
e291 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e293 : 28                       plp
e294 : 08                       php             ;save carry for next add
e295 : a50d                     lda ad1
e297 : f504                     sbc sb2-ad2,x   ;perform subtract
e299 : 08                       php
e29a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e29c : d0fe            >        bne *           ;failed not equal (non zero)
                        
e29e : 68                       pla             ;check flags
e29f : 2983                     and #$83        ;mask N-----ZC
e2a1 : c511                     cmp adrf
                                trap_ne         ;bad flags
e2a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2a5 : 28                       plp
                        ; decimal ADC / SBC abs,x
e2a6 : 08                       php             ;save carry for subtract
e2a7 : a50d                     lda ad1
e2a9 : 7df701                   adc ada2-ad2,x  ;perform add
e2ac : 08                       php
e2ad : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e2af : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2b1 : 68                       pla             ;check flags
e2b2 : 2983                     and #$83        ;mask N-----ZC
e2b4 : c511                     cmp adrf
                                trap_ne         ;bad flags
e2b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2b8 : 28                       plp
e2b9 : 08                       php             ;save carry for next add
e2ba : a50d                     lda ad1
e2bc : fdf801                   sbc sba2-ad2,x  ;perform subtract
e2bf : 08                       php
e2c0 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e2c2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2c4 : 68                       pla             ;check flags
e2c5 : 2983                     and #$83        ;mask N-----ZC
e2c7 : c511                     cmp adrf
                                trap_ne         ;bad flags
e2c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  180
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e2cb : 28                       plp
                        ; decimal ADC / SBC abs,y
e2cc : 08                       php             ;save carry for subtract
e2cd : a50d                     lda ad1
e2cf : 790601                   adc ada2-$ff,y  ;perform add
e2d2 : 08                       php
e2d3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e2d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2d7 : 68                       pla             ;check flags
e2d8 : 2983                     and #$83        ;mask N-----ZC
e2da : c511                     cmp adrf
                                trap_ne         ;bad flags
e2dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2de : 28                       plp
e2df : 08                       php             ;save carry for next add
e2e0 : a50d                     lda ad1
e2e2 : f90701                   sbc sba2-$ff,y  ;perform subtract
e2e5 : 08                       php
e2e6 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e2e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2ea : 68                       pla             ;check flags
e2eb : 2983                     and #$83        ;mask N-----ZC
e2ed : c511                     cmp adrf
                                trap_ne         ;bad flags
e2ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2f1 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
e2f2 : 08                       php             ;save carry for subtract
e2f3 : a50d                     lda ad1
e2f5 : 6144                     adc (lo adi2-ad2,x) ;perform add
e2f7 : 08                       php
e2f8 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e2fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
e2fc : 68                       pla             ;check flags
e2fd : 2983                     and #$83        ;mask N-----ZC
e2ff : c511                     cmp adrf
                                trap_ne         ;bad flags
e301 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e303 : 28                       plp
e304 : 08                       php             ;save carry for next add
e305 : a50d                     lda ad1
e307 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
e309 : 08                       php
e30a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e30c : d0fe            >        bne *           ;failed not equal (non zero)
                        
e30e : 68                       pla             ;check flags
e30f : 2983                     and #$83        ;mask N-----ZC
e311 : c511                     cmp adrf
                                trap_ne         ;bad flags
e313 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  181
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e315 : 28                       plp
                        ; decimal ADC / SBC (abs),y
e316 : 08                       php             ;save carry for subtract
e317 : a50d                     lda ad1
e319 : 7156                     adc (adiy2),y   ;perform add
e31b : 08                       php
e31c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e31e : d0fe            >        bne *           ;failed not equal (non zero)
                        
e320 : 68                       pla             ;check flags
e321 : 2983                     and #$83        ;mask N-----ZC
e323 : c511                     cmp adrf
                                trap_ne         ;bad flags
e325 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e327 : 28                       plp
e328 : 08                       php             ;save carry for next add
e329 : a50d                     lda ad1
e32b : f158                     sbc (sbiy2),y   ;perform subtract
e32d : 08                       php
e32e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e330 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e332 : 68                       pla             ;check flags
e333 : 2983                     and #$83        ;mask N-----ZC
e335 : c511                     cmp adrf
                                trap_ne         ;bad flags
e337 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e339 : 28                       plp
                        ; decimal ADC / SBC (zp)
e33a : 08                       php             ;save carry for subtract
e33b : a50d                     lda ad1
e33d : 7252                     adc (adi2)      ;perform add
e33f : 08                       php
e340 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e342 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e344 : 68                       pla             ;check flags
e345 : 2983                     and #$83        ;mask N-----ZC
e347 : c511                     cmp adrf
                                trap_ne         ;bad flags
e349 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e34b : 28                       plp
e34c : 08                       php             ;save carry for next add
e34d : a50d                     lda ad1
e34f : f254                     sbc (sbi2)      ;perform subtract
e351 : 08                       php
e352 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e354 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e356 : 68                       pla             ;check flags
e357 : 2983                     and #$83        ;mask N-----ZC
e359 : c511                     cmp adrf
                                trap_ne         ;bad flags
e35b : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  182
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e35d : 28                       plp
e35e : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and ca
                        ; uses increments/decrements to predict result & resul
e35f : a511             chkadd  lda adrf        ;add V-flag if overflow
e361 : 2983                     and #$83        ;keep N-----ZC / clear V
e363 : 48                       pha
e364 : a50d                     lda ad1         ;test sign unequal between ope
e366 : 450e                     eor ad2
e368 : 300a                     bmi ckad1       ;no overflow possible - operan
e36a : a50d                     lda ad1         ;test sign equal between opera
e36c : 450f                     eor adrl
e36e : 1004                     bpl ckad1       ;no overflow occured - operand
e370 : 68                       pla
e371 : 0940                     ora #$40        ;set V
e373 : 48                       pha
e374 : 68               ckad1   pla
e375 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC (zp)
e377 : 08                       php             ;save carry for subtract
e378 : a50d                     lda ad1
e37a : 7252                     adc (adi2)      ;perform add
e37c : 08                       php
e37d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e37f : d0fe            >        bne *           ;failed not equal (non zero)
                        
e381 : 68                       pla             ;check flags
e382 : 29c3                     and #$c3        ;mask NV----ZC
e384 : c511                     cmp adrf
                                trap_ne         ;bad flags
e386 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e388 : 28                       plp
e389 : 08                       php             ;save carry for next add
e38a : a50d                     lda ad1
e38c : f254                     sbc (sbi2)      ;perform subtract
e38e : 08                       php
e38f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
e391 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e393 : 68                       pla             ;check flags
e394 : 29c3                     and #$c3        ;mask NV----ZC
e396 : c511                     cmp adrf
                                trap_ne         ;bad flags
e398 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e39a : 28                       plp
e39b : 60                       rts
                        
                        ; target for the jump indirect test
e39c : a2e3             ji_adr  dw test_ji
e39e : 52d3                     dw ji_ret
                        
e3a0 : 88                       dey
e3a1 : 88                       dey
e3a2 :                  test_ji
e3a2 : 08                       php             ;either SP or Y count will fai
e3a3 : 88                       dey
AS65 Assembler for R6502 [1.42].                                     Page  183
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e3a4 : 88                       dey
e3a5 : 88                       dey
e3a6 : 28                       plp
                                trap_cs         ;flags loaded?
e3a7 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
e3a9 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
e3ab : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
e3ad : f0fe            >        beq *           ;failed equal (zero)
                        
e3af : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
e3b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e3b3 : e04e                     cpx #'N'
                                trap_ne
e3b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e3b7 : c041                     cpy #('D'-3)
                                trap_ne
e3b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e3bb : 48                       pha             ;save a,x
e3bc : 8a                       txa
e3bd : 48                       pha
e3be : ba                       tsx
e3bf : e0fd                     cpx #$fd        ;check SP
                                trap_ne
e3c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e3c3 : 68                       pla             ;restore x
e3c4 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
e3c5 : a9ff            >            lda #$ff             ;allow test to change
                       >
e3c7 : 48              >            pha         ;use stack to load status
e3c8 : 28              >            plp
                        
e3c9 : 68                       pla             ;restore a
e3ca : e8                       inx             ;return registers with modific
e3cb : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
e3cd : 6cff02                   jmp (ji_tab+2)
e3d0 : ea                       nop
e3d1 : ea                       nop
                                trap            ;runover protection
e3d2 : 4cd2e3          >        jmp *           ;failed anyway
                        
e3d5 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                        ; target for the jump indirect test
e3d8 : 1fe4             jxi_adr dw  trap_ind
e3da : 1fe4                     dw  trap_ind
e3dc : e6e3                     dw  test_jxi    ;+4
e3de : 9ed3                     dw  jxi_ret     ;+6
e3e0 : 1fe4                     dw  trap_ind
e3e2 : 1fe4                     dw  trap_ind
AS65 Assembler for R6502 [1.42].                                     Page  184
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
e3e4 : 88                       dey
e3e5 : 88                       dey
e3e6 :                  test_jxi
e3e6 : 08                       php             ;either SP or Y count will fai
e3e7 : 88                       dey
e3e8 : 88                       dey
e3e9 : 88                       dey
e3ea : 28                       plp
                                trap_cs         ;flags loaded?
e3eb : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
e3ed : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
e3ef : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
e3f1 : f0fe            >        beq *           ;failed equal (zero)
                        
e3f3 : c958                     cmp #'X'        ;registers loaded?
                                trap_ne
e3f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e3f7 : e004                     cpx #4
                                trap_ne
e3f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e3fb : c046                     cpy #('I'-3)
                                trap_ne
e3fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
e3ff : 48                       pha             ;save a,x
e400 : 8a                       txa
e401 : 48                       pha
e402 : ba                       tsx
e403 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
e405 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e407 : 68                       pla             ;restore x
e408 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
e409 : a9ff            >            lda #$ff             ;allow test to change
                       >
e40b : 48              >            pha         ;use stack to load status
e40c : 28              >            plp
                        
e40d : 68                       pla             ;restore a
e40e : e8                       inx             ;return registers with modific
e40f : e8                       inx
e410 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
e412 : 7cf902                   jmp (jxi_tab,x)
e415 : ea                       nop
e416 : ea                       nop
                                trap            ;runover protection
e417 : 4c17e4          >        jmp *           ;failed anyway
                        
e41a : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
AS65 Assembler for R6502 [1.42].                                     Page  185
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        ; JMP (abs,x) with bad x
e41d : ea                       nop
e41e : ea                       nop
e41f :                  trap_ind
e41f : ea                       nop
e420 : ea                       nop
                                trap            ;near miss indexed indirect ju
e421 : 4c21e4          >        jmp *           ;failed anyway
                        
e424 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET
e427 :                  nmi_trap
                                trap            ;check stack for conditions at
e427 : 4c27e4          >        jmp *           ;failed anyway
                        
e42a : 4c00c0                   jmp start       ;catastrophic error - cannot c
e42d :                  res_trap
                                trap            ;unexpected RESET
e42d : 4c2de4          >        jmp *           ;failed anyway
                        
e430 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
e433 : 88                       dey
e434 : 88                       dey
e435 :                  irq_trap                ;BRK test or unextpected BRK o
e435 : 08                       php             ;either SP or Y count will fai
e436 : 88                       dey
e437 : 88                       dey
e438 : 88                       dey
                                ;next traps could be caused by unexpected BRK 
                                ;check stack for BREAK and originating locatio
                                ;possible jump/branch into weeds (uninitialize
e439 : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
e43b : f042                     beq break2
e43d : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
e43f : d0fe            >        bne *           ;failed not equal (non zero)
                        
e441 : e052                     cpx #'R'
                                trap_ne
e443 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e445 : c048                     cpy #'K'-3
                                trap_ne
e447 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e449 : 850a                     sta irq_a       ;save registers during break t
e44b : 860b                     stx irq_x
e44d : ba                       tsx             ;test break on stack
e44e : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & 
e451 : c930            >            cmp #(0      |fao)&m8    ;expected flags +
                        
                                trap_ne         ;possible no break flag on sta
e453 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e455 : 68                       pla
                                cmp_flag intdis ;should have added interrupt d
e456 : c934            >            cmp #(intdis |fao)&m8    ;expected flags +
                        
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  186
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e458 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e45a : ba                       tsx
e45b : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
e45d : d0fe            >        bne *           ;failed not equal (non zero)
                        
e45f : adff01                   lda $1ff        ;propper return on stack
e462 : c9d3                     cmp #hi(brk_ret0)
                                trap_ne
e464 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e466 : adfe01                   lda $1fe
e469 : c9f0                     cmp #lo(brk_ret0)
                                trap_ne
e46b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
e46d : a9ff            >            lda #$ff             ;allow test to change
                        
e46f : 48                       pha
e470 : a60b                     ldx irq_x
e472 : e8                       inx             ;return registers with modific
e473 : a50a                     lda irq_a
e475 : 49aa                     eor #$aa
e477 : 28                       plp             ;N=1, V=1, Z=1, C=1 but origin
e478 : 40                       rti
                                trap            ;runover protection
e479 : 4c79e4          >        jmp *           ;failed anyway
                        
e47c : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
e47f :                  break2                  ;BRK pass 2
e47f : e0ad                     cpx #$ff-'R'
                                trap_ne
e481 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e483 : c0b1                     cpy #$ff-'K'-3
                                trap_ne
e485 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e487 : 850a                     sta irq_a       ;save registers during break t
e489 : 860b                     stx irq_x
e48b : ba                       tsx             ;test break on stack
e48c : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
e48f : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags +
                        
                                trap_ne         ;possibly no break flag on sta
e491 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e493 : 68                       pla
                                cmp_flag $ff-decmode ;actual passed flags shou
e494 : c9f7            >            cmp #($ff-decmode |fao)&m8    ;expected fl
                        
                                trap_ne
e496 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e498 : ba                       tsx
e499 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
e49b : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  187
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
e49d : adff01                   lda $1ff        ;propper return on stack
e4a0 : c9d4                     cmp #hi(brk_ret1)
                                trap_ne
e4a2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
e4a4 : adfe01                   lda $1fe
e4a7 : c916                     cmp #lo(brk_ret1)
                                trap_ne
e4a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
e4ab : a904            >            lda #intdis             ;allow test to cha
                        
e4ad : 48                       pha
e4ae : a60b                     ldx irq_x
e4b0 : e8                       inx             ;return registers with modific
e4b1 : a50a                     lda irq_a
e4b3 : 49aa                     eor #$aa
e4b5 : 28                       plp             ;N=0, V=0, Z=0, C=0 but origin
e4b6 : 40                       rti
                                trap            ;runover protection
e4b7 : 4cb7e4          >        jmp *           ;failed anyway
                        
e4ba : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                            if report = 1
                                include "report.i65"
                            endif
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
e4bd :                  zp_init
e4bd : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT
e4c1 : 7f               zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
e4c2 : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
e4c6 : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
e4ca : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
e4ce : 1002             ind1_   dw  abs1            ;indirect pointer to patte
e4d0 : 1102                     dw  abs1+1
e4d2 : 1202                     dw  abs1+2
e4d4 : 1302                     dw  abs1+3
e4d6 : 1402                     dw  abs7f
e4d8 : 1801             inw1_   dw  abs1-$f8        ;indirect pointer for wrap
e4da : 0502             indt_   dw  abst            ;indirect pointer to store
e4dc : 0602                     dw  abst+1
e4de : 0702                     dw  abst+2
e4e0 : 0802                     dw  abst+3
e4e2 : 0d01             inwt_   dw  abst-$f8        ;indirect pointer for wrap
e4e4 : 4702             indAN_  dw  absAN           ;indirect pointer to AND p
e4e6 : 4802                     dw  absAN+1
e4e8 : 4902                     dw  absAN+2
e4ea : 4a02                     dw  absAN+3
e4ec : 4b02             indEO_  dw  absEO           ;indirect pointer to EOR p
e4ee : 4c02                     dw  absEO+1
e4f0 : 4d02                     dw  absEO+2
e4f2 : 4e02                     dw  absEO+3
e4f4 : 4302             indOR_  dw  absOR           ;indirect pointer to OR pa
e4f6 : 4402                     dw  absOR+1
e4f8 : 4502                     dw  absOR+2
AS65 Assembler for R6502 [1.42].                                     Page  188
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

e4fa : 4602                     dw  absOR+3
                        ;add/subtract indirect pointers
e4fc : 0502             adi2_   dw  ada2            ;indirect pointer to opera
e4fe : 0602             sbi2_   dw  sba2            ;indirect pointer to compl
e500 : 0601             adiy2_  dw  ada2-$ff        ;with offset for indirect 
e502 : 0701             sbiy2_  dw  sba2-$ff
e504 :                  zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and 
                            endif
e504 :                  data_init
e504 : 6900             ex_adc_ adc #0              ;execute immediate opcodes
e506 : 60                       rts
e507 : e900             ex_sbc_ sbc #0              ;execute immediate opcodes
e509 : 60                       rts
e50a : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT
e50e : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
e50f : 80800002         fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
e513 :                  rASL_                       ;expected result ASL & ROL
e513 : 86048200         rROL_   db  $86,$04,$82,0   ; "
e517 : 87058301         rROLc_  db  $87,$05,$83,1   ;expected result ROL +carr
e51b :                  rLSR_                       ;expected result LSR & ROR
e51b : 61412000         rROR_   db  $61,$41,$20,0   ; "
e51f : e1c1a080         rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carr
e523 :                  fASL_                       ;expected flags for shifts
e523 : 81018002         fROL_   db  fnc,fc,fn,fz    ;no carry in
e527 : 81018000         fROLc_  db  fnc,fc,fn,0     ;carry in
e52b :                  fLSR_
e52b : 01000102         fROR_   db  fc,0,fc,fz      ;no carry in
e52f : 81808180         fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
e533 : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/D
e538 : 0080800200       fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DE
                        ;logical memory operand
e53d : 001f7180         absOR_  db  0,$1f,$71,$80   ;test pattern for OR
e541 : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
e545 : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
e549 : 00f11f00         absORa_ db  0,$f1,$1f,0     ;test pattern for OR
e54d : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
e551 : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
e555 : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
e559 : 02800080         absflo_ db  fz,fn,0,fn
e55d :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and 
                            endif
                        
e55d :                  vec_init
e55d : 27e4                     dw  nmi_trap
e55f : 2de4                     dw  res_trap
e561 : 35e4                     dw  irq_trap
fffa =                  vec_bss equ $fffa
                            endif                   ;end of RAM init data
                        
                        ; code at end of image due to the need to add blank sp
                            if ($ff & (ji_ret - * - 2)) < ($ff & (jxi_ret - * 
AS65 Assembler for R6502 [1.42].                                     Page  189
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        ; JMP (abs) when $xxff and $xx00 are from same page
                                ds  lo(ji_ret - * - 2)
                                nop
                                nop
                        ji_px   nop             ;low address byte matched with
                                nop
                                trap            ;jmp indirect page cross bug
                        
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
                                ds  lo(jxi_ret - * - 2)
                                nop
                                nop
                        jxi_px  nop             ;low address byte matched with
                                nop
                                trap            ;jmp indexed indirect page cro
                            else
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
e563 : 00000000000000..         ds  lo(jxi_ret - * - 2)
e59c : ea                       nop
e59d : ea                       nop
e59e : ea               jxi_px  nop             ;low address byte matched with
e59f : ea                       nop
                                trap            ;jmp indexed indirect page cro
e5a0 : 4ca0e5          >        jmp *           ;failed anyway
                        
                        
                        ; JMP (abs) when $xxff and $xx00 are from same page
e5a3 : 00000000000000..         ds  lo(ji_ret - * - 2)
e650 : ea                       nop
e651 : ea                       nop
e652 : ea               ji_px   nop             ;low address byte matched with
e653 : ea                       nop
                                trap            ;jmp indirect page cross bug
e654 : 4c54e6          >        jmp *           ;failed anyway
                        
                            endif
                        
                            if (ROM_vectors = 1)
fffa =                          org $fffa       ;vectors
fffa : 27e4                     dw  nmi_trap
fffc : 00c0                     dw  start
fffe : 35e4                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
Program start address is at $c000 (49152).
