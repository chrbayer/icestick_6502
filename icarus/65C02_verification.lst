AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

2882 lines read, no errors in pass 1.
                        ;
                        ; 6 5 C 0 2   E X T E N D E D   O P C O D E S   T E S 
                        ;
                        ; Copyright (C) 2013-2017  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute 
                        ; it under the terms of the GNU General Public License
                        ; the Free Software Foundation, either version 3 of th
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will
                        ; but WITHOUT ANY WARRANTY; without even the implied w
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General P
                        ; along with this program.  If not, see <http://www.gn
                        
                        
                        ; This program is designed to test all additional 65C0
                        ; modes and functionality not available in the NMOS ve
                        ; The 6502_functional_test is a prerequisite to this t
                        ; NMI, IRQ, STP & WAI are covered in the 6502_interrup
                        ;
                        ; version 04-dec-2017
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consul
                        ; command line switches: -l -m -s2 -w -x -h0
                        ;                         |  |  |   |  |  no page head
                        ;                         |  |  |   |  65C02 extension
                        ;                         |  |  |   wide listing (133 
                        ;                         |  |  write intel hex file i
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to 
                        ; To run load intel hex image with a load command, tha
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successf
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions wi
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapp
                        ; Tests documented behavior of the original 65C02 only
                        ; Decimal ops will only be tested with valid BCD opera
                        ; be ignored as it is absolutely useless in decimal mo
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you
                        ;   immediately preceeding code for the instruction to
                        ;   tested first, flags are checked second by pushing 
                        ;   pulling them to the accumulator after the result w
                        ;   flags are no longer valid for the tested instructi
                        ;     If the tested instruction was indexed, the relev
                        ;   also be checked. Opposed to the flags, X and Y reg
                        ;
                        ; versions:
                        ;   19-jul-2013  1st version distributed for testing
                        ;   23-jul-2013  fixed BRA out of range due to larger 
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        ;                added RAM integrity check
                        ;   16-aug-2013  added error report to standard output
                        ;   23-aug-2015  change revoked
                        ;   24-aug-2015  all self modifying immediate opcodes 
                        ;   28-aug-2015  fixed decimal adc/sbc immediate only 
                        ;   09-feb-2017  fixed RMB/SMB tested when they should
                        ;   04-dec-2017  fixed BRK not tested for actually goi
                        ;                added option to skip the remainder of
                        ;                in report.i65
                        ;                added skip override to undefined opco
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be
                        ;as a consequence BRK can not be tested but will be em
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load di
                        ;loading directly is preferred but may not be supporte
                        ;0 produces only consecutive object code, 1 is not sui
0000 =                  load_data_direct = 0
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2
                        ;change) 2 requires extra code and is not recommended.
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used 
                        ;zero_page memory start address, $4e (78) consecutive 
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a
                        
                        ;data_segment memory start address, $63 (99) consecuti
                        ; + 12 Bytes at data_segment + $f9 (JMP indirect page 
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUS
                            endif
                        
                        ;code_segment memory start address, 10kB of consecutiv
                        ;                                   add 1 kB if I_flag
c000 =                  code_segment = $c000
                        
                        ;added WDC only opcodes WAI & STP (0=test as NOPs, >0=
0000 =                  wdc_op = 0
                        
                        ;added Rockwell & WDC opcodes BBR, BBS, RMB & SMB
                        ;(0=test as NOPs, 1=full test, >1=no test)
0001 =                  rkwl_wdc_op = 1
                        
                        ;skip testing all undefined opcodes override
                        ;0=test as NOP, >0=skip
0001 =                  skip_nop = 1
                        
                        ;report errors through I/O channel (0=use standard sel
                        ;report.i65 as I/O channel, add 3 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM w
                        ;set lowest non RAM or RAM mirror address page (-1=dis
                        ;leave disabled if a monitor, OS or background interru
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0010 =                  ram_top = $10
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modifi
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from
                        ; putting larger portions of code (more than 3 bytes) 
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets i
                        ; therefore a RTS inside the success macro is not poss
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets i
                        ; therefore a RTS inside the success macro is not poss
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0030 =                  fao     equ break+reserv    ;bits always on after PHP,
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disabl
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt di
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compa
                        ;masking of always on bits after PHP or BRK (unused & 
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrup
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enab
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interru
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disa
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    cmp #(\1|fao)&m8i   ;expected flags + alwa
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    eor #(\1&m8i|fao)   ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change 
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + alwa
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processo
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & im
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & im
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & imme
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate 
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & 
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & 
                        tst_stat    macro       ;testing flags in the processo
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_a       macro       ;testing result in accu & flag
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_as      macro       ;testing result in accu & flag
                                    pha
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    pla
                                    endm
                        
                        tst_x       macro       ;testing result in x index & f
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & f
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                        tst_ax      macro       ;indexed testing result in acc
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in acc
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_z       macro       ;indexed testing result in zp 
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flag
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in mem
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & fla
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    trap_ne
                                    endm
                        
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has alter
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as c
                                if ram_top > -1
                        check_ram   macro
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect 
                                    sta zpt+3       ;checksum high byte
                                    ldx #11         ;reset modifiable RAM
                        ccs1\?      sta jxi_tab,x   ;JMP indirect page cross a
                                    dex
                                    bpl ccs1\?
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write te
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execut
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't ju
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altere
                                    endm
                        
                            if load_data_direct = 1
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                data
                            else
                                bss                 ;uninitialized segment, co
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a =                  irq_a   ds  1               ;a register
000b =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c =                  zpt                         ;5 bytes store/modify test
                        ;add/subtract operand generation and result/flag predi
000c =                  adfc    ds  1               ;carry flag before op
000d =                  ad1     ds  1               ;operand 1 - accumulator
000e =                  ad2     ds  1               ;operand 2 - memory / imme
000f =                  adrl    ds  1               ;expected result bits 0-7
0010 =                  adrh    ds  1               ;expected result bit 8 (ca
0011 =                  adrf    ds  1               ;expected flags NV0000ZC (
0012 =                  sb2     ds  1               ;operand 2 complemented fo
0013 =                  zp_bss
0013 =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT
0017 =                  zp7f    db  $7f             ;test pattern for compare
                        ;logical zeropage operands
0018 =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001c =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0020 =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0024 =                  ind1    dw  abs1            ;indirect pointer to patte
0026 =                          dw  abs1+1
0028 =                          dw  abs1+2
002a =                          dw  abs1+3
002c =                          dw  abs7f
002e =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap
0030 =                  indt    dw  abst            ;indirect pointer to store
0032 =                          dw  abst+1
0034 =                          dw  abst+2
0036 =                          dw  abst+3
0038 =                  inwt    dw  abst-$f8        ;indirect pointer for wrap
003a =                  indAN   dw  absAN           ;indirect pointer to AND p
003c =                          dw  absAN+1
003e =                          dw  absAN+2
0040 =                          dw  absAN+3
0042 =                  indEO   dw  absEO           ;indirect pointer to EOR p
0044 =                          dw  absEO+1
0046 =                          dw  absEO+2
0048 =                          dw  absEO+3
004a =                  indOR   dw  absOR           ;indirect pointer to OR pa
004c =                          dw  absOR+1
004e =                          dw  absOR+2
0050 =                          dw  absOR+3
                        ;add/subtract indirect pointers
0052 =                  adi2    dw  ada2            ;indirect pointer to opera
0054 =                  sbi2    dw  sba2            ;indirect pointer to compl
0056 =                  adiy2   dw  ada2-$ff        ;with offset for indirect 
0058 =                  sbiy2   dw  sba2-$ff
005a =                  zp_bss_end
                        
0200 =                          org data_segment
0200 =                  test_case   ds  1           ;current test number
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0201 =                  ram_chksm   ds  2           ;checksum for RAM integrit
0203 =                  pg_x    ds  2               ;high JMP indirect address
                        ;add/subtract operand copy - abs tests write area
0205 =                  abst                        ;5 bytes store/modify test
0205 =                  ada2    ds  1               ;operand 2
0206 =                  sba2    ds  1               ;operand 2 complemented fo
0207 =                          ds  3               ;fill remaining bytes
020a =                  data_bss
                            if load_data_direct = 1
                        ex_adci adc #0              ;execute immediate opcodes
                                rts
                        ex_sbci sbc #0              ;execute immediate opcodes
                                rts
                            else
020a =                  ex_adci ds  3
020d =                  ex_sbci ds  3
                            endif
0210 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT
0214 =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
0215 =                  fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0219 =                  rASL                        ;expected result ASL & ROL
0219 =                  rROL    db  $86,$04,$82,0   ; "
021d =                  rROLc   db  $87,$05,$83,1   ;expected result ROL +carr
0221 =                  rLSR                        ;expected result LSR & ROR
0221 =                  rROR    db  $61,$41,$20,0   ; "
0225 =                  rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carr
0229 =                  fASL                        ;expected flags for shifts
0229 =                  fROL    db  fnc,fc,fn,fz    ;no carry in
022d =                  fROLc   db  fnc,fc,fn,0     ;carry in
0231 =                  fLSR
0231 =                  fROR    db  fc,0,fc,fz      ;no carry in
0235 =                  fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0239 =                  rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/D
023e =                  fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DE
                        ;logical memory operand
0243 =                  absOR   db  0,$1f,$71,$80   ;test pattern for OR
0247 =                  absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
024b =                  absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
024f =                  absORa  db  0,$f1,$1f,0     ;test pattern for OR
0253 =                  absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
0257 =                  absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
025b =                  absrlo  db  0,$ff,$7f,$80
025f =                  absflo  db  fz,fn,0,fn
0263 =                  data_bss_end
                        ;define area for page crossing JMP (abs) & JMP (abs,x)
02f9 =                  jxi_tab equ data_segment + $100 - 7     ;JMP (jxi_tab,
02fd =                  ji_tab  equ data_segment + $100 - 3     ;JMP (ji_tab+2
0300 =                  jxp_tab equ data_segment + $100         ;JMP (jxp_tab-
                        
                        
                                code
c000 =                          org code_segment
c000 : d8               start   cld
c001 : a2ff                     ldx #$ff
c003 : 9a                       txs
c004 : a900                     lda #0          ;*** test 0 = initialize
c006 : 8d0002                   sta test_case
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                        
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                        
                        ;initialize BSS segment
                            if load_data_direct != 1
c009 : a246                     ldx #zp_end-zp_init-1
c00b : bde9d9           ld_zp   lda zp_init,x
c00e : 9513                     sta zp_bss,x
c010 : ca                       dex
c011 : 10f8                     bpl ld_zp
c013 : a258                     ldx #data_end-data_init-1
c015 : bd30da           ld_data lda data_init,x
c018 : 9d0a02                   sta data_bss,x
c01b : ca                       dex
c01c : 10f7                     bpl ld_data
                              if ROM_vectors = 1
c01e : a205                     ldx #5
c020 : bd89da           ld_vect lda vec_init,x
c023 : 9dfaff                   sta vec_bss,x
c026 : ca                       dex
c027 : 10f7                     bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                        
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
c029 : a900                     lda #0
c02b : 850c                     sta zpt         ;set low byte of indirect poin
c02d : 8d0202                   sta ram_chksm+1 ;checksum high byte
c030 : a20b                     ldx #11         ;reset modifiable RAM
c032 : 9df902           gcs1    sta jxi_tab,x   ;JMP indirect page cross area
c035 : ca                       dex
c036 : 10fa                     bpl gcs1
c038 : 18                       clc
c039 : a209                     ldx #zp_bss-zero_page ;zeropage - write test a
c03b : 750a             gcs3    adc zero_page,x
c03d : 9004                     bcc gcs2
c03f : ee0202                   inc ram_chksm+1 ;carry to high byte
c042 : 18                       clc
c043 : e8               gcs2    inx
c044 : d0f5                     bne gcs3
c046 : a202                     ldx #hi(abs1)   ;set high byte of indirect poi
c048 : 860d                     stx zpt+1
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c04a : a010                     ldy #lo(abs1)   ;data after write & execute te
c04c : 710c             gcs5    adc (zpt),y
c04e : 9004                     bcc gcs4
c050 : ee0202                   inc ram_chksm+1 ;carry to high byte
c053 : 18                       clc
c054 : c8               gcs4    iny
c055 : d0f5                     bne gcs5
c057 : e8                       inx             ;advance RAM high address
c058 : 860d                     stx zpt+1
c05a : e010                     cpx #ram_top
c05c : d0ee                     bne gcs5
c05e : 8d0102                   sta ram_chksm   ;checksum complete
                            endif
                                next_test
c061 : ad0002          >            lda test_case   ;previous test
c064 : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c066 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
c068 : a901            >            lda #test_num   ;*** next tests' number
c06a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ;testing stack operations PHX PHY PLX PLY
c06d : a999                     lda #$99        ;protect a
c06f : a2ff                     ldx #$ff        ;initialize stack
c071 : 9a                       txs
c072 : a255                     ldx #$55
c074 : da                       phx
c075 : a2aa                     ldx #$aa
c077 : da                       phx
c078 : ecfe01                   cpx $1fe        ;on stack ?
                                trap_ne
c07b : d0fe            >        bne *           ;failed not equal (non zero)
                        
c07d : ba                       tsx
c07e : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
c080 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c082 : 7a                       ply
c083 : c0aa                     cpy #$aa        ;successful retreived from sta
                                trap_ne
c085 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c087 : 7a                       ply
c088 : c055                     cpy #$55
                                trap_ne
c08a : d0fe            >        bne *           ;failed not equal (non zero)
                        
c08c : ccff01                   cpy $1ff        ;remains on stack?
                                trap_ne
c08f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c091 : ba                       tsx
c092 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
c094 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c096 : a0a5                     ldy #$a5
c098 : 5a                       phy
c099 : a05a                     ldy #$5a
c09b : 5a                       phy
c09c : ccfe01                   cpy $1fe        ;on stack ?
                                trap_ne
c09f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0a1 : ba                       tsx
c0a2 : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
c0a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0a6 : fa                       plx
c0a7 : e05a                     cpx #$5a        ;successful retreived from sta
                                trap_ne
c0a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0ab : fa                       plx
c0ac : e0a5                     cpx #$a5
                                trap_ne
c0ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0b0 : ecff01                   cpx $1ff        ;remains on stack?
                                trap_ne
c0b3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0b5 : ba                       tsx
c0b6 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
c0b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0ba : c999                     cmp #$99        ;unchanged?
                                trap_ne
c0bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c0be : ad0002          >            lda test_case   ;previous test
c0c1 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c0c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
c0c5 : a902            >            lda #test_num   ;*** next tests' number
c0c7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; test PHX does not alter flags or X but PLX does
c0ca : a0aa                     ldy #$aa        ;protect y
                                set_x 1,$ff     ;push
                       >            load_flag $ff     
c0cc : a9ff            >            lda #$ff                  ;allow test to c
                       >
c0ce : 48              >            pha         ;use stack to load status
c0cf : a201            >            ldx #1     ;precharge index x
c0d1 : 28              >            plp
                        
c0d2 : da                       phx
                                tst_x 1,$ff
c0d3 : 08              >            php         ;save flags
c0d4 : e001            >            cpx #1     ;test result
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
c0d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0d8 : 68              >            pla         ;load status
c0d9 : 48              >            pha
                       >            cmp_flag $ff
c0da : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c0dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0de : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
c0df : a900            >            lda #0             ;allow test to change I
                       >
c0e1 : 48              >            pha         ;use stack to load status
c0e2 : a200            >            ldx #0     ;precharge index x
c0e4 : 28              >            plp
                        
c0e5 : da                       phx
                                tst_x 0,0
c0e6 : 08              >            php         ;save flags
c0e7 : e000            >            cpx #0     ;test result
                       >            trap_ne
c0e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0eb : 68              >            pla         ;load status
c0ec : 48              >            pha
                       >            cmp_flag 0
c0ed : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c0ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0f1 : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
c0f2 : a9ff            >            lda #$ff             ;allow test to change
                       >
c0f4 : 48              >            pha         ;use stack to load status
c0f5 : a2ff            >            ldx #$ff     ;precharge index x
c0f7 : 28              >            plp
                        
c0f8 : da                       phx
                                tst_x $ff,$ff
c0f9 : 08              >            php         ;save flags
c0fa : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c0fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c0fe : 68              >            pla         ;load status
c0ff : 48              >            pha
                       >            cmp_flag $ff
c100 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c102 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c104 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                                set_x 1,0
                       >            load_flag 0
c105 : a900            >            lda #0             ;allow test to change I
                       >
c107 : 48              >            pha         ;use stack to load status
c108 : a201            >            ldx #1     ;precharge index x
c10a : 28              >            plp
                        
c10b : da                       phx
                                tst_x 1,0
c10c : 08              >            php         ;save flags
c10d : e001            >            cpx #1     ;test result
                       >            trap_ne
c10f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c111 : 68              >            pla         ;load status
c112 : 48              >            pha
                       >            cmp_flag 0
c113 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c115 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c117 : 28              >            plp         ;restore status
                        
                                set_x 0,$ff
                       >            load_flag $ff
c118 : a9ff            >            lda #$ff             ;allow test to change
                       >
c11a : 48              >            pha         ;use stack to load status
c11b : a200            >            ldx #0     ;precharge index x
c11d : 28              >            plp
                        
c11e : da                       phx
                                tst_x 0,$ff
c11f : 08              >            php         ;save flags
c120 : e000            >            cpx #0     ;test result
                       >            trap_ne
c122 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c124 : 68              >            pla         ;load status
c125 : 48              >            pha
                       >            cmp_flag $ff
c126 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c128 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c12a : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
c12b : a900            >            lda #0             ;allow test to change I
                       >
c12d : 48              >            pha         ;use stack to load status
c12e : a2ff            >            ldx #$ff     ;precharge index x
c130 : 28              >            plp
                        
c131 : da                       phx
                                tst_x $ff,0
c132 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c133 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c135 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c137 : 68              >            pla         ;load status
c138 : 48              >            pha
                       >            cmp_flag 0
c139 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c13b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c13d : 28              >            plp         ;restore status
                        
                                set_x 0,$ff     ;pull
                       >            load_flag $ff     
c13e : a9ff            >            lda #$ff                  ;allow test to c
                       >
c140 : 48              >            pha         ;use stack to load status
c141 : a200            >            ldx #0     ;precharge index x
c143 : 28              >            plp
                        
c144 : fa                       plx
                                tst_x $ff,$ff-zero
c145 : 08              >            php         ;save flags
c146 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c148 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c14a : 68              >            pla         ;load status
c14b : 48              >            pha
                       >            cmp_flag $ff-zero
c14c : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c14e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c150 : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
c151 : a900            >            lda #0             ;allow test to change I
                       >
c153 : 48              >            pha         ;use stack to load status
c154 : a2ff            >            ldx #$ff     ;precharge index x
c156 : 28              >            plp
                        
c157 : fa                       plx
                                tst_x 0,zero
c158 : 08              >            php         ;save flags
c159 : e000            >            cpx #0     ;test result
                       >            trap_ne
c15b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c15d : 68              >            pla         ;load status
c15e : 48              >            pha
                       >            cmp_flag zero
c15f : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c161 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c163 : 28              >            plp         ;restore status
                        
                                set_x $fe,$ff
                       >            load_flag $ff
c164 : a9ff            >            lda #$ff             ;allow test to change
                       >
c166 : 48              >            pha         ;use stack to load status
c167 : a2fe            >            ldx #$fe     ;precharge index x
c169 : 28              >            plp
                        
c16a : fa                       plx
                                tst_x 1,$ff-zero-minus
c16b : 08              >            php         ;save flags
c16c : e001            >            cpx #1     ;test result
                       >            trap_ne
c16e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c170 : 68              >            pla         ;load status
c171 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
c172 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected 
                       >
                       >            trap_ne
c174 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c176 : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
c177 : a900            >            lda #0             ;allow test to change I
                       >
c179 : 48              >            pha         ;use stack to load status
c17a : a200            >            ldx #0     ;precharge index x
c17c : 28              >            plp
                        
c17d : fa                       plx
                                tst_x $ff,minus
c17e : 08              >            php         ;save flags
c17f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c181 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c183 : 68              >            pla         ;load status
c184 : 48              >            pha
                       >            cmp_flag minus
c185 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c187 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c189 : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
c18a : a9ff            >            lda #$ff             ;allow test to change
                       >
c18c : 48              >            pha         ;use stack to load status
c18d : a2ff            >            ldx #$ff     ;precharge index x
c18f : 28              >            plp
                        
c190 : fa                       plx
                                tst_x 0,$ff-minus
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c191 : 08              >            php         ;save flags
c192 : e000            >            cpx #0     ;test result
                       >            trap_ne
c194 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c196 : 68              >            pla         ;load status
c197 : 48              >            pha
                       >            cmp_flag $ff-minus
c198 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c19a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c19c : 28              >            plp         ;restore status
                        
                                set_x $fe,0
                       >            load_flag 0
c19d : a900            >            lda #0             ;allow test to change I
                       >
c19f : 48              >            pha         ;use stack to load status
c1a0 : a2fe            >            ldx #$fe     ;precharge index x
c1a2 : 28              >            plp
                        
c1a3 : fa                       plx
                                tst_x 1,0
c1a4 : 08              >            php         ;save flags
c1a5 : e001            >            cpx #1     ;test result
                       >            trap_ne
c1a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1a9 : 68              >            pla         ;load status
c1aa : 48              >            pha
                       >            cmp_flag 0
c1ab : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c1ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1af : 28              >            plp         ;restore status
                        
c1b0 : c0aa                     cpy #$aa        ;Y unchanged
                                trap_ne
c1b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c1b4 : ad0002          >            lda test_case   ;previous test
c1b7 : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c1b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
c1bb : a903            >            lda #test_num   ;*** next tests' number
c1bd : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; test PHY does not alter flags or Y but PLY does
c1c0 : a255                     ldx #$55        ;x & a protected
                                set_y 1,$ff     ;push
                       >            load_flag $ff     
c1c2 : a9ff            >            lda #$ff                  ;allow test to c
                       >
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c1c4 : 48              >            pha         ;use stack to load status
c1c5 : a001            >            ldy #1     ;precharge index y
c1c7 : 28              >            plp
                        
c1c8 : 5a                       phy
                                tst_y 1,$ff
c1c9 : 08              >            php         ;save flags
c1ca : c001            >            cpy #1     ;test result
                       >            trap_ne
c1cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1ce : 68              >            pla         ;load status
c1cf : 48              >            pha
                       >            cmp_flag $ff
c1d0 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c1d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1d4 : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
c1d5 : a900            >            lda #0             ;allow test to change I
                       >
c1d7 : 48              >            pha         ;use stack to load status
c1d8 : a000            >            ldy #0     ;precharge index y
c1da : 28              >            plp
                        
c1db : 5a                       phy
                                tst_y 0,0
c1dc : 08              >            php         ;save flags
c1dd : c000            >            cpy #0     ;test result
                       >            trap_ne
c1df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1e1 : 68              >            pla         ;load status
c1e2 : 48              >            pha
                       >            cmp_flag 0
c1e3 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c1e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1e7 : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
c1e8 : a9ff            >            lda #$ff             ;allow test to change
                       >
c1ea : 48              >            pha         ;use stack to load status
c1eb : a0ff            >            ldy #$ff     ;precharge index y
c1ed : 28              >            plp
                        
c1ee : 5a                       phy
                                tst_y $ff,$ff
c1ef : 08              >            php         ;save flags
c1f0 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c1f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1f4 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c1f5 : 48              >            pha
                       >            cmp_flag $ff
c1f6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c1f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c1fa : 28              >            plp         ;restore status
                        
                                set_y 1,0
                       >            load_flag 0
c1fb : a900            >            lda #0             ;allow test to change I
                       >
c1fd : 48              >            pha         ;use stack to load status
c1fe : a001            >            ldy #1     ;precharge index y
c200 : 28              >            plp
                        
c201 : 5a                       phy
                                tst_y 1,0
c202 : 08              >            php         ;save flags
c203 : c001            >            cpy #1     ;test result
                       >            trap_ne
c205 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c207 : 68              >            pla         ;load status
c208 : 48              >            pha
                       >            cmp_flag 0
c209 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c20b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c20d : 28              >            plp         ;restore status
                        
                                set_y 0,$ff
                       >            load_flag $ff
c20e : a9ff            >            lda #$ff             ;allow test to change
                       >
c210 : 48              >            pha         ;use stack to load status
c211 : a000            >            ldy #0     ;precharge index y
c213 : 28              >            plp
                        
c214 : 5a                       phy
                                tst_y 0,$ff
c215 : 08              >            php         ;save flags
c216 : c000            >            cpy #0     ;test result
                       >            trap_ne
c218 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c21a : 68              >            pla         ;load status
c21b : 48              >            pha
                       >            cmp_flag $ff
c21c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c21e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c220 : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
c221 : a900            >            lda #0             ;allow test to change I
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c223 : 48              >            pha         ;use stack to load status
c224 : a0ff            >            ldy #$ff     ;precharge index y
c226 : 28              >            plp
                        
c227 : 5a                       phy
                                tst_y $ff,0
c228 : 08              >            php         ;save flags
c229 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c22b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c22d : 68              >            pla         ;load status
c22e : 48              >            pha
                       >            cmp_flag 0
c22f : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c231 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c233 : 28              >            plp         ;restore status
                        
                                set_y 0,$ff     ;pull
                       >            load_flag $ff     
c234 : a9ff            >            lda #$ff                  ;allow test to c
                       >
c236 : 48              >            pha         ;use stack to load status
c237 : a000            >            ldy #0     ;precharge index y
c239 : 28              >            plp
                        
c23a : 7a                       ply
                                tst_y $ff,$ff-zero
c23b : 08              >            php         ;save flags
c23c : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c23e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c240 : 68              >            pla         ;load status
c241 : 48              >            pha
                       >            cmp_flag $ff-zero
c242 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c244 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c246 : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
c247 : a900            >            lda #0             ;allow test to change I
                       >
c249 : 48              >            pha         ;use stack to load status
c24a : a0ff            >            ldy #$ff     ;precharge index y
c24c : 28              >            plp
                        
c24d : 7a                       ply
                                tst_y 0,zero
c24e : 08              >            php         ;save flags
c24f : c000            >            cpy #0     ;test result
                       >            trap_ne
c251 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c253 : 68              >            pla         ;load status
c254 : 48              >            pha
                       >            cmp_flag zero
c255 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c257 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c259 : 28              >            plp         ;restore status
                        
                                set_y $fe,$ff
                       >            load_flag $ff
c25a : a9ff            >            lda #$ff             ;allow test to change
                       >
c25c : 48              >            pha         ;use stack to load status
c25d : a0fe            >            ldy #$fe     ;precharge index y
c25f : 28              >            plp
                        
c260 : 7a                       ply
                                tst_y 1,$ff-zero-minus
c261 : 08              >            php         ;save flags
c262 : c001            >            cpy #1     ;test result
                       >            trap_ne
c264 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c266 : 68              >            pla         ;load status
c267 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
c268 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected 
                       >
                       >            trap_ne
c26a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c26c : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
c26d : a900            >            lda #0             ;allow test to change I
                       >
c26f : 48              >            pha         ;use stack to load status
c270 : a000            >            ldy #0     ;precharge index y
c272 : 28              >            plp
                        
c273 : 7a                       ply
                                tst_y $ff,minus
c274 : 08              >            php         ;save flags
c275 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c277 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c279 : 68              >            pla         ;load status
c27a : 48              >            pha
                       >            cmp_flag minus
c27b : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c27d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c27f : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c280 : a9ff            >            lda #$ff             ;allow test to change
                       >
c282 : 48              >            pha         ;use stack to load status
c283 : a0ff            >            ldy #$ff     ;precharge index y
c285 : 28              >            plp
                        
c286 : 7a                       ply
                                tst_y 0,$ff-minus
c287 : 08              >            php         ;save flags
c288 : c000            >            cpy #0     ;test result
                       >            trap_ne
c28a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c28c : 68              >            pla         ;load status
c28d : 48              >            pha
                       >            cmp_flag $ff-minus
c28e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c290 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c292 : 28              >            plp         ;restore status
                        
                                set_y $fe,0
                       >            load_flag 0
c293 : a900            >            lda #0             ;allow test to change I
                       >
c295 : 48              >            pha         ;use stack to load status
c296 : a0fe            >            ldy #$fe     ;precharge index y
c298 : 28              >            plp
                        
c299 : 7a                       ply
                                tst_y 1,0
c29a : 08              >            php         ;save flags
c29b : c001            >            cpy #1     ;test result
                       >            trap_ne
c29d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c29f : 68              >            pla         ;load status
c2a0 : 48              >            pha
                       >            cmp_flag 0
c2a1 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c2a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2a5 : 28              >            plp         ;restore status
                        
c2a6 : e055                     cpx #$55        ;x unchanged?
                                trap_ne
c2a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c2aa : ad0002          >            lda test_case   ;previous test
c2ad : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c2af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
c2b1 : a904            >            lda #test_num   ;*** next tests' number
c2b3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                        
                        ; PC modifying instructions (BRA, BBR, BBS, 1, 2, 3 by
                        ; testing unconditional branch BRA
                        
c2b6 : a281                     ldx #$81        ;protect unused registers
c2b8 : a07e                     ldy #$7e
                                set_a 0,$ff
                       >            load_flag $ff
c2ba : a9ff            >            lda #$ff             ;allow test to change
                       >
c2bc : 48              >            pha         ;use stack to load status
c2bd : a900            >            lda #0     ;precharge accu
c2bf : 28              >            plp
                        
c2c0 : 8003                     bra br1         ;branch should always be taken
                                trap
c2c2 : 4cc2c2          >        jmp *           ;failed anyway
                        
c2c5 :                  br1
                                tst_a 0,$ff
c2c5 : 08              >            php         ;save flags
c2c6 : c900            >            cmp #0     ;test result
                       >            trap_ne
c2c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2ca : 68              >            pla         ;load status
c2cb : 48              >            pha
                       >            cmp_flag $ff
c2cc : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c2ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2d0 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
c2d1 : a900            >            lda #0             ;allow test to change I
                       >
c2d3 : 48              >            pha         ;use stack to load status
c2d4 : a9ff            >            lda #$ff     ;precharge accu
c2d6 : 28              >            plp
                        
c2d7 : 8003                     bra br2         ;branch should always be taken
                                trap
c2d9 : 4cd9c2          >        jmp *           ;failed anyway
                        
c2dc :                  br2
                                tst_a $ff,0
c2dc : 08              >            php         ;save flags
c2dd : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c2df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2e1 : 68              >            pla         ;load status
c2e2 : 48              >            pha
                       >            cmp_flag 0
c2e3 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c2e5 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c2e7 : 28              >            plp         ;restore status
                        
c2e8 : e081                     cpx #$81
                                trap_ne
c2ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
c2ec : c07e                     cpy #$7e
                                trap_ne
c2ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c2f0 : ad0002          >            lda test_case   ;previous test
c2f3 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c2f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
c2f7 : a905            >            lda #test_num   ;*** next tests' number
c2f9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
c2fc : a000                     ldy #0          ;branch range test
c2fe : 8061                     bra bra0
                        
c300 : c001             bra1    cpy #1
                                trap_ne         ;long range backward
c302 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c304 : c8                       iny
c305 : 8053                     bra bra2
                        
c307 : c003             bra3    cpy #3
                                trap_ne         ;long range backward
c309 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c30b : c8                       iny
c30c : 8045                     bra bra4
                        
c30e : c005             bra5    cpy #5
                                trap_ne         ;long range backward
c310 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c312 : c8                       iny
c313 : a000                     ldy #0
c315 : 8004                     bra brf0
                        
c317 : c8                       iny
c318 : c8                       iny
c319 : c8                       iny
c31a : c8                       iny
c31b : 8003             brf0    bra brf1
                        
c31d : c8                       iny
c31e : c8                       iny
c31f : c8                       iny
c320 : c8               brf1    iny
c321 : 8002                     bra brf2
                        
c323 : c8                       iny
c324 : c8                       iny
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c325 : c8               brf2    iny
c326 : c8                       iny
c327 : 8001                     bra brf3
                        
c329 : c8                       iny
c32a : c8               brf3    iny
c32b : c8                       iny
c32c : c8                       iny
c32d : 8000                     bra brf4
                        
c32f : c8               brf4    iny
c330 : c8                       iny
c331 : c8                       iny
c332 : c8                       iny
c333 : c00a                     cpy #10
                                trap_ne     ;short range forward
c335 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c337 : 8012                     bra brb0
                        
c339 : 88               brb4    dey
c33a : 88                       dey
c33b : 88                       dey
c33c : 88                       dey
c33d : 800e                     bra brb5
                        
c33f : 88               brb3    dey
c340 : 88                       dey
c341 : 88                       dey
c342 : 80f5                     bra brb4
                        
c344 : 88               brb2    dey
c345 : 88                       dey
c346 : 80f7                     bra brb3
                        
c348 : 88               brb1    dey
c349 : 80f9                     bra brb2
                        
c34b : 80fb             brb0    bra brb1
                        
c34d : c000             brb5    cpy #0
                                trap_ne     ;short range backward
c34f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c351 : 8015                     bra bra6
                        
c353 : c004             bra4    cpy #4
                                trap_ne     ;long range forward
c355 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c357 : c8                       iny
c358 : 80b4                     bra bra5
                        
c35a : c002             bra2    cpy #2
                                trap_ne     ;long range forward
c35c : d0fe            >        bne *           ;failed not equal (non zero)
                        
c35e : c8                       iny
c35f : 80a6                     bra bra3
                        
c361 : c000             bra0    cpy #0
                                trap_ne     ;long range forward
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c363 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c365 : c8                       iny
c366 : 8098                     bra bra1
                        
c368 :                  bra6
                                next_test
c368 : ad0002          >            lda test_case   ;previous test
c36b : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c36d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
c36f : a906            >            lda #test_num   ;*** next tests' number
c371 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if rkwl_wdc_op = 1
                        ; testing BBR & BBS
                        
                        bbt     macro           ;\1 = bitnum
                                lda #(1<<\1)    ;testing 1 bit on
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbr \1,zpt,fail1\?
                                bbs \1,zpt,ok1\?
                                trap            ;bbs branch not taken
                        fail1\?
                                trap            ;bbr branch taken
                        ok1\?
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbr \1,zpt,fail2\?
                                bbs \1,zpt,ok2\?
                                trap            ;bbs branch not taken
                        fail2\?
                                trap            ;bbr branch taken
                        ok2\?
                                tst_a $cc,$ff
                                lda zpt
                                cmp #(1<<\1)
                                trap_ne         ;zp altered
                                lda #$ff-(1<<\1) ;testing 1 bit off
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbs \1,zpt,fail3\?
                                bbr \1,zpt,ok3\?
                                trap            ;bbr branch not taken
                        fail3\?
                                trap            ;bbs branch taken
                        ok3\?
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbs \1,zpt,fail4\?
                                bbr \1,zpt,ok4\?
                                trap            ;bbr branch not taken
                        fail4\?
                                trap            ;bbs branch taken
                        ok4\?
                                tst_a $cc,$ff
                                lda zpt
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                cmp #$ff-(1<<\1)
                                trap_ne         ;zp altered
                                endm
                        
c374 : a211                     ldx #$11        ;test bbr/bbs integrity
c376 : a022                     ldy #$22
                                bbt 0
c378 : a901            >        lda #(1<<0)    ;testing 1 bit on
c37a : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c37c : a900            >            lda #0                  ;allow test to cha
                       >
c37e : 48              >            pha         ;use stack to load status
c37f : a933            >            lda #$33     ;precharge accu
c381 : 28              >            plp
                       >
c382 : 0f0c06          >        bbr 0,zpt,fail10196
c385 : 8f0c06          >        bbs 0,zpt,ok10196
                       >        trap            ;bbs branch not taken
c388 : 4c88c3          >        jmp *           ;failed anyway
                       >
c38b :                 >fail10196
                       >        trap            ;bbr branch taken
c38b : 4c8bc3          >        jmp *           ;failed anyway
                       >
c38e :                 >ok10196
                       >        tst_a $33,0
c38e : 08              >            php         ;save flags
c38f : c933            >            cmp #$33     ;test result
                       >            trap_ne
c391 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c393 : 68              >            pla         ;load status
c394 : 48              >            pha
                       >            cmp_flag 0
c395 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c397 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c399 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c39a : a9ff            >            lda #$ff                ;allow test to cha
                       >
c39c : 48              >            pha         ;use stack to load status
c39d : a9cc            >            lda #$cc     ;precharge accu
c39f : 28              >            plp
                       >
c3a0 : 0f0c06          >        bbr 0,zpt,fail20196
c3a3 : 8f0c06          >        bbs 0,zpt,ok20196
                       >        trap            ;bbs branch not taken
c3a6 : 4ca6c3          >        jmp *           ;failed anyway
                       >
c3a9 :                 >fail20196
                       >        trap            ;bbr branch taken
c3a9 : 4ca9c3          >        jmp *           ;failed anyway
                       >
c3ac :                 >ok20196
                       >        tst_a $cc,$ff
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c3ac : 08              >            php         ;save flags
c3ad : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c3af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3b1 : 68              >            pla         ;load status
c3b2 : 48              >            pha
                       >            cmp_flag $ff
c3b3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c3b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3b7 : 28              >            plp         ;restore status
                       >
c3b8 : a50c            >        lda zpt
c3ba : c901            >        cmp #(1<<0)
                       >        trap_ne         ;zp altered
c3bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3be : a9fe            >        lda #$ff-(1<<0) ;testing 1 bit off
c3c0 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c3c2 : a900            >            lda #0                  ;allow test to cha
                       >
c3c4 : 48              >            pha         ;use stack to load status
c3c5 : a933            >            lda #$33     ;precharge accu
c3c7 : 28              >            plp
                       >
c3c8 : 8f0c06          >        bbs 0,zpt,fail30196
c3cb : 0f0c06          >        bbr 0,zpt,ok30196
                       >        trap            ;bbr branch not taken
c3ce : 4ccec3          >        jmp *           ;failed anyway
                       >
c3d1 :                 >fail30196
                       >        trap            ;bbs branch taken
c3d1 : 4cd1c3          >        jmp *           ;failed anyway
                       >
c3d4 :                 >ok30196
                       >        tst_a $33,0
c3d4 : 08              >            php         ;save flags
c3d5 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c3d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3d9 : 68              >            pla         ;load status
c3da : 48              >            pha
                       >            cmp_flag 0
c3db : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c3dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3df : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c3e0 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c3e2 : 48              >            pha         ;use stack to load status
c3e3 : a9cc            >            lda #$cc     ;precharge accu
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c3e5 : 28              >            plp
                       >
c3e6 : 8f0c06          >        bbs 0,zpt,fail40196
c3e9 : 0f0c06          >        bbr 0,zpt,ok40196
                       >        trap            ;bbr branch not taken
c3ec : 4cecc3          >        jmp *           ;failed anyway
                       >
c3ef :                 >fail40196
                       >        trap            ;bbs branch taken
c3ef : 4cefc3          >        jmp *           ;failed anyway
                       >
c3f2 :                 >ok40196
                       >        tst_a $cc,$ff
c3f2 : 08              >            php         ;save flags
c3f3 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c3f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3f7 : 68              >            pla         ;load status
c3f8 : 48              >            pha
                       >            cmp_flag $ff
c3f9 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c3fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3fd : 28              >            plp         ;restore status
                       >
c3fe : a50c            >        lda zpt
c400 : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne         ;zp altered
c402 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 1
c404 : a902            >        lda #(1<<1)    ;testing 1 bit on
c406 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c408 : a900            >            lda #0                  ;allow test to cha
                       >
c40a : 48              >            pha         ;use stack to load status
c40b : a933            >            lda #$33     ;precharge accu
c40d : 28              >            plp
                       >
c40e : 1f0c06          >        bbr 1,zpt,fail10231
c411 : 9f0c06          >        bbs 1,zpt,ok10231
                       >        trap            ;bbs branch not taken
c414 : 4c14c4          >        jmp *           ;failed anyway
                       >
c417 :                 >fail10231
                       >        trap            ;bbr branch taken
c417 : 4c17c4          >        jmp *           ;failed anyway
                       >
c41a :                 >ok10231
                       >        tst_a $33,0
c41a : 08              >            php         ;save flags
c41b : c933            >            cmp #$33     ;test result
                       >            trap_ne
c41d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c41f : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c420 : 48              >            pha
                       >            cmp_flag 0
c421 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c423 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c425 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c426 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c428 : 48              >            pha         ;use stack to load status
c429 : a9cc            >            lda #$cc     ;precharge accu
c42b : 28              >            plp
                       >
c42c : 1f0c06          >        bbr 1,zpt,fail20231
c42f : 9f0c06          >        bbs 1,zpt,ok20231
                       >        trap            ;bbs branch not taken
c432 : 4c32c4          >        jmp *           ;failed anyway
                       >
c435 :                 >fail20231
                       >        trap            ;bbr branch taken
c435 : 4c35c4          >        jmp *           ;failed anyway
                       >
c438 :                 >ok20231
                       >        tst_a $cc,$ff
c438 : 08              >            php         ;save flags
c439 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c43b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c43d : 68              >            pla         ;load status
c43e : 48              >            pha
                       >            cmp_flag $ff
c43f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c441 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c443 : 28              >            plp         ;restore status
                       >
c444 : a50c            >        lda zpt
c446 : c902            >        cmp #(1<<1)
                       >        trap_ne         ;zp altered
c448 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c44a : a9fd            >        lda #$ff-(1<<1) ;testing 1 bit off
c44c : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c44e : a900            >            lda #0                  ;allow test to cha
                       >
c450 : 48              >            pha         ;use stack to load status
c451 : a933            >            lda #$33     ;precharge accu
c453 : 28              >            plp
                       >
c454 : 9f0c06          >        bbs 1,zpt,fail30231
c457 : 1f0c06          >        bbr 1,zpt,ok30231
                       >        trap            ;bbr branch not taken
c45a : 4c5ac4          >        jmp *           ;failed anyway
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c45d :                 >fail30231
                       >        trap            ;bbs branch taken
c45d : 4c5dc4          >        jmp *           ;failed anyway
                       >
c460 :                 >ok30231
                       >        tst_a $33,0
c460 : 08              >            php         ;save flags
c461 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c463 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c465 : 68              >            pla         ;load status
c466 : 48              >            pha
                       >            cmp_flag 0
c467 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c469 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c46b : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c46c : a9ff            >            lda #$ff                ;allow test to cha
                       >
c46e : 48              >            pha         ;use stack to load status
c46f : a9cc            >            lda #$cc     ;precharge accu
c471 : 28              >            plp
                       >
c472 : 9f0c06          >        bbs 1,zpt,fail40231
c475 : 1f0c06          >        bbr 1,zpt,ok40231
                       >        trap            ;bbr branch not taken
c478 : 4c78c4          >        jmp *           ;failed anyway
                       >
c47b :                 >fail40231
                       >        trap            ;bbs branch taken
c47b : 4c7bc4          >        jmp *           ;failed anyway
                       >
c47e :                 >ok40231
                       >        tst_a $cc,$ff
c47e : 08              >            php         ;save flags
c47f : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c481 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c483 : 68              >            pla         ;load status
c484 : 48              >            pha
                       >            cmp_flag $ff
c485 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c487 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c489 : 28              >            plp         ;restore status
                       >
c48a : a50c            >        lda zpt
c48c : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne         ;zp altered
c48e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                bbt 2
c490 : a904            >        lda #(1<<2)    ;testing 1 bit on
c492 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c494 : a900            >            lda #0                  ;allow test to cha
                       >
c496 : 48              >            pha         ;use stack to load status
c497 : a933            >            lda #$33     ;precharge accu
c499 : 28              >            plp
                       >
c49a : 2f0c06          >        bbr 2,zpt,fail10266
c49d : af0c06          >        bbs 2,zpt,ok10266
                       >        trap            ;bbs branch not taken
c4a0 : 4ca0c4          >        jmp *           ;failed anyway
                       >
c4a3 :                 >fail10266
                       >        trap            ;bbr branch taken
c4a3 : 4ca3c4          >        jmp *           ;failed anyway
                       >
c4a6 :                 >ok10266
                       >        tst_a $33,0
c4a6 : 08              >            php         ;save flags
c4a7 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c4a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4ab : 68              >            pla         ;load status
c4ac : 48              >            pha
                       >            cmp_flag 0
c4ad : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c4af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4b1 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c4b2 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c4b4 : 48              >            pha         ;use stack to load status
c4b5 : a9cc            >            lda #$cc     ;precharge accu
c4b7 : 28              >            plp
                       >
c4b8 : 2f0c06          >        bbr 2,zpt,fail20266
c4bb : af0c06          >        bbs 2,zpt,ok20266
                       >        trap            ;bbs branch not taken
c4be : 4cbec4          >        jmp *           ;failed anyway
                       >
c4c1 :                 >fail20266
                       >        trap            ;bbr branch taken
c4c1 : 4cc1c4          >        jmp *           ;failed anyway
                       >
c4c4 :                 >ok20266
                       >        tst_a $cc,$ff
c4c4 : 08              >            php         ;save flags
c4c5 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c4c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4c9 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c4ca : 48              >            pha
                       >            cmp_flag $ff
c4cb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c4cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4cf : 28              >            plp         ;restore status
                       >
c4d0 : a50c            >        lda zpt
c4d2 : c904            >        cmp #(1<<2)
                       >        trap_ne         ;zp altered
c4d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4d6 : a9fb            >        lda #$ff-(1<<2) ;testing 1 bit off
c4d8 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c4da : a900            >            lda #0                  ;allow test to cha
                       >
c4dc : 48              >            pha         ;use stack to load status
c4dd : a933            >            lda #$33     ;precharge accu
c4df : 28              >            plp
                       >
c4e0 : af0c06          >        bbs 2,zpt,fail30266
c4e3 : 2f0c06          >        bbr 2,zpt,ok30266
                       >        trap            ;bbr branch not taken
c4e6 : 4ce6c4          >        jmp *           ;failed anyway
                       >
c4e9 :                 >fail30266
                       >        trap            ;bbs branch taken
c4e9 : 4ce9c4          >        jmp *           ;failed anyway
                       >
c4ec :                 >ok30266
                       >        tst_a $33,0
c4ec : 08              >            php         ;save flags
c4ed : c933            >            cmp #$33     ;test result
                       >            trap_ne
c4ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4f1 : 68              >            pla         ;load status
c4f2 : 48              >            pha
                       >            cmp_flag 0
c4f3 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c4f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c4f7 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c4f8 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c4fa : 48              >            pha         ;use stack to load status
c4fb : a9cc            >            lda #$cc     ;precharge accu
c4fd : 28              >            plp
                       >
c4fe : af0c06          >        bbs 2,zpt,fail40266
c501 : 2f0c06          >        bbr 2,zpt,ok40266
                       >        trap            ;bbr branch not taken
c504 : 4c04c5          >        jmp *           ;failed anyway
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c507 :                 >fail40266
                       >        trap            ;bbs branch taken
c507 : 4c07c5          >        jmp *           ;failed anyway
                       >
c50a :                 >ok40266
                       >        tst_a $cc,$ff
c50a : 08              >            php         ;save flags
c50b : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c50d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c50f : 68              >            pla         ;load status
c510 : 48              >            pha
                       >            cmp_flag $ff
c511 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c513 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c515 : 28              >            plp         ;restore status
                       >
c516 : a50c            >        lda zpt
c518 : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne         ;zp altered
c51a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 3
c51c : a908            >        lda #(1<<3)    ;testing 1 bit on
c51e : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c520 : a900            >            lda #0                  ;allow test to cha
                       >
c522 : 48              >            pha         ;use stack to load status
c523 : a933            >            lda #$33     ;precharge accu
c525 : 28              >            plp
                       >
c526 : 3f0c06          >        bbr 3,zpt,fail10301
c529 : bf0c06          >        bbs 3,zpt,ok10301
                       >        trap            ;bbs branch not taken
c52c : 4c2cc5          >        jmp *           ;failed anyway
                       >
c52f :                 >fail10301
                       >        trap            ;bbr branch taken
c52f : 4c2fc5          >        jmp *           ;failed anyway
                       >
c532 :                 >ok10301
                       >        tst_a $33,0
c532 : 08              >            php         ;save flags
c533 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c535 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c537 : 68              >            pla         ;load status
c538 : 48              >            pha
                       >            cmp_flag 0
c539 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c53b : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c53d : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c53e : a9ff            >            lda #$ff                ;allow test to cha
                       >
c540 : 48              >            pha         ;use stack to load status
c541 : a9cc            >            lda #$cc     ;precharge accu
c543 : 28              >            plp
                       >
c544 : 3f0c06          >        bbr 3,zpt,fail20301
c547 : bf0c06          >        bbs 3,zpt,ok20301
                       >        trap            ;bbs branch not taken
c54a : 4c4ac5          >        jmp *           ;failed anyway
                       >
c54d :                 >fail20301
                       >        trap            ;bbr branch taken
c54d : 4c4dc5          >        jmp *           ;failed anyway
                       >
c550 :                 >ok20301
                       >        tst_a $cc,$ff
c550 : 08              >            php         ;save flags
c551 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c553 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c555 : 68              >            pla         ;load status
c556 : 48              >            pha
                       >            cmp_flag $ff
c557 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c559 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c55b : 28              >            plp         ;restore status
                       >
c55c : a50c            >        lda zpt
c55e : c908            >        cmp #(1<<3)
                       >        trap_ne         ;zp altered
c560 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c562 : a9f7            >        lda #$ff-(1<<3) ;testing 1 bit off
c564 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c566 : a900            >            lda #0                  ;allow test to cha
                       >
c568 : 48              >            pha         ;use stack to load status
c569 : a933            >            lda #$33     ;precharge accu
c56b : 28              >            plp
                       >
c56c : bf0c06          >        bbs 3,zpt,fail30301
c56f : 3f0c06          >        bbr 3,zpt,ok30301
                       >        trap            ;bbr branch not taken
c572 : 4c72c5          >        jmp *           ;failed anyway
                       >
c575 :                 >fail30301
                       >        trap            ;bbs branch taken
c575 : 4c75c5          >        jmp *           ;failed anyway
                       >
c578 :                 >ok30301
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        tst_a $33,0
c578 : 08              >            php         ;save flags
c579 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c57b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c57d : 68              >            pla         ;load status
c57e : 48              >            pha
                       >            cmp_flag 0
c57f : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c581 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c583 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c584 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c586 : 48              >            pha         ;use stack to load status
c587 : a9cc            >            lda #$cc     ;precharge accu
c589 : 28              >            plp
                       >
c58a : bf0c06          >        bbs 3,zpt,fail40301
c58d : 3f0c06          >        bbr 3,zpt,ok40301
                       >        trap            ;bbr branch not taken
c590 : 4c90c5          >        jmp *           ;failed anyway
                       >
c593 :                 >fail40301
                       >        trap            ;bbs branch taken
c593 : 4c93c5          >        jmp *           ;failed anyway
                       >
c596 :                 >ok40301
                       >        tst_a $cc,$ff
c596 : 08              >            php         ;save flags
c597 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c599 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c59b : 68              >            pla         ;load status
c59c : 48              >            pha
                       >            cmp_flag $ff
c59d : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c59f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5a1 : 28              >            plp         ;restore status
                       >
c5a2 : a50c            >        lda zpt
c5a4 : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne         ;zp altered
c5a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 4
c5a8 : a910            >        lda #(1<<4)    ;testing 1 bit on
c5aa : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c5ac : a900            >            lda #0                  ;allow test to cha
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c5ae : 48              >            pha         ;use stack to load status
c5af : a933            >            lda #$33     ;precharge accu
c5b1 : 28              >            plp
                       >
c5b2 : 4f0c06          >        bbr 4,zpt,fail10336
c5b5 : cf0c06          >        bbs 4,zpt,ok10336
                       >        trap            ;bbs branch not taken
c5b8 : 4cb8c5          >        jmp *           ;failed anyway
                       >
c5bb :                 >fail10336
                       >        trap            ;bbr branch taken
c5bb : 4cbbc5          >        jmp *           ;failed anyway
                       >
c5be :                 >ok10336
                       >        tst_a $33,0
c5be : 08              >            php         ;save flags
c5bf : c933            >            cmp #$33     ;test result
                       >            trap_ne
c5c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5c3 : 68              >            pla         ;load status
c5c4 : 48              >            pha
                       >            cmp_flag 0
c5c5 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c5c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5c9 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c5ca : a9ff            >            lda #$ff                ;allow test to cha
                       >
c5cc : 48              >            pha         ;use stack to load status
c5cd : a9cc            >            lda #$cc     ;precharge accu
c5cf : 28              >            plp
                       >
c5d0 : 4f0c06          >        bbr 4,zpt,fail20336
c5d3 : cf0c06          >        bbs 4,zpt,ok20336
                       >        trap            ;bbs branch not taken
c5d6 : 4cd6c5          >        jmp *           ;failed anyway
                       >
c5d9 :                 >fail20336
                       >        trap            ;bbr branch taken
c5d9 : 4cd9c5          >        jmp *           ;failed anyway
                       >
c5dc :                 >ok20336
                       >        tst_a $cc,$ff
c5dc : 08              >            php         ;save flags
c5dd : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c5df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5e1 : 68              >            pla         ;load status
c5e2 : 48              >            pha
                       >            cmp_flag $ff
c5e3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c5e5 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c5e7 : 28              >            plp         ;restore status
                       >
c5e8 : a50c            >        lda zpt
c5ea : c910            >        cmp #(1<<4)
                       >        trap_ne         ;zp altered
c5ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5ee : a9ef            >        lda #$ff-(1<<4) ;testing 1 bit off
c5f0 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c5f2 : a900            >            lda #0                  ;allow test to cha
                       >
c5f4 : 48              >            pha         ;use stack to load status
c5f5 : a933            >            lda #$33     ;precharge accu
c5f7 : 28              >            plp
                       >
c5f8 : cf0c06          >        bbs 4,zpt,fail30336
c5fb : 4f0c06          >        bbr 4,zpt,ok30336
                       >        trap            ;bbr branch not taken
c5fe : 4cfec5          >        jmp *           ;failed anyway
                       >
c601 :                 >fail30336
                       >        trap            ;bbs branch taken
c601 : 4c01c6          >        jmp *           ;failed anyway
                       >
c604 :                 >ok30336
                       >        tst_a $33,0
c604 : 08              >            php         ;save flags
c605 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c607 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c609 : 68              >            pla         ;load status
c60a : 48              >            pha
                       >            cmp_flag 0
c60b : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c60d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c60f : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c610 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c612 : 48              >            pha         ;use stack to load status
c613 : a9cc            >            lda #$cc     ;precharge accu
c615 : 28              >            plp
                       >
c616 : cf0c06          >        bbs 4,zpt,fail40336
c619 : 4f0c06          >        bbr 4,zpt,ok40336
                       >        trap            ;bbr branch not taken
c61c : 4c1cc6          >        jmp *           ;failed anyway
                       >
c61f :                 >fail40336
                       >        trap            ;bbs branch taken
c61f : 4c1fc6          >        jmp *           ;failed anyway
                       >
c622 :                 >ok40336
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        tst_a $cc,$ff
c622 : 08              >            php         ;save flags
c623 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c625 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c627 : 68              >            pla         ;load status
c628 : 48              >            pha
                       >            cmp_flag $ff
c629 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c62b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c62d : 28              >            plp         ;restore status
                       >
c62e : a50c            >        lda zpt
c630 : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne         ;zp altered
c632 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 5
c634 : a920            >        lda #(1<<5)    ;testing 1 bit on
c636 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c638 : a900            >            lda #0                  ;allow test to cha
                       >
c63a : 48              >            pha         ;use stack to load status
c63b : a933            >            lda #$33     ;precharge accu
c63d : 28              >            plp
                       >
c63e : 5f0c06          >        bbr 5,zpt,fail10371
c641 : df0c06          >        bbs 5,zpt,ok10371
                       >        trap            ;bbs branch not taken
c644 : 4c44c6          >        jmp *           ;failed anyway
                       >
c647 :                 >fail10371
                       >        trap            ;bbr branch taken
c647 : 4c47c6          >        jmp *           ;failed anyway
                       >
c64a :                 >ok10371
                       >        tst_a $33,0
c64a : 08              >            php         ;save flags
c64b : c933            >            cmp #$33     ;test result
                       >            trap_ne
c64d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c64f : 68              >            pla         ;load status
c650 : 48              >            pha
                       >            cmp_flag 0
c651 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c653 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c655 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c656 : a9ff            >            lda #$ff                ;allow test to cha
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
c658 : 48              >            pha         ;use stack to load status
c659 : a9cc            >            lda #$cc     ;precharge accu
c65b : 28              >            plp
                       >
c65c : 5f0c06          >        bbr 5,zpt,fail20371
c65f : df0c06          >        bbs 5,zpt,ok20371
                       >        trap            ;bbs branch not taken
c662 : 4c62c6          >        jmp *           ;failed anyway
                       >
c665 :                 >fail20371
                       >        trap            ;bbr branch taken
c665 : 4c65c6          >        jmp *           ;failed anyway
                       >
c668 :                 >ok20371
                       >        tst_a $cc,$ff
c668 : 08              >            php         ;save flags
c669 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c66b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c66d : 68              >            pla         ;load status
c66e : 48              >            pha
                       >            cmp_flag $ff
c66f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c671 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c673 : 28              >            plp         ;restore status
                       >
c674 : a50c            >        lda zpt
c676 : c920            >        cmp #(1<<5)
                       >        trap_ne         ;zp altered
c678 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c67a : a9df            >        lda #$ff-(1<<5) ;testing 1 bit off
c67c : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c67e : a900            >            lda #0                  ;allow test to cha
                       >
c680 : 48              >            pha         ;use stack to load status
c681 : a933            >            lda #$33     ;precharge accu
c683 : 28              >            plp
                       >
c684 : df0c06          >        bbs 5,zpt,fail30371
c687 : 5f0c06          >        bbr 5,zpt,ok30371
                       >        trap            ;bbr branch not taken
c68a : 4c8ac6          >        jmp *           ;failed anyway
                       >
c68d :                 >fail30371
                       >        trap            ;bbs branch taken
c68d : 4c8dc6          >        jmp *           ;failed anyway
                       >
c690 :                 >ok30371
                       >        tst_a $33,0
c690 : 08              >            php         ;save flags
c691 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c693 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c695 : 68              >            pla         ;load status
c696 : 48              >            pha
                       >            cmp_flag 0
c697 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c699 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c69b : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c69c : a9ff            >            lda #$ff                ;allow test to cha
                       >
c69e : 48              >            pha         ;use stack to load status
c69f : a9cc            >            lda #$cc     ;precharge accu
c6a1 : 28              >            plp
                       >
c6a2 : df0c06          >        bbs 5,zpt,fail40371
c6a5 : 5f0c06          >        bbr 5,zpt,ok40371
                       >        trap            ;bbr branch not taken
c6a8 : 4ca8c6          >        jmp *           ;failed anyway
                       >
c6ab :                 >fail40371
                       >        trap            ;bbs branch taken
c6ab : 4cabc6          >        jmp *           ;failed anyway
                       >
c6ae :                 >ok40371
                       >        tst_a $cc,$ff
c6ae : 08              >            php         ;save flags
c6af : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c6b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6b3 : 68              >            pla         ;load status
c6b4 : 48              >            pha
                       >            cmp_flag $ff
c6b5 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c6b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6b9 : 28              >            plp         ;restore status
                       >
c6ba : a50c            >        lda zpt
c6bc : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne         ;zp altered
c6be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 6
c6c0 : a940            >        lda #(1<<6)    ;testing 1 bit on
c6c2 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c6c4 : a900            >            lda #0                  ;allow test to cha
                       >
c6c6 : 48              >            pha         ;use stack to load status
c6c7 : a933            >            lda #$33     ;precharge accu
c6c9 : 28              >            plp
                       >
c6ca : 6f0c06          >        bbr 6,zpt,fail10406
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c6cd : ef0c06          >        bbs 6,zpt,ok10406
                       >        trap            ;bbs branch not taken
c6d0 : 4cd0c6          >        jmp *           ;failed anyway
                       >
c6d3 :                 >fail10406
                       >        trap            ;bbr branch taken
c6d3 : 4cd3c6          >        jmp *           ;failed anyway
                       >
c6d6 :                 >ok10406
                       >        tst_a $33,0
c6d6 : 08              >            php         ;save flags
c6d7 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c6d9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6db : 68              >            pla         ;load status
c6dc : 48              >            pha
                       >            cmp_flag 0
c6dd : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c6df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6e1 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c6e2 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c6e4 : 48              >            pha         ;use stack to load status
c6e5 : a9cc            >            lda #$cc     ;precharge accu
c6e7 : 28              >            plp
                       >
c6e8 : 6f0c06          >        bbr 6,zpt,fail20406
c6eb : ef0c06          >        bbs 6,zpt,ok20406
                       >        trap            ;bbs branch not taken
c6ee : 4ceec6          >        jmp *           ;failed anyway
                       >
c6f1 :                 >fail20406
                       >        trap            ;bbr branch taken
c6f1 : 4cf1c6          >        jmp *           ;failed anyway
                       >
c6f4 :                 >ok20406
                       >        tst_a $cc,$ff
c6f4 : 08              >            php         ;save flags
c6f5 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c6f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6f9 : 68              >            pla         ;load status
c6fa : 48              >            pha
                       >            cmp_flag $ff
c6fb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c6fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6ff : 28              >            plp         ;restore status
                       >
c700 : a50c            >        lda zpt
c702 : c940            >        cmp #(1<<6)
                       >        trap_ne         ;zp altered
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c704 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c706 : a9bf            >        lda #$ff-(1<<6) ;testing 1 bit off
c708 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c70a : a900            >            lda #0                  ;allow test to cha
                       >
c70c : 48              >            pha         ;use stack to load status
c70d : a933            >            lda #$33     ;precharge accu
c70f : 28              >            plp
                       >
c710 : ef0c06          >        bbs 6,zpt,fail30406
c713 : 6f0c06          >        bbr 6,zpt,ok30406
                       >        trap            ;bbr branch not taken
c716 : 4c16c7          >        jmp *           ;failed anyway
                       >
c719 :                 >fail30406
                       >        trap            ;bbs branch taken
c719 : 4c19c7          >        jmp *           ;failed anyway
                       >
c71c :                 >ok30406
                       >        tst_a $33,0
c71c : 08              >            php         ;save flags
c71d : c933            >            cmp #$33     ;test result
                       >            trap_ne
c71f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c721 : 68              >            pla         ;load status
c722 : 48              >            pha
                       >            cmp_flag 0
c723 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c725 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c727 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c728 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c72a : 48              >            pha         ;use stack to load status
c72b : a9cc            >            lda #$cc     ;precharge accu
c72d : 28              >            plp
                       >
c72e : ef0c06          >        bbs 6,zpt,fail40406
c731 : 6f0c06          >        bbr 6,zpt,ok40406
                       >        trap            ;bbr branch not taken
c734 : 4c34c7          >        jmp *           ;failed anyway
                       >
c737 :                 >fail40406
                       >        trap            ;bbs branch taken
c737 : 4c37c7          >        jmp *           ;failed anyway
                       >
c73a :                 >ok40406
                       >        tst_a $cc,$ff
c73a : 08              >            php         ;save flags
c73b : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c73d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c73f : 68              >            pla         ;load status
c740 : 48              >            pha
                       >            cmp_flag $ff
c741 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c743 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c745 : 28              >            plp         ;restore status
                       >
c746 : a50c            >        lda zpt
c748 : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne         ;zp altered
c74a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 7
c74c : a980            >        lda #(1<<7)    ;testing 1 bit on
c74e : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c750 : a900            >            lda #0                  ;allow test to cha
                       >
c752 : 48              >            pha         ;use stack to load status
c753 : a933            >            lda #$33     ;precharge accu
c755 : 28              >            plp
                       >
c756 : 7f0c06          >        bbr 7,zpt,fail10441
c759 : ff0c06          >        bbs 7,zpt,ok10441
                       >        trap            ;bbs branch not taken
c75c : 4c5cc7          >        jmp *           ;failed anyway
                       >
c75f :                 >fail10441
                       >        trap            ;bbr branch taken
c75f : 4c5fc7          >        jmp *           ;failed anyway
                       >
c762 :                 >ok10441
                       >        tst_a $33,0
c762 : 08              >            php         ;save flags
c763 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c765 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c767 : 68              >            pla         ;load status
c768 : 48              >            pha
                       >            cmp_flag 0
c769 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c76b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c76d : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c76e : a9ff            >            lda #$ff                ;allow test to cha
                       >
c770 : 48              >            pha         ;use stack to load status
c771 : a9cc            >            lda #$cc     ;precharge accu
c773 : 28              >            plp
                       >
c774 : 7f0c06          >        bbr 7,zpt,fail20441
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c777 : ff0c06          >        bbs 7,zpt,ok20441
                       >        trap            ;bbs branch not taken
c77a : 4c7ac7          >        jmp *           ;failed anyway
                       >
c77d :                 >fail20441
                       >        trap            ;bbr branch taken
c77d : 4c7dc7          >        jmp *           ;failed anyway
                       >
c780 :                 >ok20441
                       >        tst_a $cc,$ff
c780 : 08              >            php         ;save flags
c781 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c783 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c785 : 68              >            pla         ;load status
c786 : 48              >            pha
                       >            cmp_flag $ff
c787 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c789 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c78b : 28              >            plp         ;restore status
                       >
c78c : a50c            >        lda zpt
c78e : c980            >        cmp #(1<<7)
                       >        trap_ne         ;zp altered
c790 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c792 : a97f            >        lda #$ff-(1<<7) ;testing 1 bit off
c794 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
c796 : a900            >            lda #0                  ;allow test to cha
                       >
c798 : 48              >            pha         ;use stack to load status
c799 : a933            >            lda #$33     ;precharge accu
c79b : 28              >            plp
                       >
c79c : ff0c06          >        bbs 7,zpt,fail30441
c79f : 7f0c06          >        bbr 7,zpt,ok30441
                       >        trap            ;bbr branch not taken
c7a2 : 4ca2c7          >        jmp *           ;failed anyway
                       >
c7a5 :                 >fail30441
                       >        trap            ;bbs branch taken
c7a5 : 4ca5c7          >        jmp *           ;failed anyway
                       >
c7a8 :                 >ok30441
                       >        tst_a $33,0
c7a8 : 08              >            php         ;save flags
c7a9 : c933            >            cmp #$33     ;test result
                       >            trap_ne
c7ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7ad : 68              >            pla         ;load status
c7ae : 48              >            pha
                       >            cmp_flag 0
c7af : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c7b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7b3 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
c7b4 : a9ff            >            lda #$ff                ;allow test to cha
                       >
c7b6 : 48              >            pha         ;use stack to load status
c7b7 : a9cc            >            lda #$cc     ;precharge accu
c7b9 : 28              >            plp
                       >
c7ba : ff0c06          >        bbs 7,zpt,fail40441
c7bd : 7f0c06          >        bbr 7,zpt,ok40441
                       >        trap            ;bbr branch not taken
c7c0 : 4cc0c7          >        jmp *           ;failed anyway
                       >
c7c3 :                 >fail40441
                       >        trap            ;bbs branch taken
c7c3 : 4cc3c7          >        jmp *           ;failed anyway
                       >
c7c6 :                 >ok40441
                       >        tst_a $cc,$ff
c7c6 : 08              >            php         ;save flags
c7c7 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
c7c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7cb : 68              >            pla         ;load status
c7cc : 48              >            pha
                       >            cmp_flag $ff
c7cd : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c7cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7d1 : 28              >            plp         ;restore status
                       >
c7d2 : a50c            >        lda zpt
c7d4 : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne         ;zp altered
c7d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
c7d8 : e011                     cpx #$11
                                trap_ne         ;x overwritten
c7da : d0fe            >        bne *           ;failed not equal (non zero)
                        
c7dc : c022                     cpy #$22
                                trap_ne         ;y overwritten
c7de : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c7e0 : ad0002          >            lda test_case   ;previous test
c7e3 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c7e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
c7e7 : a907            >            lda #test_num   ;*** next tests' number
c7e9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                        
                        bbrc    macro           ;\1 = bitnum
                                bbr \1,zpt,skip\?
                                eor #(1<<\1)
                        skip\?
                                endm
                        bbsc    macro           ;\1 = bitnum
                                bbs \1,zpt,skip\?
                                eor #(1<<\1)
                        skip\?
                                endm
                        
c7ec : a900                     lda #0          ;combined bit test
c7ee : 850c                     sta zpt
c7f0 : a900             bbcl    lda #0
                                bbrc 0
c7f2 : 0f0c02          >        bbr 0,zpt,skip0480
c7f5 : 4901            >        eor #(1<<0)
c7f7 :                 >skip0480
                        
                                bbrc 1
c7f7 : 1f0c02          >        bbr 1,zpt,skip0481
c7fa : 4902            >        eor #(1<<1)
c7fc :                 >skip0481
                        
                                bbrc 2
c7fc : 2f0c02          >        bbr 2,zpt,skip0482
c7ff : 4904            >        eor #(1<<2)
c801 :                 >skip0482
                        
                                bbrc 3
c801 : 3f0c02          >        bbr 3,zpt,skip0483
c804 : 4908            >        eor #(1<<3)
c806 :                 >skip0483
                        
                                bbrc 4
c806 : 4f0c02          >        bbr 4,zpt,skip0484
c809 : 4910            >        eor #(1<<4)
c80b :                 >skip0484
                        
                                bbrc 5
c80b : 5f0c02          >        bbr 5,zpt,skip0485
c80e : 4920            >        eor #(1<<5)
c810 :                 >skip0485
                        
                                bbrc 6
c810 : 6f0c02          >        bbr 6,zpt,skip0486
c813 : 4940            >        eor #(1<<6)
c815 :                 >skip0486
                        
                                bbrc 7
c815 : 7f0c02          >        bbr 7,zpt,skip0487
c818 : 4980            >        eor #(1<<7)
c81a :                 >skip0487
                        
c81a : 450c                     eor zpt
                                trap_ne         ;failed bbr bitnum in accu
c81c : d0fe            >        bne *           ;failed not equal (non zero)
                        
c81e : a9ff                     lda #$ff
                                bbsc 0
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c820 : 8f0c02          >        bbs 0,zpt,skip0489
c823 : 4901            >        eor #(1<<0)
c825 :                 >skip0489
                        
                                bbsc 1
c825 : 9f0c02          >        bbs 1,zpt,skip0490
c828 : 4902            >        eor #(1<<1)
c82a :                 >skip0490
                        
                                bbsc 2
c82a : af0c02          >        bbs 2,zpt,skip0491
c82d : 4904            >        eor #(1<<2)
c82f :                 >skip0491
                        
                                bbsc 3
c82f : bf0c02          >        bbs 3,zpt,skip0492
c832 : 4908            >        eor #(1<<3)
c834 :                 >skip0492
                        
                                bbsc 4
c834 : cf0c02          >        bbs 4,zpt,skip0493
c837 : 4910            >        eor #(1<<4)
c839 :                 >skip0493
                        
                                bbsc 5
c839 : df0c02          >        bbs 5,zpt,skip0494
c83c : 4920            >        eor #(1<<5)
c83e :                 >skip0494
                        
                                bbsc 6
c83e : ef0c02          >        bbs 6,zpt,skip0495
c841 : 4940            >        eor #(1<<6)
c843 :                 >skip0495
                        
                                bbsc 7
c843 : ff0c02          >        bbs 7,zpt,skip0496
c846 : 4980            >        eor #(1<<7)
c848 :                 >skip0496
                        
c848 : 450c                     eor zpt
                                trap_ne         ;failed bbs bitnum in accu
c84a : d0fe            >        bne *           ;failed not equal (non zero)
                        
c84c : e60c                     inc zpt
c84e : d0a0                     bne bbcl
                                next_test
c850 : ad0002          >            lda test_case   ;previous test
c853 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c855 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
c857 : a908            >            lda #test_num   ;*** next tests' number
c859 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                            endif
                        
                        ; testing NOP
                        
                        nop_test    macro       ;\1 = opcode, \2 = # of bytes
                                    ldy #$42
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                    ldx #4-\2
                                    db  \1          ;test nop length
                                if \2 = 1
                                    dex
                                    dex
                                endif
                                if \2 = 2
                                    iny
                                    dex
                                endif
                                if \2 = 3
                                    iny
                                    iny
                                endif
                                    dex
                                    trap_ne         ;wrong number of bytes
                                    set_a $ff-\1,0
                                    db  \1          ;test nop integrity - flag
                                    nop
                                    nop
                                    tst_a $ff-\1,0
                                    set_a $aa-\1,$ff
                                    db  \1          ;test nop integrity - flag
                                    nop
                                    nop
                                    tst_a $aa-\1,$ff
                                    cpy #$42
                                    trap_ne         ;y changed
                                    cpx #0
                                    trap_ne         ;x changed
                                    endm
                        
                            if skip_nop = 0
                                nop_test $02,2
                                nop_test $22,2
                                nop_test $42,2
                                nop_test $62,2
                                nop_test $82,2
                                nop_test $c2,2
                                nop_test $e2,2
                                nop_test $44,2
                                nop_test $54,2
                                nop_test $d4,2
                                nop_test $f4,2
                                nop_test $5c,3
                                nop_test $dc,3
                                nop_test $fc,3
                                nop_test $03,1
                                nop_test $13,1
                                nop_test $23,1
                                nop_test $33,1
                                nop_test $43,1
                                nop_test $53,1
                                nop_test $63,1
                                nop_test $73,1
                                nop_test $83,1
                                nop_test $93,1
                                nop_test $a3,1
                                nop_test $b3,1
                                nop_test $c3,1
                                nop_test $d3,1
                                nop_test $e3,1
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                nop_test $f3,1
                                nop_test $0b,1
                                nop_test $1b,1
                                nop_test $2b,1
                                nop_test $3b,1
                                nop_test $4b,1
                                nop_test $5b,1
                                nop_test $6b,1
                                nop_test $7b,1
                                nop_test $8b,1
                                nop_test $9b,1
                                nop_test $ab,1
                                nop_test $bb,1
                                nop_test $eb,1
                                nop_test $fb,1
                            if rkwl_wdc_op = 0      ;NOPs not available on Roc
                                nop_test $07,1
                                nop_test $17,1
                                nop_test $27,1
                                nop_test $37,1
                                nop_test $47,1
                                nop_test $57,1
                                nop_test $67,1
                                nop_test $77,1
                                nop_test $87,1
                                nop_test $97,1
                                nop_test $a7,1
                                nop_test $b7,1
                                nop_test $c7,1
                                nop_test $d7,1
                                nop_test $e7,1
                                nop_test $f7,1
                                nop_test $0f,1
                                nop_test $1f,1
                                nop_test $2f,1
                                nop_test $3f,1
                                nop_test $4f,1
                                nop_test $5f,1
                                nop_test $6f,1
                                nop_test $7f,1
                                nop_test $8f,1
                                nop_test $9f,1
                                nop_test $af,1
                                nop_test $bf,1
                                nop_test $cf,1
                                nop_test $df,1
                                nop_test $ef,1
                                nop_test $ff,1
                            endif
                            if  wdc_op = 0          ;NOPs not available on WDC
                                nop_test $cb,1
                                nop_test $db,1
                            endif
                                next_test
                            endif
                        
                        ; jump indirect (test page cross bug is fixed)
c85c : a203                     ldx #3          ;prepare table
c85e : bdc8d8           ji1     lda ji_adr,x
c861 : 9dfd02                   sta ji_tab,x
c864 : ca                       dex
c865 : 10f7                     bpl ji1
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c867 : a9db                     lda #hi(ji_px) ;high address if page cross bug
c869 : 8d0302                   sta pg_x
                                set_stat 0
                       >            load_flag 0
c86c : a900            >            lda #0             ;allow test to change I
                       >
c86e : 48              >            pha         ;use stack to load status
c86f : 28              >            plp
                        
c870 : a949                     lda #'I'
c872 : a24e                     ldx #'N'
c874 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
c876 : 6cfd02                   jmp (ji_tab)
c879 : ea                       nop
                                trap_ne         ;runover protection
c87a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
c87c : 88                       dey
c87d : 88                       dey
c87e : 08               ji_ret  php             ;either SP or Y count will fai
c87f : 88                       dey
c880 : 88                       dey
c881 : 88                       dey
c882 : 28                       plp
                                trap_eq         ;returned flags OK?
c883 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
c885 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
c887 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
c889 : 50fe            >        bvc *           ;failed overflow clear
                        
c88b : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
c88d : d0fe            >        bne *           ;failed not equal (non zero)
                        
c88f : e04f                     cpx #('N'+1)
                                trap_ne
c891 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c893 : c03e                     cpy #('D'-6)
                                trap_ne
c895 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c897 : ba                       tsx             ;SP check
c898 : e0ff                     cpx #$ff
                                trap_ne
c89a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c89c : ad0002          >            lda test_case   ;previous test
c89f : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c8a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
c8a3 : a909            >            lda #test_num   ;*** next tests' number
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c8a5 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; jump indexed indirect
c8a8 : a20b                     ldx #11         ;prepare table
c8aa : bd04d9           jxi1    lda jxi_adr,x
c8ad : 9df902                   sta jxi_tab,x
c8b0 : ca                       dex
c8b1 : 10f7                     bpl jxi1
c8b3 : a9da                     lda #hi(jxi_px) ;high address if page cross bu
c8b5 : 8d0302                   sta pg_x
                                set_stat 0
                       >            load_flag 0
c8b8 : a900            >            lda #0             ;allow test to change I
                       >
c8ba : 48              >            pha         ;use stack to load status
c8bb : 28              >            plp
                        
c8bc : a958                     lda #'X'
c8be : a204                     ldx #4
c8c0 : a049                     ldy #'I'        ;N=0, V=0, Z=0, C=0
c8c2 : 7cf902                   jmp (jxi_tab,x)
c8c5 : ea                       nop
                                trap_ne         ;runover protection
c8c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
c8c8 : 88                       dey
c8c9 : 88                       dey
c8ca : 08               jxi_ret php             ;either SP or Y count will fai
c8cb : 88                       dey
c8cc : 88                       dey
c8cd : 88                       dey
c8ce : 28                       plp
                                trap_eq         ;returned flags OK?
c8cf : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
c8d1 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
c8d3 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
c8d5 : 50fe            >        bvc *           ;failed overflow clear
                        
c8d7 : c9f2                     cmp #('X'^$aa)  ;returned registers OK?
                                trap_ne
c8d9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c8db : e006                     cpx #6
                                trap_ne
c8dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
c8df : c043                     cpy #('I'-6)
                                trap_ne
c8e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c8e3 : ba                       tsx             ;SP check
c8e4 : e0ff                     cpx #$ff
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c8e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
c8e8 : a904                     lda #lo(jxp_ok) ;test with index causing a pag
c8ea : 8d0003                   sta jxp_tab
c8ed : a9c9                     lda #hi(jxp_ok)
c8ef : 8d0103                   sta jxp_tab+1
c8f2 : a901                     lda #lo(jxp_px)
c8f4 : 8d0302                   sta pg_x
c8f7 : a9c9                     lda #hi(jxp_px)
c8f9 : 8d0402                   sta pg_x+1
c8fc : a2ff                     ldx #$ff
c8fe : 7c0102                   jmp (jxp_tab-$ff,x)
                        
c901 :                  jxp_px
                                trap            ;page cross by index to wrong 
c901 : 4c01c9          >        jmp *           ;failed anyway
                        
                        
c904 :                  jxp_ok
                                next_test
c904 : ad0002          >            lda test_case   ;previous test
c907 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c909 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
c90b : a90a            >            lda #test_num   ;*** next tests' number
c90d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if ROM_vectors = 1
                        ; test BRK clears decimal mode
                                load_flag 0     ;with interrupts enabled if al
c910 : a900            >            lda #0                  ;allow test to cha
                        
c912 : 48                       pha
c913 : a942                     lda #'B'
c915 : a252                     ldx #'R'
c917 : a04b                     ldy #'K'
c919 : 28                       plp             ;N=0, V=0, Z=0, C=0
c91a : 00                       brk
c91b : 88                       dey             ;should not be executed
c91c :                  brk_ret0                ;address of break return
c91c : 08                       php             ;either SP or Y count will fai
c91d : 88                       dey
c91e : 88                       dey
c91f : 88                       dey
c920 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X st
                                trap_ne
c922 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c924 : e053                     cpx #'R'+1
                                trap_ne
c926 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c928 : c045                     cpy #'K'-6
                                trap_ne
c92a : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c92c : 68                       pla             ;returned flags OK (unchanged)
                                cmp_flag 0
c92d : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                        
                                trap_ne
c92f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c931 : ba                       tsx             ;sp?
c932 : e0ff                     cpx #$ff
                                trap_ne
c934 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        ;pass 2
                                load_flag $ff   ;with interrupts disabled if a
c936 : a9ff            >            lda #$ff                ;allow test to cha
                        
c938 : 48                       pha
c939 : a9bd                     lda #$ff-'B'
c93b : a2ad                     ldx #$ff-'R'
c93d : a0b4                     ldy #$ff-'K'
c93f : 28                       plp             ;N=1, V=1, Z=1, C=1
c940 : 00                       brk
c941 : 88                       dey             ;should not be executed
c942 :                  brk_ret1                ;address of break return
c942 : 08                       php             ;either SP or Y count will fai
c943 : 88                       dey
c944 : 88                       dey
c945 : 88                       dey
c946 : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X st
                                trap_ne
c948 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c94a : e0ae                     cpx #$ff-'R'+1
                                trap_ne
c94c : d0fe            >        bne *           ;failed not equal (non zero)
                        
c94e : c0ae                     cpy #$ff-'K'-6
                                trap_ne
c950 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c952 : 68                       pla             ;returned flags OK (unchanged)
                                cmp_flag $ff
c953 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                        
                                trap_ne
c955 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c957 : ba                       tsx             ;sp?
c958 : e0ff                     cpx #$ff
                                trap_ne
c95a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c95c : ad0002          >            lda test_case   ;previous test
c95f : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c961 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
c963 : a90b            >            lda #test_num   ;*** next tests' number
c965 : 8d0002          >            sta test_case
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            ;check_ram       ;uncomment to find altere
                        
                            endif
                        
                        ; testing accumulator increment/decrement INC A & DEC 
c968 : a2ac                     ldx #$ac    ;protect x & y
c96a : a0dc                     ldy #$dc
                                set_a $fe,$ff
                       >            load_flag $ff
c96c : a9ff            >            lda #$ff             ;allow test to change
                       >
c96e : 48              >            pha         ;use stack to load status
c96f : a9fe            >            lda #$fe     ;precharge accu
c971 : 28              >            plp
                        
c972 : 1a                       inc a           ;ff
                                tst_as $ff,$ff-zero
c973 : 48              >            pha
c974 : 08              >            php         ;save flags
c975 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c977 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c979 : 68              >            pla         ;load status
c97a : 48              >            pha
                       >            cmp_flag $ff-zero
c97b : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c97d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c97f : 28              >            plp         ;restore status
c980 : 68              >            pla
                        
c981 : 1a                       inc a           ;00
                                tst_as 0,$ff-minus
c982 : 48              >            pha
c983 : 08              >            php         ;save flags
c984 : c900            >            cmp #0     ;test result
                       >            trap_ne
c986 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c988 : 68              >            pla         ;load status
c989 : 48              >            pha
                       >            cmp_flag $ff-minus
c98a : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c98c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c98e : 28              >            plp         ;restore status
c98f : 68              >            pla
                        
c990 : 1a                       inc a           ;01
                                tst_as 1,$ff-minus-zero
c991 : 48              >            pha
c992 : 08              >            php         ;save flags
c993 : c901            >            cmp #1     ;test result
                       >            trap_ne
c995 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c997 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

c998 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
c999 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
c99b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c99d : 28              >            plp         ;restore status
c99e : 68              >            pla
                        
c99f : 3a                       dec a           ;00
                                tst_as 0,$ff-minus
c9a0 : 48              >            pha
c9a1 : 08              >            php         ;save flags
c9a2 : c900            >            cmp #0     ;test result
                       >            trap_ne
c9a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9a6 : 68              >            pla         ;load status
c9a7 : 48              >            pha
                       >            cmp_flag $ff-minus
c9a8 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c9aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9ac : 28              >            plp         ;restore status
c9ad : 68              >            pla
                        
c9ae : 3a                       dec a           ;ff
                                tst_as $ff,$ff-zero
c9af : 48              >            pha
c9b0 : 08              >            php         ;save flags
c9b1 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c9b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9b5 : 68              >            pla         ;load status
c9b6 : 48              >            pha
                       >            cmp_flag $ff-zero
c9b7 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c9b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9bb : 28              >            plp         ;restore status
c9bc : 68              >            pla
                        
c9bd : 3a                       dec a           ;fe
                                set_a $fe,0
                       >            load_flag 0
c9be : a900            >            lda #0             ;allow test to change I
                       >
c9c0 : 48              >            pha         ;use stack to load status
c9c1 : a9fe            >            lda #$fe     ;precharge accu
c9c3 : 28              >            plp
                        
c9c4 : 1a                       inc a           ;ff
                                tst_as $ff,minus
c9c5 : 48              >            pha
c9c6 : 08              >            php         ;save flags
c9c7 : c9ff            >            cmp #$ff     ;test result
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
c9c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9cb : 68              >            pla         ;load status
c9cc : 48              >            pha
                       >            cmp_flag minus
c9cd : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c9cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9d1 : 28              >            plp         ;restore status
c9d2 : 68              >            pla
                        
c9d3 : 1a                       inc a           ;00
                                tst_as 0,zero
c9d4 : 48              >            pha
c9d5 : 08              >            php         ;save flags
c9d6 : c900            >            cmp #0     ;test result
                       >            trap_ne
c9d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9da : 68              >            pla         ;load status
c9db : 48              >            pha
                       >            cmp_flag zero
c9dc : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c9de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9e0 : 28              >            plp         ;restore status
c9e1 : 68              >            pla
                        
c9e2 : 1a                       inc a           ;01
                                tst_as 1,0
c9e3 : 48              >            pha
c9e4 : 08              >            php         ;save flags
c9e5 : c901            >            cmp #1     ;test result
                       >            trap_ne
c9e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9e9 : 68              >            pla         ;load status
c9ea : 48              >            pha
                       >            cmp_flag 0
c9eb : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c9ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9ef : 28              >            plp         ;restore status
c9f0 : 68              >            pla
                        
c9f1 : 3a                       dec a           ;00
                                tst_as 0,zero
c9f2 : 48              >            pha
c9f3 : 08              >            php         ;save flags
c9f4 : c900            >            cmp #0     ;test result
                       >            trap_ne
c9f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9f8 : 68              >            pla         ;load status
c9f9 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            cmp_flag zero
c9fa : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c9fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c9fe : 28              >            plp         ;restore status
c9ff : 68              >            pla
                        
ca00 : 3a                       dec a           ;ff
                                tst_as $ff,minus
ca01 : 48              >            pha
ca02 : 08              >            php         ;save flags
ca03 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
ca05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca07 : 68              >            pla         ;load status
ca08 : 48              >            pha
                       >            cmp_flag minus
ca09 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
ca0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ca0d : 28              >            plp         ;restore status
ca0e : 68              >            pla
                        
ca0f : e0ac                     cpx #$ac
                                trap_ne     ;x altered during test
ca11 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca13 : c0dc                     cpy #$dc
                                trap_ne     ;y altered during test
ca15 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca17 : ba                       tsx
ca18 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
ca1a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
ca1c : ad0002          >            lda test_case   ;previous test
ca1f : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ca21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
ca23 : a90c            >            lda #test_num   ;*** next tests' number
ca25 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing load / store accumulator LDA / STA (zp)
ca28 : a299                     ldx #$99    ;protect x & y
ca2a : a066                     ldy #$66
                                set_stat 0
                       >            load_flag 0
ca2c : a900            >            lda #0             ;allow test to change I
                       >
ca2e : 48              >            pha         ;use stack to load status
ca2f : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
ca30 : b224                     lda (ind1)
ca32 : 08                       php         ;test stores do not alter flags
ca33 : 49c3                     eor #$c3
ca35 : 28                       plp
ca36 : 9230                     sta (indt)
ca38 : 08                       php         ;flags after load/store sequence
ca39 : 49c3                     eor #$c3
ca3b : c9c3                     cmp #$c3    ;test result
                                trap_ne
ca3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca3f : 68                       pla         ;load status
                                eor_flag 0
ca40 : 4930            >            eor #0|fao         ;invert expected flags 
                        
ca42 : cd1502                   cmp fLDx    ;test flags
                                trap_ne
ca45 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
ca47 : a900            >            lda #0             ;allow test to change I
                       >
ca49 : 48              >            pha         ;use stack to load status
ca4a : 28              >            plp
                        
ca4b : b226                     lda (ind1+2)
ca4d : 08                       php         ;test stores do not alter flags
ca4e : 49c3                     eor #$c3
ca50 : 28                       plp
ca51 : 9232                     sta (indt+2)
ca53 : 08                       php         ;flags after load/store sequence
ca54 : 49c3                     eor #$c3
ca56 : c982                     cmp #$82    ;test result
                                trap_ne
ca58 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca5a : 68                       pla         ;load status
                                eor_flag 0
ca5b : 4930            >            eor #0|fao         ;invert expected flags 
                        
ca5d : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
ca60 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
ca62 : a900            >            lda #0             ;allow test to change I
                       >
ca64 : 48              >            pha         ;use stack to load status
ca65 : 28              >            plp
                        
ca66 : b228                     lda (ind1+4)
ca68 : 08                       php         ;test stores do not alter flags
ca69 : 49c3                     eor #$c3
ca6b : 28                       plp
ca6c : 9234                     sta (indt+4)
ca6e : 08                       php         ;flags after load/store sequence
ca6f : 49c3                     eor #$c3
ca71 : c941                     cmp #$41    ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ca73 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca75 : 68                       pla         ;load status
                                eor_flag 0
ca76 : 4930            >            eor #0|fao         ;invert expected flags 
                        
ca78 : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
ca7b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
ca7d : a900            >            lda #0             ;allow test to change I
                       >
ca7f : 48              >            pha         ;use stack to load status
ca80 : 28              >            plp
                        
ca81 : b22a                     lda (ind1+6)
ca83 : 08                       php         ;test stores do not alter flags
ca84 : 49c3                     eor #$c3
ca86 : 28                       plp
ca87 : 9236                     sta (indt+6)
ca89 : 08                       php         ;flags after load/store sequence
ca8a : 49c3                     eor #$c3
ca8c : c900                     cmp #0      ;test result
                                trap_ne
ca8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca90 : 68                       pla         ;load status
                                eor_flag 0
ca91 : 4930            >            eor #0|fao         ;invert expected flags 
                        
ca93 : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
ca96 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca98 : e099                     cpx #$99
                                trap_ne     ;x altered during test
ca9a : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca9c : c066                     cpy #$66
                                trap_ne     ;y altered during test
ca9e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
caa0 : a003                     ldy #3      ;testing store result
caa2 : a200                     ldx #0
caa4 : b90502           tstai1  lda abst,y
caa7 : 49c3                     eor #$c3
caa9 : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
caac : d0fe            >        bne *           ;failed not equal (non zero)
                        
caae : 8a                       txa
caaf : 990502                   sta abst,y  ;clear
cab2 : 88                       dey
cab3 : 10ef                     bpl tstai1
                        
cab5 : a299                     ldx #$99    ;protect x & y
cab7 : a066                     ldy #$66
                                set_stat $ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cab9 : a9ff            >            lda #$ff             ;allow test to change
                       >
cabb : 48              >            pha         ;use stack to load status
cabc : 28              >            plp
                        
cabd : b224                     lda (ind1)
cabf : 08                       php         ;test stores do not alter flags
cac0 : 49c3                     eor #$c3
cac2 : 28                       plp
cac3 : 9230                     sta (indt)
cac5 : 08                       php         ;flags after load/store sequence
cac6 : 49c3                     eor #$c3
cac8 : c9c3                     cmp #$c3    ;test result
                                trap_ne
caca : d0fe            >        bne *           ;failed not equal (non zero)
                        
cacc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cacd : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cacf : cd1502                   cmp fLDx    ;test flags
                                trap_ne
cad2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cad4 : a9ff            >            lda #$ff             ;allow test to change
                       >
cad6 : 48              >            pha         ;use stack to load status
cad7 : 28              >            plp
                        
cad8 : b226                     lda (ind1+2)
cada : 08                       php         ;test stores do not alter flags
cadb : 49c3                     eor #$c3
cadd : 28                       plp
cade : 9232                     sta (indt+2)
cae0 : 08                       php         ;flags after load/store sequence
cae1 : 49c3                     eor #$c3
cae3 : c982                     cmp #$82    ;test result
                                trap_ne
cae5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cae7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cae8 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
caea : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
caed : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
caef : a9ff            >            lda #$ff             ;allow test to change
                       >
caf1 : 48              >            pha         ;use stack to load status
caf2 : 28              >            plp
                        
caf3 : b228                     lda (ind1+4)
caf5 : 08                       php         ;test stores do not alter flags
caf6 : 49c3                     eor #$c3
caf8 : 28                       plp
caf9 : 9234                     sta (indt+4)
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cafb : 08                       php         ;flags after load/store sequence
cafc : 49c3                     eor #$c3
cafe : c941                     cmp #$41    ;test result
                                trap_ne
cb00 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb02 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cb03 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cb05 : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
cb08 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cb0a : a9ff            >            lda #$ff             ;allow test to change
                       >
cb0c : 48              >            pha         ;use stack to load status
cb0d : 28              >            plp
                        
cb0e : b22a                     lda (ind1+6)
cb10 : 08                       php         ;test stores do not alter flags
cb11 : 49c3                     eor #$c3
cb13 : 28                       plp
cb14 : 9236                     sta (indt+6)
cb16 : 08                       php         ;flags after load/store sequence
cb17 : 49c3                     eor #$c3
cb19 : c900                     cmp #0      ;test result
                                trap_ne
cb1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb1d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cb1e : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cb20 : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
cb23 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb25 : e099                     cpx #$99
                                trap_ne     ;x altered during test
cb27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb29 : c066                     cpy #$66
                                trap_ne     ;y altered during test
cb2b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
cb2d : a003                     ldy #3      ;testing store result
cb2f : a200                     ldx #0
cb31 : b90502           tstai2  lda abst,y
cb34 : 49c3                     eor #$c3
cb36 : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
cb39 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb3b : 8a                       txa
cb3c : 990502                   sta abst,y  ;clear
cb3f : 88                       dey
cb40 : 10ef                     bpl tstai2
cb42 : ba                       tsx
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cb43 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
cb45 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
cb47 : ad0002          >            lda test_case   ;previous test
cb4a : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
cb4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
cb4e : a90d            >            lda #test_num   ;*** next tests' number
cb50 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing STZ - zp / abs / zp,x / abs,x
cb53 : a07b                     ldy #123    ;protect y
cb55 : a204                     ldx #4      ;precharge test area
cb57 : a907                     lda #7
cb59 : 950c             tstz1   sta zpt,x
cb5b : 0a                       asl a
cb5c : ca                       dex
cb5d : 10fa                     bpl tstz1
cb5f : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
cb61 : a9ff            >            lda #$ff             ;allow test to change
                       >
cb63 : 48              >            pha         ;use stack to load status
cb64 : a955            >            lda #$55     ;precharge accu
cb66 : 28              >            plp
                        
cb67 : 640c                     stz zpt
cb69 : 640d                     stz zpt+1
cb6b : 640e                     stz zpt+2
cb6d : 640f                     stz zpt+3
cb6f : 6410                     stz zpt+4
                                tst_a $55,$ff
cb71 : 08              >            php         ;save flags
cb72 : c955            >            cmp #$55     ;test result
                       >            trap_ne
cb74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb76 : 68              >            pla         ;load status
cb77 : 48              >            pha
                       >            cmp_flag $ff
cb78 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cb7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cb7c : 28              >            plp         ;restore status
                        
cb7d : b50c             tstz2   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
cb7f : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb81 : ca                       dex
cb82 : 10f9                     bpl tstz2
cb84 : a204                     ldx #4      ;precharge test area
cb86 : a907                     lda #7
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cb88 : 950c             tstz3   sta zpt,x
cb8a : 0a                       asl a
cb8b : ca                       dex
cb8c : 10fa                     bpl tstz3
cb8e : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
cb90 : a900            >            lda #0             ;allow test to change I
                       >
cb92 : 48              >            pha         ;use stack to load status
cb93 : a9aa            >            lda #$aa     ;precharge accu
cb95 : 28              >            plp
                        
cb96 : 640c                     stz zpt
cb98 : 640d                     stz zpt+1
cb9a : 640e                     stz zpt+2
cb9c : 640f                     stz zpt+3
cb9e : 6410                     stz zpt+4
                                tst_a $aa,0
cba0 : 08              >            php         ;save flags
cba1 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
cba3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cba5 : 68              >            pla         ;load status
cba6 : 48              >            pha
                       >            cmp_flag 0
cba7 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cba9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbab : 28              >            plp         ;restore status
                        
cbac : b50c             tstz4   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
cbae : d0fe            >        bne *           ;failed not equal (non zero)
                        
cbb0 : ca                       dex
cbb1 : 10f9                     bpl tstz4
                        
cbb3 : a204                     ldx #4      ;precharge test area
cbb5 : a907                     lda #7
cbb7 : 9d0502           tstz5   sta abst,x
cbba : 0a                       asl a
cbbb : ca                       dex
cbbc : 10f9                     bpl tstz5
cbbe : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
cbc0 : a9ff            >            lda #$ff             ;allow test to change
                       >
cbc2 : 48              >            pha         ;use stack to load status
cbc3 : a955            >            lda #$55     ;precharge accu
cbc5 : 28              >            plp
                        
cbc6 : 9c0502                   stz abst
cbc9 : 9c0602                   stz abst+1
cbcc : 9c0702                   stz abst+2
cbcf : 9c0802                   stz abst+3
cbd2 : 9c0902                   stz abst+4
                                tst_a $55,$ff
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cbd5 : 08              >            php         ;save flags
cbd6 : c955            >            cmp #$55     ;test result
                       >            trap_ne
cbd8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbda : 68              >            pla         ;load status
cbdb : 48              >            pha
                       >            cmp_flag $ff
cbdc : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cbde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cbe0 : 28              >            plp         ;restore status
                        
cbe1 : bd0502           tstz6   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
cbe4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cbe6 : ca                       dex
cbe7 : 10f8                     bpl tstz6
cbe9 : a204                     ldx #4      ;precharge test area
cbeb : a907                     lda #7
cbed : 9d0502           tstz7   sta abst,x
cbf0 : 0a                       asl a
cbf1 : ca                       dex
cbf2 : 10f9                     bpl tstz7
cbf4 : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
cbf6 : a900            >            lda #0             ;allow test to change I
                       >
cbf8 : 48              >            pha         ;use stack to load status
cbf9 : a9aa            >            lda #$aa     ;precharge accu
cbfb : 28              >            plp
                        
cbfc : 9c0502                   stz abst
cbff : 9c0602                   stz abst+1
cc02 : 9c0702                   stz abst+2
cc05 : 9c0802                   stz abst+3
cc08 : 9c0902                   stz abst+4
                                tst_a $aa,0
cc0b : 08              >            php         ;save flags
cc0c : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
cc0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc10 : 68              >            pla         ;load status
cc11 : 48              >            pha
                       >            cmp_flag 0
cc12 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cc14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc16 : 28              >            plp         ;restore status
                        
cc17 : bd0502           tstz8   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
cc1a : d0fe            >        bne *           ;failed not equal (non zero)
                        
cc1c : ca                       dex
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cc1d : 10f8                     bpl tstz8
                        
cc1f : a204                     ldx #4      ;precharge test area
cc21 : a907                     lda #7
cc23 : 950c             tstz11  sta zpt,x
cc25 : 0a                       asl a
cc26 : ca                       dex
cc27 : 10fa                     bpl tstz11
cc29 : a204                     ldx #4
cc2b :                  tstz15
                                set_a $55,$ff
                       >            load_flag $ff
cc2b : a9ff            >            lda #$ff             ;allow test to change
                       >
cc2d : 48              >            pha         ;use stack to load status
cc2e : a955            >            lda #$55     ;precharge accu
cc30 : 28              >            plp
                        
cc31 : 740c                     stz zpt,x
                                tst_a $55,$ff
cc33 : 08              >            php         ;save flags
cc34 : c955            >            cmp #$55     ;test result
                       >            trap_ne
cc36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc38 : 68              >            pla         ;load status
cc39 : 48              >            pha
                       >            cmp_flag $ff
cc3a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cc3c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc3e : 28              >            plp         ;restore status
                        
cc3f : ca                       dex
cc40 : 10e9                     bpl tstz15
cc42 : a204                     ldx #4
cc44 : b50c             tstz12  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
cc46 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cc48 : ca                       dex
cc49 : 10f9                     bpl tstz12
cc4b : a204                     ldx #4      ;precharge test area
cc4d : a907                     lda #7
cc4f : 950c             tstz13  sta zpt,x
cc51 : 0a                       asl a
cc52 : ca                       dex
cc53 : 10fa                     bpl tstz13
cc55 : a204                     ldx #4
cc57 :                  tstz16
                                set_a $aa,0
                       >            load_flag 0
cc57 : a900            >            lda #0             ;allow test to change I
                       >
cc59 : 48              >            pha         ;use stack to load status
cc5a : a9aa            >            lda #$aa     ;precharge accu
cc5c : 28              >            plp
                        
cc5d : 740c                     stz zpt,x
                                tst_a $aa,0
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cc5f : 08              >            php         ;save flags
cc60 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
cc62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc64 : 68              >            pla         ;load status
cc65 : 48              >            pha
                       >            cmp_flag 0
cc66 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
cc68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc6a : 28              >            plp         ;restore status
                        
cc6b : ca                       dex
cc6c : 10e9                     bpl tstz16
cc6e : a204                     ldx #4
cc70 : b50c             tstz14  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
cc72 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cc74 : ca                       dex
cc75 : 10f9                     bpl tstz14
                        
cc77 : a204                     ldx #4      ;precharge test area
cc79 : a907                     lda #7
cc7b : 9d0502           tstz21  sta abst,x
cc7e : 0a                       asl a
cc7f : ca                       dex
cc80 : 10f9                     bpl tstz21
cc82 : a204                     ldx #4
cc84 :                  tstz25
                                set_a $55,$ff
                       >            load_flag $ff
cc84 : a9ff            >            lda #$ff             ;allow test to change
                       >
cc86 : 48              >            pha         ;use stack to load status
cc87 : a955            >            lda #$55     ;precharge accu
cc89 : 28              >            plp
                        
cc8a : 9e0502                   stz abst,x
                                tst_a $55,$ff
cc8d : 08              >            php         ;save flags
cc8e : c955            >            cmp #$55     ;test result
                       >            trap_ne
cc90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc92 : 68              >            pla         ;load status
cc93 : 48              >            pha
                       >            cmp_flag $ff
cc94 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cc96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cc98 : 28              >            plp         ;restore status
                        
cc99 : ca                       dex
cc9a : 10e8                     bpl tstz25
cc9c : a204                     ldx #4
cc9e : bd0502           tstz22  lda abst,x   ;verify zeros stored
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                trap_ne     ;non zero after STZ zp
cca1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cca3 : ca                       dex
cca4 : 10f8                     bpl tstz22
cca6 : a204                     ldx #4      ;precharge test area
cca8 : a907                     lda #7
ccaa : 9d0502           tstz23  sta abst,x
ccad : 0a                       asl a
ccae : ca                       dex
ccaf : 10f9                     bpl tstz23
ccb1 : a204                     ldx #4
ccb3 :                  tstz26
                                set_a $aa,0
                       >            load_flag 0
ccb3 : a900            >            lda #0             ;allow test to change I
                       >
ccb5 : 48              >            pha         ;use stack to load status
ccb6 : a9aa            >            lda #$aa     ;precharge accu
ccb8 : 28              >            plp
                        
ccb9 : 9e0502                   stz abst,x
                                tst_a $aa,0
ccbc : 08              >            php         ;save flags
ccbd : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
ccbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccc1 : 68              >            pla         ;load status
ccc2 : 48              >            pha
                       >            cmp_flag 0
ccc3 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ccc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccc7 : 28              >            plp         ;restore status
                        
ccc8 : ca                       dex
ccc9 : 10e8                     bpl tstz26
cccb : a204                     ldx #4
cccd : bd0502           tstz24  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
ccd0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ccd2 : ca                       dex
ccd3 : 10f8                     bpl tstz24
                        
ccd5 : c07b                     cpy #123
                                trap_ne     ;y altered during test
ccd7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ccd9 : ba                       tsx
ccda : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
ccdc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
ccde : ad0002          >            lda test_case   ;previous test
cce1 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
cce3 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
000e =                 >test_num = test_num + 1
cce5 : a90e            >            lda #test_num   ;*** next tests' number
cce7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing BIT - zp,x / abs,x / #
ccea : a042                     ldy #$42
ccec : a203                     ldx #3
                                set_a $ff,0
                       >            load_flag 0
ccee : a900            >            lda #0             ;allow test to change I
                       >
ccf0 : 48              >            pha         ;use stack to load status
ccf1 : a9ff            >            lda #$ff     ;precharge accu
ccf3 : 28              >            plp
                        
ccf4 : 3413                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,fz
ccf6 : 08              >            php         ;save flags
ccf7 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
ccf9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ccfb : 68              >            pla         ;load status
ccfc : 48              >            pha
                       >            cmp_flag fz
ccfd : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
ccff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd01 : 28              >            plp         ;restore status
                        
cd02 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
cd03 : a900            >            lda #0             ;allow test to change I
                       >
cd05 : 48              >            pha         ;use stack to load status
cd06 : a901            >            lda #1     ;precharge accu
cd08 : 28              >            plp
                        
cd09 : 3413                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
cd0b : 08              >            php         ;save flags
cd0c : c901            >            cmp #1     ;test result
                       >            trap_ne
cd0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd10 : 68              >            pla         ;load status
cd11 : 48              >            pha
                       >            cmp_flag fv
cd12 : c970            >            cmp #(fv|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
cd14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd16 : 28              >            plp         ;restore status
                        
cd17 : ca                       dex
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                set_a 1,0
                       >            load_flag 0
cd18 : a900            >            lda #0             ;allow test to change I
                       >
cd1a : 48              >            pha         ;use stack to load status
cd1b : a901            >            lda #1     ;precharge accu
cd1d : 28              >            plp
                        
cd1e : 3413                     bit zp1,x   ;82 - should set N (M7) & Z / clea
                                tst_a 1,fnz
cd20 : 08              >            php         ;save flags
cd21 : c901            >            cmp #1     ;test result
                       >            trap_ne
cd23 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd25 : 68              >            pla         ;load status
cd26 : 48              >            pha
                       >            cmp_flag fnz
cd27 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cd29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd2b : 28              >            plp         ;restore status
                        
cd2c : ca                       dex
                                set_a 1,0
                       >            load_flag 0
cd2d : a900            >            lda #0             ;allow test to change I
                       >
cd2f : 48              >            pha         ;use stack to load status
cd30 : a901            >            lda #1     ;precharge accu
cd32 : 28              >            plp
                        
cd33 : 3413                     bit zp1,x   ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,fnv
cd35 : 08              >            php         ;save flags
cd36 : c901            >            cmp #1     ;test result
                       >            trap_ne
cd38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd3a : 68              >            pla         ;load status
cd3b : 48              >            pha
                       >            cmp_flag fnv
cd3c : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cd3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd40 : 28              >            plp         ;restore status
                        
                        
                                set_a 1,$ff
                       >            load_flag $ff
cd41 : a9ff            >            lda #$ff             ;allow test to change
                       >
cd43 : 48              >            pha         ;use stack to load status
cd44 : a901            >            lda #1     ;precharge accu
cd46 : 28              >            plp
                        
cd47 : 3413                     bit zp1,x   ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,~fz
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cd49 : 08              >            php         ;save flags
cd4a : c901            >            cmp #1     ;test result
                       >            trap_ne
cd4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd4e : 68              >            pla         ;load status
cd4f : 48              >            pha
                       >            cmp_flag ~fz
cd50 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cd52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd54 : 28              >            plp         ;restore status
                        
cd55 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
cd56 : a9ff            >            lda #$ff             ;allow test to change
                       >
cd58 : 48              >            pha         ;use stack to load status
cd59 : a901            >            lda #1     ;precharge accu
cd5b : 28              >            plp
                        
cd5c : 3413                     bit zp1,x   ;82 - should set N (M7) & Z / clea
                                tst_a 1,~fv
cd5e : 08              >            php         ;save flags
cd5f : c901            >            cmp #1     ;test result
                       >            trap_ne
cd61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd63 : 68              >            pla         ;load status
cd64 : 48              >            pha
                       >            cmp_flag ~fv
cd65 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cd67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd69 : 28              >            plp         ;restore status
                        
cd6a : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
cd6b : a9ff            >            lda #$ff             ;allow test to change
                       >
cd6d : 48              >            pha         ;use stack to load status
cd6e : a901            >            lda #1     ;precharge accu
cd70 : 28              >            plp
                        
cd71 : 3413                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
cd73 : 08              >            php         ;save flags
cd74 : c901            >            cmp #1     ;test result
                       >            trap_ne
cd76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd78 : 68              >            pla         ;load status
cd79 : 48              >            pha
                       >            cmp_flag ~fnz
cd7a : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
cd7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd7e : 28              >            plp         ;restore status
                        
cd7f : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
cd80 : a9ff            >            lda #$ff             ;allow test to change
                       >
cd82 : 48              >            pha         ;use stack to load status
cd83 : a9ff            >            lda #$ff     ;precharge accu
cd85 : 28              >            plp
                        
cd86 : 3413                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
cd88 : 08              >            php         ;save flags
cd89 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
cd8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd8d : 68              >            pla         ;load status
cd8e : 48              >            pha
                       >            cmp_flag ~fnv
cd8f : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
cd91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cd93 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,0
                       >            load_flag 0
cd94 : a900            >            lda #0             ;allow test to change I
                       >
cd96 : 48              >            pha         ;use stack to load status
cd97 : a9ff            >            lda #$ff     ;precharge accu
cd99 : 28              >            plp
                        
cd9a : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,fz
cd9d : 08              >            php         ;save flags
cd9e : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
cda0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cda2 : 68              >            pla         ;load status
cda3 : 48              >            pha
                       >            cmp_flag fz
cda4 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
cda6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cda8 : 28              >            plp         ;restore status
                        
cda9 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
cdaa : a900            >            lda #0             ;allow test to change I
                       >
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cdac : 48              >            pha         ;use stack to load status
cdad : a901            >            lda #1     ;precharge accu
cdaf : 28              >            plp
                        
cdb0 : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
cdb3 : 08              >            php         ;save flags
cdb4 : c901            >            cmp #1     ;test result
                       >            trap_ne
cdb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdb8 : 68              >            pla         ;load status
cdb9 : 48              >            pha
                       >            cmp_flag fv
cdba : c970            >            cmp #(fv|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
cdbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdbe : 28              >            plp         ;restore status
                        
cdbf : ca                       dex
                                set_a 1,0
                       >            load_flag 0
cdc0 : a900            >            lda #0             ;allow test to change I
                       >
cdc2 : 48              >            pha         ;use stack to load status
cdc3 : a901            >            lda #1     ;precharge accu
cdc5 : 28              >            plp
                        
cdc6 : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clea
                                tst_a 1,fnz
cdc9 : 08              >            php         ;save flags
cdca : c901            >            cmp #1     ;test result
                       >            trap_ne
cdcc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdce : 68              >            pla         ;load status
cdcf : 48              >            pha
                       >            cmp_flag fnz
cdd0 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cdd2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdd4 : 28              >            plp         ;restore status
                        
cdd5 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
cdd6 : a900            >            lda #0             ;allow test to change I
                       >
cdd8 : 48              >            pha         ;use stack to load status
cdd9 : a901            >            lda #1     ;precharge accu
cddb : 28              >            plp
                        
cddc : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,fnv
cddf : 08              >            php         ;save flags
cde0 : c901            >            cmp #1     ;test result
                       >            trap_ne
cde2 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
cde4 : 68              >            pla         ;load status
cde5 : 48              >            pha
                       >            cmp_flag fnv
cde6 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cde8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdea : 28              >            plp         ;restore status
                        
                        
                                set_a 1,$ff
                       >            load_flag $ff
cdeb : a9ff            >            lda #$ff             ;allow test to change
                       >
cded : 48              >            pha         ;use stack to load status
cdee : a901            >            lda #1     ;precharge accu
cdf0 : 28              >            plp
                        
cdf1 : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,~fz
cdf4 : 08              >            php         ;save flags
cdf5 : c901            >            cmp #1     ;test result
                       >            trap_ne
cdf7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdf9 : 68              >            pla         ;load status
cdfa : 48              >            pha
                       >            cmp_flag ~fz
cdfb : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cdfd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cdff : 28              >            plp         ;restore status
                        
ce00 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
ce01 : a9ff            >            lda #$ff             ;allow test to change
                       >
ce03 : 48              >            pha         ;use stack to load status
ce04 : a901            >            lda #1     ;precharge accu
ce06 : 28              >            plp
                        
ce07 : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clea
                                tst_a 1,~fv
ce0a : 08              >            php         ;save flags
ce0b : c901            >            cmp #1     ;test result
                       >            trap_ne
ce0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce0f : 68              >            pla         ;load status
ce10 : 48              >            pha
                       >            cmp_flag ~fv
ce11 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ce13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce15 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
ce16 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
ce17 : a9ff            >            lda #$ff             ;allow test to change
                       >
ce19 : 48              >            pha         ;use stack to load status
ce1a : a901            >            lda #1     ;precharge accu
ce1c : 28              >            plp
                        
ce1d : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
ce20 : 08              >            php         ;save flags
ce21 : c901            >            cmp #1     ;test result
                       >            trap_ne
ce23 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce25 : 68              >            pla         ;load status
ce26 : 48              >            pha
                       >            cmp_flag ~fnz
ce27 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
ce29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce2b : 28              >            plp         ;restore status
                        
ce2c : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
ce2d : a9ff            >            lda #$ff             ;allow test to change
                       >
ce2f : 48              >            pha         ;use stack to load status
ce30 : a9ff            >            lda #$ff     ;precharge accu
ce32 : 28              >            plp
                        
ce33 : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
ce36 : 08              >            php         ;save flags
ce37 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
ce39 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce3b : 68              >            pla         ;load status
ce3c : 48              >            pha
                       >            cmp_flag ~fnv
ce3d : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
ce3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce41 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,0
                       >            load_flag 0
ce42 : a900            >            lda #0             ;allow test to change I
                       >
ce44 : 48              >            pha         ;use stack to load status
ce45 : a9ff            >            lda #$ff     ;precharge accu
ce47 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ce48 : 8900                     bit #$00    ;00 - should set Z
                                tst_a $ff,fz
ce4a : 08              >            php         ;save flags
ce4b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
ce4d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce4f : 68              >            pla         ;load status
ce50 : 48              >            pha
                       >            cmp_flag fz
ce51 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
ce53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce55 : 28              >            plp         ;restore status
                        
ce56 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
ce57 : a900            >            lda #0             ;allow test to change I
                       >
ce59 : 48              >            pha         ;use stack to load status
ce5a : a901            >            lda #1     ;precharge accu
ce5c : 28              >            plp
                        
ce5d : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,0
ce5f : 08              >            php         ;save flags
ce60 : c901            >            cmp #1     ;test result
                       >            trap_ne
ce62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce64 : 68              >            pla         ;load status
ce65 : 48              >            pha
                       >            cmp_flag 0
ce66 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ce68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce6a : 28              >            plp         ;restore status
                        
                        ; *** DEBUG INFO ***
                        ; if it fails the previous test and your BIT # has set
                        ; see http://forum.6502.org/viewtopic.php?f=2&t=2241&p
                        ; why it shouldn't alter N or V flags on a BIT #
ce6b : ca                       dex
                                set_a 1,0
                       >            load_flag 0
ce6c : a900            >            lda #0             ;allow test to change I
                       >
ce6e : 48              >            pha         ;use stack to load status
ce6f : a901            >            lda #1     ;precharge accu
ce71 : 28              >            plp
                        
ce72 : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,fz
ce74 : 08              >            php         ;save flags
ce75 : c901            >            cmp #1     ;test result
                       >            trap_ne
ce77 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
ce79 : 68              >            pla         ;load status
ce7a : 48              >            pha
                       >            cmp_flag fz
ce7b : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
ce7d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce7f : 28              >            plp         ;restore status
                        
ce80 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
ce81 : a900            >            lda #0             ;allow test to change I
                       >
ce83 : 48              >            pha         ;use stack to load status
ce84 : a901            >            lda #1     ;precharge accu
ce86 : 28              >            plp
                        
ce87 : 89c3                     bit #$c3    ;c3 - should clear Z
                                tst_a 1,0
ce89 : 08              >            php         ;save flags
ce8a : c901            >            cmp #1     ;test result
                       >            trap_ne
ce8c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce8e : 68              >            pla         ;load status
ce8f : 48              >            pha
                       >            cmp_flag 0
ce90 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
ce92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ce94 : 28              >            plp         ;restore status
                        
                        
                                set_a 1,$ff
                       >            load_flag $ff
ce95 : a9ff            >            lda #$ff             ;allow test to change
                       >
ce97 : 48              >            pha         ;use stack to load status
ce98 : a901            >            lda #1     ;precharge accu
ce9a : 28              >            plp
                        
ce9b : 89c3                     bit #$c3    ;c3 - clear Z
                                tst_a 1,~fz
ce9d : 08              >            php         ;save flags
ce9e : c901            >            cmp #1     ;test result
                       >            trap_ne
cea0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cea2 : 68              >            pla         ;load status
cea3 : 48              >            pha
                       >            cmp_flag ~fz
cea4 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cea6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cea8 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
cea9 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
ceaa : a9ff            >            lda #$ff             ;allow test to change
                       >
ceac : 48              >            pha         ;use stack to load status
cead : a901            >            lda #1     ;precharge accu
ceaf : 28              >            plp
                        
ceb0 : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,$ff
ceb2 : 08              >            php         ;save flags
ceb3 : c901            >            cmp #1     ;test result
                       >            trap_ne
ceb5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ceb7 : 68              >            pla         ;load status
ceb8 : 48              >            pha
                       >            cmp_flag $ff
ceb9 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cebb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cebd : 28              >            plp         ;restore status
                        
cebe : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
cebf : a9ff            >            lda #$ff             ;allow test to change
                       >
cec1 : 48              >            pha         ;use stack to load status
cec2 : a901            >            lda #1     ;precharge accu
cec4 : 28              >            plp
                        
cec5 : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,~fz
cec7 : 08              >            php         ;save flags
cec8 : c901            >            cmp #1     ;test result
                       >            trap_ne
ceca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cecc : 68              >            pla         ;load status
cecd : 48              >            pha
                       >            cmp_flag ~fz
cece : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ced0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ced2 : 28              >            plp         ;restore status
                        
ced3 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
ced4 : a9ff            >            lda #$ff             ;allow test to change
                       >
ced6 : 48              >            pha         ;use stack to load status
ced7 : a9ff            >            lda #$ff     ;precharge accu
ced9 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

ceda : 8900                     bit #$00   ;00 - should set Z
                                tst_a $ff,$ff
cedc : 08              >            php         ;save flags
cedd : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
cedf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cee1 : 68              >            pla         ;load status
cee2 : 48              >            pha
                       >            cmp_flag $ff
cee3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
cee5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cee7 : 28              >            plp         ;restore status
                        
                        
cee8 : e003                     cpx #3
                                trap_ne     ;x altered during test
ceea : d0fe            >        bne *           ;failed not equal (non zero)
                        
ceec : c042                     cpy #$42
                                trap_ne     ;y altered during test
ceee : d0fe            >        bne *           ;failed not equal (non zero)
                        
cef0 : ba                       tsx
cef1 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
cef3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
cef5 : ad0002          >            lda test_case   ;previous test
cef8 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
cefa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
cefc : a90f            >            lda #test_num   ;*** next tests' number
cefe : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing TRB, TSB - zp / abs
                        
                        trbt    macro       ;\1 = memory, \2 = flags
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                trb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+3
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong
                                endm
                        
                        tsbt    macro       ;\1 = memory, \2 = flags
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                tsb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+4
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong
                                endm
                        
cf01 : a2c0                     ldx #$c0
cf03 : a000                     ldy #0      ;op1 - memory save
                                ;   zpt     ;op1 - memory modifiable
cf05 : 640d                     stz zpt+1   ;op2 - accu
                                ;   zpt+2   ;and flags
                                ;   zpt+3   ;memory after reset
                                ;   zpt+4   ;memory after set
                        
cf07 : 98               tbt1    tya
cf08 : 250d                     and zpt+1   ;set Z by anding the 2 operands
cf0a : 08                       php
cf0b : 68                       pla
cf0c : 2902                     and #fz     ;mask Z
cf0e : 850e                     sta zpt+2
cf10 : 98                       tya         ;reset op1 bits by op2
cf11 : 49ff                     eor #$ff
cf13 : 050d                     ora zpt+1
cf15 : 49ff                     eor #$ff
cf17 : 850f                     sta zpt+3
cf19 : 98                       tya         ;set op1 bits by op2
cf1a : 050d                     ora zpt+1
cf1c : 8510                     sta zpt+4
                        
                                trbt zpt,$ff
cf1e : 840c            >        sty zpt
                       >        load_flag $ff
cf20 : a9ff            >            lda #$ff             ;allow test to change
                       >
cf22 : 48              >        pha
cf23 : a50d            >        lda zpt+1
cf25 : 28              >        plp
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cf26 : 140c            >        trb zpt
cf28 : 08              >        php
cf29 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
cf2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf2d : 68              >        pla
cf2e : 48              >        pha
cf2f : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
cf31 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
                       >
                       >        trap_ne     ;flags changed except Z
cf33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf35 : 68              >        pla
cf36 : 2902            >        and #fz
cf38 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
cf3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf3c : a50f            >        lda zpt+3
cf3e : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
cf40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                trbt abst,$ff
cf42 : 8c0502          >        sty abst
                       >        load_flag $ff
cf45 : a9ff            >            lda #$ff             ;allow test to change
                       >
cf47 : 48              >        pha
cf48 : a50d            >        lda zpt+1
cf4a : 28              >        plp
cf4b : 1c0502          >        trb abst
cf4e : 08              >        php
cf4f : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
cf51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf53 : 68              >        pla
cf54 : 48              >        pha
cf55 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
cf57 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
                       >
                       >        trap_ne     ;flags changed except Z
cf59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf5b : 68              >        pla
cf5c : 2902            >        and #fz
cf5e : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
cf60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf62 : a50f            >        lda zpt+3
cf64 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
cf66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                trbt zpt,0
cf68 : 840c            >        sty zpt
                       >        load_flag 0
cf6a : a900            >            lda #0             ;allow test to change I
                       >
cf6c : 48              >        pha
cf6d : a50d            >        lda zpt+1
cf6f : 28              >        plp
cf70 : 140c            >        trb zpt
cf72 : 08              >        php
cf73 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
cf75 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf77 : 68              >        pla
cf78 : 48              >        pha
cf79 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
cf7b : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
cf7d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf7f : 68              >        pla
cf80 : 2902            >        and #fz
cf82 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
cf84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf86 : a50f            >        lda zpt+3
cf88 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
cf8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                trbt abst,0
cf8c : 8c0502          >        sty abst
                       >        load_flag 0
cf8f : a900            >            lda #0             ;allow test to change I
                       >
cf91 : 48              >        pha
cf92 : a50d            >        lda zpt+1
cf94 : 28              >        plp
cf95 : 1c0502          >        trb abst
cf98 : 08              >        php
cf99 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
cf9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cf9d : 68              >        pla
cf9e : 48              >        pha
cf9f : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
cfa1 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
cfa3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfa5 : 68              >        pla
cfa6 : 2902            >        and #fz
cfa8 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

cfaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfac : a50f            >        lda zpt+3
cfae : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
cfb0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt zpt,$ff
cfb2 : 840c            >        sty zpt
                       >        load_flag $ff
cfb4 : a9ff            >            lda #$ff             ;allow test to change
                       >
cfb6 : 48              >        pha
cfb7 : a50d            >        lda zpt+1
cfb9 : 28              >        plp
cfba : 040c            >        tsb zpt
cfbc : 08              >        php
cfbd : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
cfbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfc1 : 68              >        pla
cfc2 : 48              >        pha
cfc3 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
cfc5 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
                       >
                       >        trap_ne     ;flags changed except Z
cfc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfc9 : 68              >        pla
cfca : 2902            >        and #fz
cfcc : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
cfce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfd0 : a510            >        lda zpt+4
cfd2 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
cfd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt abst,$ff
cfd6 : 8c0502          >        sty abst
                       >        load_flag $ff
cfd9 : a9ff            >            lda #$ff             ;allow test to change
                       >
cfdb : 48              >        pha
cfdc : a50d            >        lda zpt+1
cfde : 28              >        plp
cfdf : 0c0502          >        tsb abst
cfe2 : 08              >        php
cfe3 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
cfe5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfe7 : 68              >        pla
cfe8 : 48              >        pha
cfe9 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
cfeb : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + 
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >        trap_ne     ;flags changed except Z
cfed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cfef : 68              >        pla
cff0 : 2902            >        and #fz
cff2 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
cff4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
cff6 : a510            >        lda zpt+4
cff8 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
cffa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt zpt,0
cffc : 840c            >        sty zpt
                       >        load_flag 0
cffe : a900            >            lda #0             ;allow test to change I
                       >
d000 : 48              >        pha
d001 : a50d            >        lda zpt+1
d003 : 28              >        plp
d004 : 040c            >        tsb zpt
d006 : 08              >        php
d007 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
d009 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d00b : 68              >        pla
d00c : 48              >        pha
d00d : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
d00f : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
d011 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d013 : 68              >        pla
d014 : 2902            >        and #fz
d016 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
d018 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d01a : a510            >        lda zpt+4
d01c : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
d01e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt abst,0
d020 : 8c0502          >        sty abst
                       >        load_flag 0
d023 : a900            >            lda #0             ;allow test to change I
                       >
d025 : 48              >        pha
d026 : a50d            >        lda zpt+1
d028 : 28              >        plp
d029 : 0c0502          >        tsb abst
d02c : 08              >        php
d02d : c50d            >        cmp zpt+1
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        trap_ne     ;accu was changed
d02f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d031 : 68              >        pla
d032 : 48              >        pha
d033 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
d035 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + al
                       >
                       >        trap_ne     ;flags changed except Z
d037 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d039 : 68              >        pla
d03a : 2902            >        and #fz
d03c : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
d03e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d040 : a510            >        lda zpt+4
d042 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong
d044 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                        
d046 : c8                       iny         ;iterate op1
d047 : d004                     bne tbt3
d049 : e60d                     inc zpt+1   ;iterate op2
d04b : f003                     beq tbt2
d04d : 4c07cf           tbt3    jmp tbt1
d050 :                  tbt2
d050 : e0c0                     cpx #$c0
                                trap_ne     ;x altered during test
d052 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d054 : ba                       tsx
d055 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d057 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d059 : ad0002          >            lda test_case   ;previous test
d05c : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d05e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
d060 : a910            >            lda #test_num   ;*** next tests' number
d062 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if rkwl_wdc_op = 1
                        ; testing RMB, SMB - zp
                        rmbt    macro       ;\1 = bitnum
                                lda #$ff
                                sta zpt
                                set_a $a5,0
                                rmb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff-(1<<\1)
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                trap_ne     ;wrong bits set or cleared
                                lda #1<<\1
                                sta zpt
                                set_a $5a,$ff
                                rmb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                trap_ne     ;wrong bits set or cleared
                                endm
                        smbt    macro       ;\1 = bitnum
                                lda #$ff-(1<<\1)
                                sta zpt
                                set_a $a5,0
                                smb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff
                                trap_ne     ;wrong bits set or cleared
                                lda #0
                                sta zpt
                                set_a $5a,$ff
                                smb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                cmp #1<<\1
                                trap_ne     ;wrong bits set or cleared
                                endm
                        
d065 : a2ba                     ldx #$ba    ;protect x & y
d067 : a0d0                     ldy #$d0
                                rmbt 0
d069 : a9ff            >        lda #$ff
d06b : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d06d : a900            >            lda #0             ;allow test to change I
                       >
d06f : 48              >            pha         ;use stack to load status
d070 : a9a5            >            lda #$a5     ;precharge accu
d072 : 28              >            plp
                       >
d073 : 070c            >        rmb 0,zpt
                       >        tst_a $a5,0
d075 : 08              >            php         ;save flags
d076 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d078 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d07a : 68              >            pla         ;load status
d07b : 48              >            pha
                       >            cmp_flag 0
d07c : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d07e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d080 : 28              >            plp         ;restore status
                       >
d081 : a50c            >        lda zpt
d083 : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne     ;wrong bits set or cleared
d085 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
d087 : a901            >        lda #1<<0
d089 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d08b : a9ff            >            lda #$ff             ;allow test to change
                       >
d08d : 48              >            pha         ;use stack to load status
d08e : a95a            >            lda #$5a     ;precharge accu
d090 : 28              >            plp
                       >
d091 : 070c            >        rmb 0,zpt
                       >        tst_a $5a,$ff
d093 : 08              >            php         ;save flags
d094 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d096 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d098 : 68              >            pla         ;load status
d099 : 48              >            pha
                       >            cmp_flag $ff
d09a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d09c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d09e : 28              >            plp         ;restore status
                       >
d09f : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d0a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 1
d0a3 : a9ff            >        lda #$ff
d0a5 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d0a7 : a900            >            lda #0             ;allow test to change I
                       >
d0a9 : 48              >            pha         ;use stack to load status
d0aa : a9a5            >            lda #$a5     ;precharge accu
d0ac : 28              >            plp
                       >
d0ad : 170c            >        rmb 1,zpt
                       >        tst_a $a5,0
d0af : 08              >            php         ;save flags
d0b0 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d0b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0b4 : 68              >            pla         ;load status
d0b5 : 48              >            pha
                       >            cmp_flag 0
d0b6 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d0b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0ba : 28              >            plp         ;restore status
                       >
d0bb : a50c            >        lda zpt
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d0bd : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne     ;wrong bits set or cleared
d0bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0c1 : a902            >        lda #1<<1
d0c3 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d0c5 : a9ff            >            lda #$ff             ;allow test to change
                       >
d0c7 : 48              >            pha         ;use stack to load status
d0c8 : a95a            >            lda #$5a     ;precharge accu
d0ca : 28              >            plp
                       >
d0cb : 170c            >        rmb 1,zpt
                       >        tst_a $5a,$ff
d0cd : 08              >            php         ;save flags
d0ce : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d0d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0d2 : 68              >            pla         ;load status
d0d3 : 48              >            pha
                       >            cmp_flag $ff
d0d4 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d0d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0d8 : 28              >            plp         ;restore status
                       >
d0d9 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d0db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 2
d0dd : a9ff            >        lda #$ff
d0df : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d0e1 : a900            >            lda #0             ;allow test to change I
                       >
d0e3 : 48              >            pha         ;use stack to load status
d0e4 : a9a5            >            lda #$a5     ;precharge accu
d0e6 : 28              >            plp
                       >
d0e7 : 270c            >        rmb 2,zpt
                       >        tst_a $a5,0
d0e9 : 08              >            php         ;save flags
d0ea : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d0ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0ee : 68              >            pla         ;load status
d0ef : 48              >            pha
                       >            cmp_flag 0
d0f0 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d0f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d0f4 : 28              >            plp         ;restore status
                       >
d0f5 : a50c            >        lda zpt
d0f7 : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne     ;wrong bits set or cleared
d0f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d0fb : a904            >        lda #1<<2
d0fd : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d0ff : a9ff            >            lda #$ff             ;allow test to change
                       >
d101 : 48              >            pha         ;use stack to load status
d102 : a95a            >            lda #$5a     ;precharge accu
d104 : 28              >            plp
                       >
d105 : 270c            >        rmb 2,zpt
                       >        tst_a $5a,$ff
d107 : 08              >            php         ;save flags
d108 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d10a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d10c : 68              >            pla         ;load status
d10d : 48              >            pha
                       >            cmp_flag $ff
d10e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d110 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d112 : 28              >            plp         ;restore status
                       >
d113 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d115 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 3
d117 : a9ff            >        lda #$ff
d119 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d11b : a900            >            lda #0             ;allow test to change I
                       >
d11d : 48              >            pha         ;use stack to load status
d11e : a9a5            >            lda #$a5     ;precharge accu
d120 : 28              >            plp
                       >
d121 : 370c            >        rmb 3,zpt
                       >        tst_a $a5,0
d123 : 08              >            php         ;save flags
d124 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d126 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d128 : 68              >            pla         ;load status
d129 : 48              >            pha
                       >            cmp_flag 0
d12a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            trap_ne
d12c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d12e : 28              >            plp         ;restore status
                       >
d12f : a50c            >        lda zpt
d131 : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne     ;wrong bits set or cleared
d133 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d135 : a908            >        lda #1<<3
d137 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d139 : a9ff            >            lda #$ff             ;allow test to change
                       >
d13b : 48              >            pha         ;use stack to load status
d13c : a95a            >            lda #$5a     ;precharge accu
d13e : 28              >            plp
                       >
d13f : 370c            >        rmb 3,zpt
                       >        tst_a $5a,$ff
d141 : 08              >            php         ;save flags
d142 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d144 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d146 : 68              >            pla         ;load status
d147 : 48              >            pha
                       >            cmp_flag $ff
d148 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d14a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d14c : 28              >            plp         ;restore status
                       >
d14d : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d14f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 4
d151 : a9ff            >        lda #$ff
d153 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d155 : a900            >            lda #0             ;allow test to change I
                       >
d157 : 48              >            pha         ;use stack to load status
d158 : a9a5            >            lda #$a5     ;precharge accu
d15a : 28              >            plp
                       >
d15b : 470c            >        rmb 4,zpt
                       >        tst_a $a5,0
d15d : 08              >            php         ;save flags
d15e : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d160 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d162 : 68              >            pla         ;load status
d163 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            cmp_flag 0
d164 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d166 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d168 : 28              >            plp         ;restore status
                       >
d169 : a50c            >        lda zpt
d16b : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne     ;wrong bits set or cleared
d16d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d16f : a910            >        lda #1<<4
d171 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d173 : a9ff            >            lda #$ff             ;allow test to change
                       >
d175 : 48              >            pha         ;use stack to load status
d176 : a95a            >            lda #$5a     ;precharge accu
d178 : 28              >            plp
                       >
d179 : 470c            >        rmb 4,zpt
                       >        tst_a $5a,$ff
d17b : 08              >            php         ;save flags
d17c : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d17e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d180 : 68              >            pla         ;load status
d181 : 48              >            pha
                       >            cmp_flag $ff
d182 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d184 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d186 : 28              >            plp         ;restore status
                       >
d187 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d189 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 5
d18b : a9ff            >        lda #$ff
d18d : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d18f : a900            >            lda #0             ;allow test to change I
                       >
d191 : 48              >            pha         ;use stack to load status
d192 : a9a5            >            lda #$a5     ;precharge accu
d194 : 28              >            plp
                       >
d195 : 570c            >        rmb 5,zpt
                       >        tst_a $a5,0
d197 : 08              >            php         ;save flags
d198 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d19a : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
d19c : 68              >            pla         ;load status
d19d : 48              >            pha
                       >            cmp_flag 0
d19e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d1a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1a2 : 28              >            plp         ;restore status
                       >
d1a3 : a50c            >        lda zpt
d1a5 : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne     ;wrong bits set or cleared
d1a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1a9 : a920            >        lda #1<<5
d1ab : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d1ad : a9ff            >            lda #$ff             ;allow test to change
                       >
d1af : 48              >            pha         ;use stack to load status
d1b0 : a95a            >            lda #$5a     ;precharge accu
d1b2 : 28              >            plp
                       >
d1b3 : 570c            >        rmb 5,zpt
                       >        tst_a $5a,$ff
d1b5 : 08              >            php         ;save flags
d1b6 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d1b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1ba : 68              >            pla         ;load status
d1bb : 48              >            pha
                       >            cmp_flag $ff
d1bc : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d1be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1c0 : 28              >            plp         ;restore status
                       >
d1c1 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d1c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 6
d1c5 : a9ff            >        lda #$ff
d1c7 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d1c9 : a900            >            lda #0             ;allow test to change I
                       >
d1cb : 48              >            pha         ;use stack to load status
d1cc : a9a5            >            lda #$a5     ;precharge accu
d1ce : 28              >            plp
                       >
d1cf : 670c            >        rmb 6,zpt
                       >        tst_a $a5,0
d1d1 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d1d2 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d1d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1d6 : 68              >            pla         ;load status
d1d7 : 48              >            pha
                       >            cmp_flag 0
d1d8 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d1da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1dc : 28              >            plp         ;restore status
                       >
d1dd : a50c            >        lda zpt
d1df : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne     ;wrong bits set or cleared
d1e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1e3 : a940            >        lda #1<<6
d1e5 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d1e7 : a9ff            >            lda #$ff             ;allow test to change
                       >
d1e9 : 48              >            pha         ;use stack to load status
d1ea : a95a            >            lda #$5a     ;precharge accu
d1ec : 28              >            plp
                       >
d1ed : 670c            >        rmb 6,zpt
                       >        tst_a $5a,$ff
d1ef : 08              >            php         ;save flags
d1f0 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d1f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1f4 : 68              >            pla         ;load status
d1f5 : 48              >            pha
                       >            cmp_flag $ff
d1f6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d1f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d1fa : 28              >            plp         ;restore status
                       >
d1fb : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d1fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 7
d1ff : a9ff            >        lda #$ff
d201 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d203 : a900            >            lda #0             ;allow test to change I
                       >
d205 : 48              >            pha         ;use stack to load status
d206 : a9a5            >            lda #$a5     ;precharge accu
d208 : 28              >            plp
                       >
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d209 : 770c            >        rmb 7,zpt
                       >        tst_a $a5,0
d20b : 08              >            php         ;save flags
d20c : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d20e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d210 : 68              >            pla         ;load status
d211 : 48              >            pha
                       >            cmp_flag 0
d212 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d214 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d216 : 28              >            plp         ;restore status
                       >
d217 : a50c            >        lda zpt
d219 : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne     ;wrong bits set or cleared
d21b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d21d : a980            >        lda #1<<7
d21f : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d221 : a9ff            >            lda #$ff             ;allow test to change
                       >
d223 : 48              >            pha         ;use stack to load status
d224 : a95a            >            lda #$5a     ;precharge accu
d226 : 28              >            plp
                       >
d227 : 770c            >        rmb 7,zpt
                       >        tst_a $5a,$ff
d229 : 08              >            php         ;save flags
d22a : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d22c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d22e : 68              >            pla         ;load status
d22f : 48              >            pha
                       >            cmp_flag $ff
d230 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d232 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d234 : 28              >            plp         ;restore status
                       >
d235 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
d237 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 0
d239 : a9fe            >        lda #$ff-(1<<0)
d23b : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d23d : a900            >            lda #0             ;allow test to change I
                       >
d23f : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d240 : a9a5            >            lda #$a5     ;precharge accu
d242 : 28              >            plp
                       >
d243 : 870c            >        smb 0,zpt
                       >        tst_a $a5,0
d245 : 08              >            php         ;save flags
d246 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d248 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d24a : 68              >            pla         ;load status
d24b : 48              >            pha
                       >            cmp_flag 0
d24c : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d24e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d250 : 28              >            plp         ;restore status
                       >
d251 : a50c            >        lda zpt
d253 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d255 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d257 : a900            >        lda #0
d259 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d25b : a9ff            >            lda #$ff             ;allow test to change
                       >
d25d : 48              >            pha         ;use stack to load status
d25e : a95a            >            lda #$5a     ;precharge accu
d260 : 28              >            plp
                       >
d261 : 870c            >        smb 0,zpt
                       >        tst_a $5a,$ff
d263 : 08              >            php         ;save flags
d264 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d266 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d268 : 68              >            pla         ;load status
d269 : 48              >            pha
                       >            cmp_flag $ff
d26a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d26c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d26e : 28              >            plp         ;restore status
                       >
d26f : a50c            >        lda zpt
d271 : c901            >        cmp #1<<0
                       >        trap_ne     ;wrong bits set or cleared
d273 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 1
d275 : a9fd            >        lda #$ff-(1<<1)
d277 : 850c            >        sta zpt
                       >        set_a $a5,0
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >            load_flag 0
d279 : a900            >            lda #0             ;allow test to change I
                       >
d27b : 48              >            pha         ;use stack to load status
d27c : a9a5            >            lda #$a5     ;precharge accu
d27e : 28              >            plp
                       >
d27f : 970c            >        smb 1,zpt
                       >        tst_a $a5,0
d281 : 08              >            php         ;save flags
d282 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d284 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d286 : 68              >            pla         ;load status
d287 : 48              >            pha
                       >            cmp_flag 0
d288 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d28a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d28c : 28              >            plp         ;restore status
                       >
d28d : a50c            >        lda zpt
d28f : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d291 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d293 : a900            >        lda #0
d295 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d297 : a9ff            >            lda #$ff             ;allow test to change
                       >
d299 : 48              >            pha         ;use stack to load status
d29a : a95a            >            lda #$5a     ;precharge accu
d29c : 28              >            plp
                       >
d29d : 970c            >        smb 1,zpt
                       >        tst_a $5a,$ff
d29f : 08              >            php         ;save flags
d2a0 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d2a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2a4 : 68              >            pla         ;load status
d2a5 : 48              >            pha
                       >            cmp_flag $ff
d2a6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d2a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2aa : 28              >            plp         ;restore status
                       >
d2ab : a50c            >        lda zpt
d2ad : c902            >        cmp #1<<1
                       >        trap_ne     ;wrong bits set or cleared
d2af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                smbt 2
d2b1 : a9fb            >        lda #$ff-(1<<2)
d2b3 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d2b5 : a900            >            lda #0             ;allow test to change I
                       >
d2b7 : 48              >            pha         ;use stack to load status
d2b8 : a9a5            >            lda #$a5     ;precharge accu
d2ba : 28              >            plp
                       >
d2bb : a70c            >        smb 2,zpt
                       >        tst_a $a5,0
d2bd : 08              >            php         ;save flags
d2be : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d2c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2c2 : 68              >            pla         ;load status
d2c3 : 48              >            pha
                       >            cmp_flag 0
d2c4 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d2c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2c8 : 28              >            plp         ;restore status
                       >
d2c9 : a50c            >        lda zpt
d2cb : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d2cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2cf : a900            >        lda #0
d2d1 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d2d3 : a9ff            >            lda #$ff             ;allow test to change
                       >
d2d5 : 48              >            pha         ;use stack to load status
d2d6 : a95a            >            lda #$5a     ;precharge accu
d2d8 : 28              >            plp
                       >
d2d9 : a70c            >        smb 2,zpt
                       >        tst_a $5a,$ff
d2db : 08              >            php         ;save flags
d2dc : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d2de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2e0 : 68              >            pla         ;load status
d2e1 : 48              >            pha
                       >            cmp_flag $ff
d2e2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d2e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2e6 : 28              >            plp         ;restore status
                       >
d2e7 : a50c            >        lda zpt
d2e9 : c904            >        cmp #1<<2
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >        trap_ne     ;wrong bits set or cleared
d2eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 3
d2ed : a9f7            >        lda #$ff-(1<<3)
d2ef : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d2f1 : a900            >            lda #0             ;allow test to change I
                       >
d2f3 : 48              >            pha         ;use stack to load status
d2f4 : a9a5            >            lda #$a5     ;precharge accu
d2f6 : 28              >            plp
                       >
d2f7 : b70c            >        smb 3,zpt
                       >        tst_a $a5,0
d2f9 : 08              >            php         ;save flags
d2fa : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d2fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d2fe : 68              >            pla         ;load status
d2ff : 48              >            pha
                       >            cmp_flag 0
d300 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d302 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d304 : 28              >            plp         ;restore status
                       >
d305 : a50c            >        lda zpt
d307 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d309 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d30b : a900            >        lda #0
d30d : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d30f : a9ff            >            lda #$ff             ;allow test to change
                       >
d311 : 48              >            pha         ;use stack to load status
d312 : a95a            >            lda #$5a     ;precharge accu
d314 : 28              >            plp
                       >
d315 : b70c            >        smb 3,zpt
                       >        tst_a $5a,$ff
d317 : 08              >            php         ;save flags
d318 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d31a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d31c : 68              >            pla         ;load status
d31d : 48              >            pha
                       >            cmp_flag $ff
d31e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d320 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d322 : 28              >            plp         ;restore status
                       >
d323 : a50c            >        lda zpt
d325 : c908            >        cmp #1<<3
                       >        trap_ne     ;wrong bits set or cleared
d327 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 4
d329 : a9ef            >        lda #$ff-(1<<4)
d32b : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d32d : a900            >            lda #0             ;allow test to change I
                       >
d32f : 48              >            pha         ;use stack to load status
d330 : a9a5            >            lda #$a5     ;precharge accu
d332 : 28              >            plp
                       >
d333 : c70c            >        smb 4,zpt
                       >        tst_a $a5,0
d335 : 08              >            php         ;save flags
d336 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d338 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d33a : 68              >            pla         ;load status
d33b : 48              >            pha
                       >            cmp_flag 0
d33c : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d33e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d340 : 28              >            plp         ;restore status
                       >
d341 : a50c            >        lda zpt
d343 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d345 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d347 : a900            >        lda #0
d349 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d34b : a9ff            >            lda #$ff             ;allow test to change
                       >
d34d : 48              >            pha         ;use stack to load status
d34e : a95a            >            lda #$5a     ;precharge accu
d350 : 28              >            plp
                       >
d351 : c70c            >        smb 4,zpt
                       >        tst_a $5a,$ff
d353 : 08              >            php         ;save flags
d354 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d356 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d358 : 68              >            pla         ;load status
d359 : 48              >            pha
                       >            cmp_flag $ff
d35a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
                       >            trap_ne
d35c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d35e : 28              >            plp         ;restore status
                       >
d35f : a50c            >        lda zpt
d361 : c910            >        cmp #1<<4
                       >        trap_ne     ;wrong bits set or cleared
d363 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 5
d365 : a9df            >        lda #$ff-(1<<5)
d367 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d369 : a900            >            lda #0             ;allow test to change I
                       >
d36b : 48              >            pha         ;use stack to load status
d36c : a9a5            >            lda #$a5     ;precharge accu
d36e : 28              >            plp
                       >
d36f : d70c            >        smb 5,zpt
                       >        tst_a $a5,0
d371 : 08              >            php         ;save flags
d372 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d374 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d376 : 68              >            pla         ;load status
d377 : 48              >            pha
                       >            cmp_flag 0
d378 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d37a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d37c : 28              >            plp         ;restore status
                       >
d37d : a50c            >        lda zpt
d37f : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d381 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d383 : a900            >        lda #0
d385 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d387 : a9ff            >            lda #$ff             ;allow test to change
                       >
d389 : 48              >            pha         ;use stack to load status
d38a : a95a            >            lda #$5a     ;precharge accu
d38c : 28              >            plp
                       >
d38d : d70c            >        smb 5,zpt
                       >        tst_a $5a,$ff
d38f : 08              >            php         ;save flags
d390 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d392 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d394 : 68              >            pla         ;load status
d395 : 48              >            pha
                       >            cmp_flag $ff
d396 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d398 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d39a : 28              >            plp         ;restore status
                       >
d39b : a50c            >        lda zpt
d39d : c920            >        cmp #1<<5
                       >        trap_ne     ;wrong bits set or cleared
d39f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 6
d3a1 : a9bf            >        lda #$ff-(1<<6)
d3a3 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d3a5 : a900            >            lda #0             ;allow test to change I
                       >
d3a7 : 48              >            pha         ;use stack to load status
d3a8 : a9a5            >            lda #$a5     ;precharge accu
d3aa : 28              >            plp
                       >
d3ab : e70c            >        smb 6,zpt
                       >        tst_a $a5,0
d3ad : 08              >            php         ;save flags
d3ae : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d3b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3b2 : 68              >            pla         ;load status
d3b3 : 48              >            pha
                       >            cmp_flag 0
d3b4 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d3b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3b8 : 28              >            plp         ;restore status
                       >
d3b9 : a50c            >        lda zpt
d3bb : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d3bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3bf : a900            >        lda #0
d3c1 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d3c3 : a9ff            >            lda #$ff             ;allow test to change
                       >
d3c5 : 48              >            pha         ;use stack to load status
d3c6 : a95a            >            lda #$5a     ;precharge accu
d3c8 : 28              >            plp
                       >
d3c9 : e70c            >        smb 6,zpt
                       >        tst_a $5a,$ff
d3cb : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d3cc : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d3ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3d0 : 68              >            pla         ;load status
d3d1 : 48              >            pha
                       >            cmp_flag $ff
d3d2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d3d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3d6 : 28              >            plp         ;restore status
                       >
d3d7 : a50c            >        lda zpt
d3d9 : c940            >        cmp #1<<6
                       >        trap_ne     ;wrong bits set or cleared
d3db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 7
d3dd : a97f            >        lda #$ff-(1<<7)
d3df : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
d3e1 : a900            >            lda #0             ;allow test to change I
                       >
d3e3 : 48              >            pha         ;use stack to load status
d3e4 : a9a5            >            lda #$a5     ;precharge accu
d3e6 : 28              >            plp
                       >
d3e7 : f70c            >        smb 7,zpt
                       >        tst_a $a5,0
d3e9 : 08              >            php         ;save flags
d3ea : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
d3ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3ee : 68              >            pla         ;load status
d3ef : 48              >            pha
                       >            cmp_flag 0
d3f0 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
d3f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3f4 : 28              >            plp         ;restore status
                       >
d3f5 : a50c            >        lda zpt
d3f7 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
d3f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d3fb : a900            >        lda #0
d3fd : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
d3ff : a9ff            >            lda #$ff             ;allow test to change
                       >
d401 : 48              >            pha         ;use stack to load status
d402 : a95a            >            lda #$5a     ;precharge accu
d404 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                       >
d405 : f70c            >        smb 7,zpt
                       >        tst_a $5a,$ff
d407 : 08              >            php         ;save flags
d408 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
d40a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d40c : 68              >            pla         ;load status
d40d : 48              >            pha
                       >            cmp_flag $ff
d40e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d410 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d412 : 28              >            plp         ;restore status
                       >
d413 : a50c            >        lda zpt
d415 : c980            >        cmp #1<<7
                       >        trap_ne     ;wrong bits set or cleared
d417 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
d419 : e0ba                     cpx #$ba
                                trap_ne     ;x altered during test
d41b : d0fe            >        bne *           ;failed not equal (non zero)
                        
d41d : c0d0                     cpy #$d0
                                trap_ne     ;y altered during test
d41f : d0fe            >        bne *           ;failed not equal (non zero)
                        
d421 : ba                       tsx
d422 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d424 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d426 : ad0002          >            lda test_case   ;previous test
d429 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d42b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
d42d : a911            >            lda #test_num   ;*** next tests' number
d42f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                            endif
                        
                        ; testing CMP - (zp)
d432 : a2de                     ldx #$de    ;protect x & y
d434 : a0ad                     ldy #$ad
                                set_a $80,0
                       >            load_flag 0
d436 : a900            >            lda #0             ;allow test to change I
                       >
d438 : 48              >            pha         ;use stack to load status
d439 : a980            >            lda #$80     ;precharge accu
d43b : 28              >            plp
                        
d43c : d22c                     cmp (ind1+8)
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                                tst_a $80,fc
d43e : 08              >            php         ;save flags
d43f : c980            >            cmp #$80     ;test result
                       >            trap_ne
d441 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d443 : 68              >            pla         ;load status
d444 : 48              >            pha
                       >            cmp_flag fc
d445 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d447 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d449 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
d44a : a900            >            lda #0             ;allow test to change I
                       >
d44c : 48              >            pha         ;use stack to load status
d44d : a97f            >            lda #$7f     ;precharge accu
d44f : 28              >            plp
                        
d450 : d22c                     cmp (ind1+8)
                                tst_a $7f,fzc
d452 : 08              >            php         ;save flags
d453 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
d455 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d457 : 68              >            pla         ;load status
d458 : 48              >            pha
                       >            cmp_flag fzc
d459 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d45b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d45d : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
d45e : a900            >            lda #0             ;allow test to change I
                       >
d460 : 48              >            pha         ;use stack to load status
d461 : a97e            >            lda #$7e     ;precharge accu
d463 : 28              >            plp
                        
d464 : d22c                     cmp (ind1+8)
                                tst_a $7e,fn
d466 : 08              >            php         ;save flags
d467 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
d469 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d46b : 68              >            pla         ;load status
d46c : 48              >            pha
                       >            cmp_flag fn
d46d : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d46f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d471 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
d472 : a9ff            >            lda #$ff             ;allow test to change
                       >
d474 : 48              >            pha         ;use stack to load status
d475 : a980            >            lda #$80     ;precharge accu
d477 : 28              >            plp
                        
d478 : d22c                     cmp (ind1+8)
                                tst_a $80,~fnz
d47a : 08              >            php         ;save flags
d47b : c980            >            cmp #$80     ;test result
                       >            trap_ne
d47d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d47f : 68              >            pla         ;load status
d480 : 48              >            pha
                       >            cmp_flag ~fnz
d481 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d483 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d485 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
d486 : a9ff            >            lda #$ff             ;allow test to change
                       >
d488 : 48              >            pha         ;use stack to load status
d489 : a97f            >            lda #$7f     ;precharge accu
d48b : 28              >            plp
                        
d48c : d22c                     cmp (ind1+8)
                                tst_a $7f,~fn
d48e : 08              >            php         ;save flags
d48f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
d491 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d493 : 68              >            pla         ;load status
d494 : 48              >            pha
                       >            cmp_flag ~fn
d495 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d497 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d499 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
d49a : a9ff            >            lda #$ff             ;allow test to change
                       >
d49c : 48              >            pha         ;use stack to load status
d49d : a97e            >            lda #$7e     ;precharge accu
d49f : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d4a0 : d22c                     cmp (ind1+8)
                                tst_a $7e,~fzc
d4a2 : 08              >            php         ;save flags
d4a3 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
d4a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4a7 : 68              >            pla         ;load status
d4a8 : 48              >            pha
                       >            cmp_flag ~fzc
d4a9 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d4ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4ad : 28              >            plp         ;restore status
                        
d4ae : e0de                     cpx #$de
                                trap_ne     ;x altered during test
d4b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d4b2 : c0ad                     cpy #$ad
                                trap_ne     ;y altered during test
d4b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d4b6 : ba                       tsx
d4b7 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d4b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d4bb : ad0002          >            lda test_case   ;previous test
d4be : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d4c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
d4c2 : a912            >            lda #test_num   ;*** next tests' number
d4c4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing logical instructions - AND EOR ORA (zp)
d4c7 : a242                     ldx #$42    ;protect x & y
                        
d4c9 : a000                     ldy #0      ;AND
d4cb : a53a                     lda indAN   ;set indirect address
d4cd : 850c                     sta zpt
d4cf : a53b                     lda indAN+1
d4d1 : 850d                     sta zpt+1
d4d3 :                  tand1
                                set_ay  absANa,0
                       >            load_flag 0
d4d3 : a900            >            lda #0             ;allow test to change I
                       >
d4d5 : 48              >            pha         ;use stack to load status
d4d6 : b95302          >            lda absANa,y    ;precharge accu
d4d9 : 28              >            plp
                        
d4da : 320c                     and (zpt)
                                tst_ay  absrlo,absflo,0
d4dc : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d4dd : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
d4e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d4e2 : 68              >            pla         ;load status
                       >            eor_flag 0
d4e3 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
d4e5 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
d4e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
d4ea : e60c                     inc zpt
d4ec : c8                       iny
d4ed : c004                     cpy #4
d4ef : d0e2                     bne tand1
d4f1 : 88                       dey
d4f2 : c60c                     dec zpt
d4f4 :                  tand2
                                set_ay  absANa,$ff
                       >            load_flag $ff
d4f4 : a9ff            >            lda #$ff             ;allow test to change
                       >
d4f6 : 48              >            pha         ;use stack to load status
d4f7 : b95302          >            lda absANa,y    ;precharge accu
d4fa : 28              >            plp
                        
d4fb : 320c                     and (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
d4fd : 08              >            php         ;save flags
d4fe : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
d501 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d503 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
d504 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
d506 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
d509 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
d50b : c60c                     dec zpt
d50d : 88                       dey
d50e : 10e4                     bpl tand2
                        
d510 : a000                     ldy #0      ;EOR
d512 : a542                     lda indEO   ;set indirect address
d514 : 850c                     sta zpt
d516 : a543                     lda indEO+1
d518 : 850d                     sta zpt+1
d51a :                  teor1
                                set_ay  absEOa,0
                       >            load_flag 0
d51a : a900            >            lda #0             ;allow test to change I
                       >
d51c : 48              >            pha         ;use stack to load status
d51d : b95702          >            lda absEOa,y    ;precharge accu
d520 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d521 : 520c                     eor (zpt)
                                tst_ay  absrlo,absflo,0
d523 : 08              >            php         ;save flags
d524 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
d527 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d529 : 68              >            pla         ;load status
                       >            eor_flag 0
d52a : 4930            >            eor #0|fao         ;invert expected flags 
                       >
d52c : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
d52f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
d531 : e60c                     inc zpt
d533 : c8                       iny
d534 : c004                     cpy #4
d536 : d0e2                     bne teor1
d538 : 88                       dey
d539 : c60c                     dec zpt
d53b :                  teor2
                                set_ay  absEOa,$ff
                       >            load_flag $ff
d53b : a9ff            >            lda #$ff             ;allow test to change
                       >
d53d : 48              >            pha         ;use stack to load status
d53e : b95702          >            lda absEOa,y    ;precharge accu
d541 : 28              >            plp
                        
d542 : 520c                     eor (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
d544 : 08              >            php         ;save flags
d545 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
d548 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d54a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
d54b : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
d54d : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
d550 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
d552 : c60c                     dec zpt
d554 : 88                       dey
d555 : 10e4                     bpl teor2
                        
d557 : a000                     ldy #0      ;ORA
d559 : a54a                     lda indOR   ;set indirect address
d55b : 850c                     sta zpt
d55d : a54b                     lda indOR+1
d55f : 850d                     sta zpt+1
d561 :                  tora1
                                set_ay  absORa,0
                       >            load_flag 0
d561 : a900            >            lda #0             ;allow test to change I
                       >
d563 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d564 : b94f02          >            lda absORa,y    ;precharge accu
d567 : 28              >            plp
                        
d568 : 120c                     ora (zpt)
                                tst_ay  absrlo,absflo,0
d56a : 08              >            php         ;save flags
d56b : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
d56e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d570 : 68              >            pla         ;load status
                       >            eor_flag 0
d571 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
d573 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
d576 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
d578 : e60c                     inc zpt
d57a : c8                       iny
d57b : c004                     cpy #4
d57d : d0e2                     bne tora1
d57f : 88                       dey
d580 : c60c                     dec zpt
d582 :                  tora2
                                set_ay  absORa,$ff
                       >            load_flag $ff
d582 : a9ff            >            lda #$ff             ;allow test to change
                       >
d584 : 48              >            pha         ;use stack to load status
d585 : b94f02          >            lda absORa,y    ;precharge accu
d588 : 28              >            plp
                        
d589 : 120c                     ora (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
d58b : 08              >            php         ;save flags
d58c : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
d58f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d591 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
d592 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
d594 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
d597 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
d599 : c60c                     dec zpt
d59b : 88                       dey
d59c : 10e4                     bpl tora2
                        
d59e : e042                     cpx #$42
                                trap_ne     ;x altered during test
d5a0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5a2 : ba                       tsx
d5a3 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
d5a5 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
                                next_test
d5a7 : ad0002          >            lda test_case   ;previous test
d5aa : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d5ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
d5ae : a913            >            lda #test_num   ;*** next tests' number
d5b0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if I_flag = 3
d5b3 : 58                       cli
                            endif
                        
                        ; full binary add/subtract test - (zp) only
                        ; iterates through all combinations of operands and ca
                        ; uses increments/decrements to predict result & resul
d5b4 : d8                       cld
d5b5 : a20e                     ldx #ad2        ;for indexed test
d5b7 : a0ff                     ldy #$ff        ;max range
d5b9 : a900                     lda #0          ;start with adding zeroes & no
d5bb : 850c                     sta adfc        ;carry in - for diag
d5bd : 850d                     sta ad1         ;operand 1 - accumulator
d5bf : 850e                     sta ad2         ;operand 2 - memory or immedia
d5c1 : 8d0502                   sta ada2        ;non zp
d5c4 : 850f                     sta adrl        ;expected result bits 0-7
d5c6 : 8510                     sta adrh        ;expected result bit 8 (carry 
d5c8 : a9ff                     lda #$ff        ;complemented operand 2 for su
d5ca : 8512                     sta sb2
d5cc : 8d0602                   sta sba2        ;non zp
d5cf : a902                     lda #2          ;expected Z-flag
d5d1 : 8511                     sta adrf
d5d3 : 18               tadd    clc             ;test with carry clear
d5d4 : 208bd8                   jsr chkadd
d5d7 : e60c                     inc adfc        ;now with carry
d5d9 : e60f                     inc adrl        ;result +1
d5db : 08                       php             ;save N & Z from low result
d5dc : 08                       php
d5dd : 68                       pla             ;accu holds expected flags
d5de : 2982                     and #$82        ;mask N & Z
d5e0 : 28                       plp
d5e1 : d002                     bne tadd1
d5e3 : e610                     inc adrh        ;result bit 8 - carry
d5e5 : 0510             tadd1   ora adrh        ;merge C to expected flags
d5e7 : 8511                     sta adrf        ;save expected flags except ov
d5e9 : 38                       sec             ;test with carry set
d5ea : 208bd8                   jsr chkadd
d5ed : c60c                     dec adfc        ;same for operand +1 but no ca
d5ef : e60d                     inc ad1
d5f1 : d0e0                     bne tadd        ;iterate op1
d5f3 : a900                     lda #0          ;preset result to op2 when op1
d5f5 : 8510                     sta adrh
d5f7 : ee0502                   inc ada2
d5fa : e60e                     inc ad2
d5fc : 08                       php             ;save NZ as operand 2 becomes 
d5fd : 68                       pla
d5fe : 2982                     and #$82        ;mask N00000Z0
d600 : 8511                     sta adrf        ;no need to check carry as we 
d602 : c612                     dec sb2         ;complement subtract operand 2
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d604 : ce0602                   dec sba2
d607 : a50e                     lda ad2
d609 : 850f                     sta adrl
d60b : d0c6                     bne tadd        ;iterate op2
                        
d60d : e00e                     cpx #ad2
                                trap_ne         ;x altered during test
d60f : d0fe            >        bne *           ;failed not equal (non zero)
                        
d611 : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test
d613 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d615 : ba                       tsx
d616 : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
d618 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
d61a : ad0002          >            lda test_case   ;previous test
d61d : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d61f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
d621 : a914            >            lda #test_num   ;*** next tests' number
d623 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, the V flag is 
                        ;   although V is declared as beeing valid on the 65C0
                        ;   no use in BCD math. No sign = no overflow!
                        ; iterates through all valid combinations of operands 
                        ; uses increments/decrements to predict result & carry
d626 : f8                       sed
d627 : a20e                     ldx #ad2        ;for indexed test
d629 : a0ff                     ldy #$ff        ;max range
d62b : a999                     lda #$99        ;start with adding 99 to 99 wi
d62d : 850d                     sta ad1         ;operand 1 - accumulator
d62f : 850e                     sta ad2         ;operand 2 - memory or immedia
d631 : 8d0502                   sta ada2        ;non zp
d634 : 850f                     sta adrl        ;expected result bits 0-7
d636 : a901                     lda #1          ;set carry in & out
d638 : 850c                     sta adfc        ;carry in - for diag
d63a : 8510                     sta adrh        ;expected result bit 8 (carry 
d63c : a981                     lda #$81        ;set N & C (99 + 99 + C = 99 +
d63e : 8511                     sta adrf
d640 : a900                     lda #0          ;complemented operand 2 for su
d642 : 8512                     sta sb2
d644 : 8d0602                   sta sba2        ;non zp
d647 : 38               tdad    sec             ;test with carry set
d648 : 2034d7                   jsr chkdad
d64b : c60c                     dec adfc        ;now with carry clear
d64d : a50f                     lda adrl        ;decimal adjust result
d64f : d008                     bne tdad1       ;skip clear carry & preset res
d651 : c610                     dec adrh
d653 : a999                     lda #$99
d655 : 850f                     sta adrl
d657 : d012                     bne tdad3
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d659 : 290f             tdad1   and #$f         ;lower nibble mask
d65b : d00c                     bne tdad2       ;no decimal adjust needed
d65d : c60f                     dec adrl        ;decimal adjust (?0-6)
d65f : c60f                     dec adrl
d661 : c60f                     dec adrl
d663 : c60f                     dec adrl
d665 : c60f                     dec adrl
d667 : c60f                     dec adrl
d669 : c60f             tdad2   dec adrl        ;result -1
d66b : 08               tdad3   php             ;save valid flags
d66c : 68                       pla
d66d : 2982                     and #$82        ;N-----Z-
d66f : 0510                     ora adrh        ;N-----ZC
d671 : 8511                     sta adrf
d673 : 18                       clc             ;test with carry clear
d674 : 2034d7                   jsr chkdad
d677 : e60c                     inc adfc        ;same for operand -1 but with 
d679 : a50d                     lda ad1         ;decimal adjust operand 1
d67b : f015                     beq tdad5       ;iterate operand 2
d67d : 290f                     and #$f         ;lower nibble mask
d67f : d00c                     bne tdad4       ;skip decimal adjust
d681 : c60d                     dec ad1         ;decimal adjust (?0-6)
d683 : c60d                     dec ad1
d685 : c60d                     dec ad1
d687 : c60d                     dec ad1
d689 : c60d                     dec ad1
d68b : c60d                     dec ad1
d68d : c60d             tdad4   dec ad1         ;operand 1 -1
d68f : 4c47d6                   jmp tdad        ;iterate op1
                        
d692 : a999             tdad5   lda #$99        ;precharge op1 max
d694 : 850d                     sta ad1
d696 : a50e                     lda ad2         ;decimal adjust operand 2
d698 : f039                     beq tdad7       ;end of iteration
d69a : 290f                     and #$f         ;lower nibble mask
d69c : d018                     bne tdad6       ;skip decimal adjust
d69e : c60e                     dec ad2         ;decimal adjust (?0-6)
d6a0 : c60e                     dec ad2
d6a2 : c60e                     dec ad2
d6a4 : c60e                     dec ad2
d6a6 : c60e                     dec ad2
d6a8 : c60e                     dec ad2
d6aa : e612                     inc sb2         ;complemented decimal adjust f
d6ac : e612                     inc sb2
d6ae : e612                     inc sb2
d6b0 : e612                     inc sb2
d6b2 : e612                     inc sb2
d6b4 : e612                     inc sb2
d6b6 : c60e             tdad6   dec ad2         ;operand 2 -1
d6b8 : e612                     inc sb2         ;complemented operand for subt
d6ba : a512                     lda sb2
d6bc : 8d0602                   sta sba2        ;copy as non zp operand
d6bf : a50e                     lda ad2
d6c1 : 8d0502                   sta ada2        ;copy as non zp operand
d6c4 : 850f                     sta adrl        ;new result since op1+carry=00
d6c6 : 08                       php             ;save flags
d6c7 : 68                       pla
d6c8 : 2982                     and #$82        ;N-----Z-
d6ca : 0901                     ora #1          ;N-----ZC
d6cc : 8511                     sta adrf
d6ce : e610                     inc adrh        ;result carry
d6d0 : 4c47d6                   jmp tdad        ;iterate op2
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
d6d3 : e00e             tdad7   cpx #ad2
                                trap_ne         ;x altered during test
d6d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d6d7 : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test
d6d9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d6db : ba                       tsx
d6dc : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
d6de : d0fe            >        bne *           ;failed not equal (non zero)
                        
d6e0 : d8                       cld
                        
d6e1 : ad0002                   lda test_case
d6e4 : c914                     cmp #test_num
                                trap_ne         ;previous test is out of seque
d6e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d6e8 : a9f0                     lda #$f0        ;mark opcode testing complete
d6ea : 8d0002                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has alter
                        ;   designated write areas.
                                check_ram
d6ed : d8              >            cld
d6ee : a900            >            lda #0
d6f0 : 850c            >            sta zpt         ;set low byte of indirect 
d6f2 : 850f            >            sta zpt+3       ;checksum high byte
d6f4 : a20b            >            ldx #11         ;reset modifiable RAM
d6f6 : 9df902          >ccs11245      sta jxi_tab,x   ;JMP indirect page cross
d6f9 : ca              >            dex
d6fa : 10fa            >            bpl ccs11245
d6fc : 18              >            clc
d6fd : a209            >            ldx #zp_bss-zero_page ;zeropage - write te
d6ff : 750a            >ccs31245      adc zero_page,x
d701 : 9003            >            bcc ccs21245
d703 : e60f            >            inc zpt+3       ;carry to high byte
d705 : 18              >            clc
d706 : e8              >ccs21245      inx
d707 : d0f6            >            bne ccs31245
d709 : a202            >            ldx #hi(abs1)   ;set high byte of indirect
d70b : 860d            >            stx zpt+1
d70d : a010            >            ldy #lo(abs1)   ;data after write & execut
d70f : 710c            >ccs51245      adc (zpt),y
d711 : 9003            >            bcc ccs41245
d713 : e60f            >            inc zpt+3       ;carry to high byte
d715 : 18              >            clc
d716 : c8              >ccs41245      iny
d717 : d0f6            >            bne ccs51245
d719 : e8              >            inx             ;advance RAM high address
d71a : 860d            >            stx zpt+1
d71c : e010            >            cpx #ram_top
d71e : d0ef            >            bne ccs51245
d720 : 850e            >            sta zpt+2       ;checksum low is
d722 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
d725 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d727 : a50f            >            lda zpt+3       ;checksum high is
d729 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
d72c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the 
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other back
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S **************************************
                        ; -------------
                                success         ;if you get here everything we
d72e : 4c2ed7          >        jmp *           ;test passed, no errors
                        
                        ; -------------
                        ; S U C C E S S **************************************
d731 : 4c00c0                   jmp start       ;run again
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, V flag is igno
                        ; iterates through all valid combinations of operands 
                        ; uses increments/decrements to predict result & carry
d734 :                  chkdad
                        ; decimal ADC / SBC zp
d734 : 08                       php             ;save carry for subtract
d735 : a50d                     lda ad1
d737 : 650e                     adc ad2         ;perform add
d739 : 08                       php
d73a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d73c : d0fe            >        bne *           ;failed not equal (non zero)
                        
d73e : 68                       pla             ;check flags
d73f : 2983                     and #$83        ;mask N-----ZC
d741 : c511                     cmp adrf
                                trap_ne         ;bad flags
d743 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d745 : 28                       plp
d746 : 08                       php             ;save carry for next add
d747 : a50d                     lda ad1
d749 : e512                     sbc sb2         ;perform subtract
d74b : 08                       php
d74c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d74e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d750 : 68                       pla             ;check flags
d751 : 2983                     and #$83        ;mask N-----ZC
d753 : c511                     cmp adrf
                                trap_ne         ;bad flags
d755 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d757 : 28                       plp
                        ; decimal ADC / SBC abs
d758 : 08                       php             ;save carry for subtract
d759 : a50d                     lda ad1
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d75b : 6d0502                   adc ada2        ;perform add
d75e : 08                       php
d75f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d761 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d763 : 68                       pla             ;check flags
d764 : 2983                     and #$83        ;mask N-----ZC
d766 : c511                     cmp adrf
                                trap_ne         ;bad flags
d768 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d76a : 28                       plp
d76b : 08                       php             ;save carry for next add
d76c : a50d                     lda ad1
d76e : ed0602                   sbc sba2        ;perform subtract
d771 : 08                       php
d772 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d774 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d776 : 68                       pla             ;check flags
d777 : 2983                     and #$83        ;mask N-----ZC
d779 : c511                     cmp adrf
                                trap_ne         ;bad flags
d77b : d0fe            >        bne *           ;failed not equal (non zero)
                        
d77d : 28                       plp
                        ; decimal ADC / SBC #
d77e : 08                       php             ;save carry for subtract
d77f : a50e                     lda ad2
d781 : 8d0b02                   sta ex_adci+1   ;set ADC # operand
d784 : a50d                     lda ad1
d786 : 200a02                   jsr ex_adci     ;execute ADC # in RAM
d789 : 08                       php
d78a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d78c : d0fe            >        bne *           ;failed not equal (non zero)
                        
d78e : 68                       pla             ;check flags
d78f : 2983                     and #$83        ;mask N-----ZC
d791 : c511                     cmp adrf
                                trap_ne         ;bad flags
d793 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d795 : 28                       plp
d796 : 08                       php             ;save carry for next add
d797 : a512                     lda sb2
d799 : 8d0e02                   sta ex_sbci+1   ;set SBC # operand
d79c : a50d                     lda ad1
d79e : 200d02                   jsr ex_sbci     ;execute SBC # in RAM
d7a1 : 08                       php
d7a2 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d7a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7a6 : 68                       pla             ;check flags
d7a7 : 2983                     and #$83        ;mask N-----ZC
d7a9 : c511                     cmp adrf
                                trap_ne         ;bad flags
d7ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d7ad : 28                       plp
                        ; decimal ADC / SBC zp,x
d7ae : 08                       php             ;save carry for subtract
d7af : a50d                     lda ad1
d7b1 : 7500                     adc 0,x         ;perform add
d7b3 : 08                       php
d7b4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d7b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7b8 : 68                       pla             ;check flags
d7b9 : 2983                     and #$83        ;mask N-----ZC
d7bb : c511                     cmp adrf
                                trap_ne         ;bad flags
d7bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7bf : 28                       plp
d7c0 : 08                       php             ;save carry for next add
d7c1 : a50d                     lda ad1
d7c3 : f504                     sbc sb2-ad2,x   ;perform subtract
d7c5 : 08                       php
d7c6 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d7c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7ca : 68                       pla             ;check flags
d7cb : 2983                     and #$83        ;mask N-----ZC
d7cd : c511                     cmp adrf
                                trap_ne         ;bad flags
d7cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7d1 : 28                       plp
                        ; decimal ADC / SBC abs,x
d7d2 : 08                       php             ;save carry for subtract
d7d3 : a50d                     lda ad1
d7d5 : 7df701                   adc ada2-ad2,x  ;perform add
d7d8 : 08                       php
d7d9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d7db : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7dd : 68                       pla             ;check flags
d7de : 2983                     and #$83        ;mask N-----ZC
d7e0 : c511                     cmp adrf
                                trap_ne         ;bad flags
d7e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7e4 : 28                       plp
d7e5 : 08                       php             ;save carry for next add
d7e6 : a50d                     lda ad1
d7e8 : fdf801                   sbc sba2-ad2,x  ;perform subtract
d7eb : 08                       php
d7ec : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d7ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
d7f0 : 68                       pla             ;check flags
d7f1 : 2983                     and #$83        ;mask N-----ZC
d7f3 : c511                     cmp adrf
                                trap_ne         ;bad flags
d7f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d7f7 : 28                       plp
                        ; decimal ADC / SBC abs,y
d7f8 : 08                       php             ;save carry for subtract
d7f9 : a50d                     lda ad1
d7fb : 790601                   adc ada2-$ff,y  ;perform add
d7fe : 08                       php
d7ff : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d801 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d803 : 68                       pla             ;check flags
d804 : 2983                     and #$83        ;mask N-----ZC
d806 : c511                     cmp adrf
                                trap_ne         ;bad flags
d808 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d80a : 28                       plp
d80b : 08                       php             ;save carry for next add
d80c : a50d                     lda ad1
d80e : f90701                   sbc sba2-$ff,y  ;perform subtract
d811 : 08                       php
d812 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d814 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d816 : 68                       pla             ;check flags
d817 : 2983                     and #$83        ;mask N-----ZC
d819 : c511                     cmp adrf
                                trap_ne         ;bad flags
d81b : d0fe            >        bne *           ;failed not equal (non zero)
                        
d81d : 28                       plp
                        ; decimal ADC / SBC (zp,x)
d81e : 08                       php             ;save carry for subtract
d81f : a50d                     lda ad1
d821 : 6144                     adc (lo adi2-ad2,x) ;perform add
d823 : 08                       php
d824 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d826 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d828 : 68                       pla             ;check flags
d829 : 2983                     and #$83        ;mask N-----ZC
d82b : c511                     cmp adrf
                                trap_ne         ;bad flags
d82d : d0fe            >        bne *           ;failed not equal (non zero)
                        
d82f : 28                       plp
d830 : 08                       php             ;save carry for next add
d831 : a50d                     lda ad1
d833 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
d835 : 08                       php
d836 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d838 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d83a : 68                       pla             ;check flags
d83b : 2983                     and #$83        ;mask N-----ZC
d83d : c511                     cmp adrf
                                trap_ne         ;bad flags
d83f : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d841 : 28                       plp
                        ; decimal ADC / SBC (abs),y
d842 : 08                       php             ;save carry for subtract
d843 : a50d                     lda ad1
d845 : 7156                     adc (adiy2),y   ;perform add
d847 : 08                       php
d848 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d84a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d84c : 68                       pla             ;check flags
d84d : 2983                     and #$83        ;mask N-----ZC
d84f : c511                     cmp adrf
                                trap_ne         ;bad flags
d851 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d853 : 28                       plp
d854 : 08                       php             ;save carry for next add
d855 : a50d                     lda ad1
d857 : f158                     sbc (sbiy2),y   ;perform subtract
d859 : 08                       php
d85a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d85c : d0fe            >        bne *           ;failed not equal (non zero)
                        
d85e : 68                       pla             ;check flags
d85f : 2983                     and #$83        ;mask N-----ZC
d861 : c511                     cmp adrf
                                trap_ne         ;bad flags
d863 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d865 : 28                       plp
                        ; decimal ADC / SBC (zp)
d866 : 08                       php             ;save carry for subtract
d867 : a50d                     lda ad1
d869 : 7252                     adc (adi2)      ;perform add
d86b : 08                       php
d86c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d86e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d870 : 68                       pla             ;check flags
d871 : 2983                     and #$83        ;mask N-----ZC
d873 : c511                     cmp adrf
                                trap_ne         ;bad flags
d875 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d877 : 28                       plp
d878 : 08                       php             ;save carry for next add
d879 : a50d                     lda ad1
d87b : f254                     sbc (sbi2)      ;perform subtract
d87d : 08                       php
d87e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d880 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d882 : 68                       pla             ;check flags
d883 : 2983                     and #$83        ;mask N-----ZC
d885 : c511                     cmp adrf
                                trap_ne         ;bad flags
d887 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d889 : 28                       plp
d88a : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and ca
                        ; uses increments/decrements to predict result & resul
d88b : a511             chkadd  lda adrf        ;add V-flag if overflow
d88d : 2983                     and #$83        ;keep N-----ZC / clear V
d88f : 48                       pha
d890 : a50d                     lda ad1         ;test sign unequal between ope
d892 : 450e                     eor ad2
d894 : 300a                     bmi ckad1       ;no overflow possible - operan
d896 : a50d                     lda ad1         ;test sign equal between opera
d898 : 450f                     eor adrl
d89a : 1004                     bpl ckad1       ;no overflow occured - operand
d89c : 68                       pla
d89d : 0940                     ora #$40        ;set V
d89f : 48                       pha
d8a0 : 68               ckad1   pla
d8a1 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC (zp)
d8a3 : 08                       php             ;save carry for subtract
d8a4 : a50d                     lda ad1
d8a6 : 7252                     adc (adi2)      ;perform add
d8a8 : 08                       php
d8a9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d8ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8ad : 68                       pla             ;check flags
d8ae : 29c3                     and #$c3        ;mask NV----ZC
d8b0 : c511                     cmp adrf
                                trap_ne         ;bad flags
d8b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8b4 : 28                       plp
d8b5 : 08                       php             ;save carry for next add
d8b6 : a50d                     lda ad1
d8b8 : f254                     sbc (sbi2)      ;perform subtract
d8ba : 08                       php
d8bb : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
d8bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8bf : 68                       pla             ;check flags
d8c0 : 29c3                     and #$c3        ;mask NV----ZC
d8c2 : c511                     cmp adrf
                                trap_ne         ;bad flags
d8c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8c6 : 28                       plp
d8c7 : 60                       rts
                        
                        ; target for the jump indirect test
d8c8 : ced8             ji_adr  dw test_ji
d8ca : 7ec8                     dw ji_ret
                        
d8cc : 88                       dey
d8cd : 88                       dey
d8ce :                  test_ji
d8ce : 08                       php             ;either SP or Y count will fai
d8cf : 88                       dey
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d8d0 : 88                       dey
d8d1 : 88                       dey
d8d2 : 28                       plp
                                trap_cs         ;flags loaded?
d8d3 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
d8d5 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
d8d7 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
d8d9 : f0fe            >        beq *           ;failed equal (zero)
                        
d8db : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
d8dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8df : e04e                     cpx #'N'
                                trap_ne
d8e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8e3 : c041                     cpy #('D'-3)
                                trap_ne
d8e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8e7 : 48                       pha             ;save a,x
d8e8 : 8a                       txa
d8e9 : 48                       pha
d8ea : ba                       tsx
d8eb : e0fd                     cpx #$fd        ;check SP
                                trap_ne
d8ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
d8ef : 68                       pla             ;restore x
d8f0 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
d8f1 : a9ff            >            lda #$ff             ;allow test to change
                       >
d8f3 : 48              >            pha         ;use stack to load status
d8f4 : 28              >            plp
                        
d8f5 : 68                       pla             ;restore a
d8f6 : e8                       inx             ;return registers with modific
d8f7 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
d8f9 : 6cff02                   jmp (ji_tab+2)
d8fc : ea                       nop
d8fd : ea                       nop
                                trap            ;runover protection
d8fe : 4cfed8          >        jmp *           ;failed anyway
                        
d901 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                        ; target for the jump indirect test
d904 : 4bd9             jxi_adr dw  trap_ind
d906 : 4bd9                     dw  trap_ind
d908 : 12d9                     dw  test_jxi    ;+4
d90a : cac8                     dw  jxi_ret     ;+6
d90c : 4bd9                     dw  trap_ind
d90e : 4bd9                     dw  trap_ind
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
d910 : 88                       dey
d911 : 88                       dey
d912 :                  test_jxi
d912 : 08                       php             ;either SP or Y count will fai
d913 : 88                       dey
d914 : 88                       dey
d915 : 88                       dey
d916 : 28                       plp
                                trap_cs         ;flags loaded?
d917 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
d919 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
d91b : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
d91d : f0fe            >        beq *           ;failed equal (zero)
                        
d91f : c958                     cmp #'X'        ;registers loaded?
                                trap_ne
d921 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d923 : e004                     cpx #4
                                trap_ne
d925 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d927 : c046                     cpy #('I'-3)
                                trap_ne
d929 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d92b : 48                       pha             ;save a,x
d92c : 8a                       txa
d92d : 48                       pha
d92e : ba                       tsx
d92f : e0fd                     cpx #$fd        ;check SP
                                trap_ne
d931 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d933 : 68                       pla             ;restore x
d934 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
d935 : a9ff            >            lda #$ff             ;allow test to change
                       >
d937 : 48              >            pha         ;use stack to load status
d938 : 28              >            plp
                        
d939 : 68                       pla             ;restore a
d93a : e8                       inx             ;return registers with modific
d93b : e8                       inx
d93c : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
d93e : 7cf902                   jmp (jxi_tab,x)
d941 : ea                       nop
d942 : ea                       nop
                                trap            ;runover protection
d943 : 4c43d9          >        jmp *           ;failed anyway
                        
d946 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        ; JMP (abs,x) with bad x
d949 : ea                       nop
d94a : ea                       nop
d94b :                  trap_ind
d94b : ea                       nop
d94c : ea                       nop
                                trap            ;near miss indexed indirect ju
d94d : 4c4dd9          >        jmp *           ;failed anyway
                        
d950 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET
d953 :                  nmi_trap
                                trap            ;check stack for conditions at
d953 : 4c53d9          >        jmp *           ;failed anyway
                        
d956 : 4c00c0                   jmp start       ;catastrophic error - cannot c
d959 :                  res_trap
                                trap            ;unexpected RESET
d959 : 4c59d9          >        jmp *           ;failed anyway
                        
d95c : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
d95f : 88                       dey
d960 : 88                       dey
d961 :                  irq_trap                ;BRK test or unextpected BRK o
d961 : 08                       php             ;either SP or Y count will fai
d962 : 88                       dey
d963 : 88                       dey
d964 : 88                       dey
                                ;next traps could be caused by unexpected BRK 
                                ;check stack for BREAK and originating locatio
                                ;possible jump/branch into weeds (uninitialize
d965 : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
d967 : f042                     beq break2
d969 : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
d96b : d0fe            >        bne *           ;failed not equal (non zero)
                        
d96d : e052                     cpx #'R'
                                trap_ne
d96f : d0fe            >        bne *           ;failed not equal (non zero)
                        
d971 : c048                     cpy #'K'-3
                                trap_ne
d973 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d975 : 850a                     sta irq_a       ;save registers during break t
d977 : 860b                     stx irq_x
d979 : ba                       tsx             ;test break on stack
d97a : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & 
d97d : c930            >            cmp #(0      |fao)&m8    ;expected flags +
                        
                                trap_ne         ;possible no break flag on sta
d97f : d0fe            >        bne *           ;failed not equal (non zero)
                        
d981 : 68                       pla
                                cmp_flag intdis ;should have added interrupt d
d982 : c934            >            cmp #(intdis |fao)&m8    ;expected flags +
                        
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

d984 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d986 : ba                       tsx
d987 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
d989 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d98b : adff01                   lda $1ff        ;propper return on stack
d98e : c9c9                     cmp #hi(brk_ret0)
                                trap_ne
d990 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d992 : adfe01                   lda $1fe
d995 : c91c                     cmp #lo(brk_ret0)
                                trap_ne
d997 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
d999 : a9ff            >            lda #$ff             ;allow test to change
                        
d99b : 48                       pha
d99c : a60b                     ldx irq_x
d99e : e8                       inx             ;return registers with modific
d99f : a50a                     lda irq_a
d9a1 : 49aa                     eor #$aa
d9a3 : 28                       plp             ;N=1, V=1, Z=1, C=1 but origin
d9a4 : 40                       rti
                                trap            ;runover protection
d9a5 : 4ca5d9          >        jmp *           ;failed anyway
                        
d9a8 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
d9ab :                  break2                  ;BRK pass 2
d9ab : e0ad                     cpx #$ff-'R'
                                trap_ne
d9ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
d9af : c0b1                     cpy #$ff-'K'-3
                                trap_ne
d9b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d9b3 : 850a                     sta irq_a       ;save registers during break t
d9b5 : 860b                     stx irq_x
d9b7 : ba                       tsx             ;test break on stack
d9b8 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
d9bb : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags +
                        
                                trap_ne         ;possibly no break flag on sta
d9bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
d9bf : 68                       pla
                                cmp_flag $ff-decmode ;actual passed flags shou
d9c0 : c9f7            >            cmp #($ff-decmode |fao)&m8    ;expected fl
                        
                                trap_ne
d9c2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d9c4 : ba                       tsx
d9c5 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
d9c7 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        
d9c9 : adff01                   lda $1ff        ;propper return on stack
d9cc : c9c9                     cmp #hi(brk_ret1)
                                trap_ne
d9ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
d9d0 : adfe01                   lda $1fe
d9d3 : c942                     cmp #lo(brk_ret1)
                                trap_ne
d9d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
d9d7 : a904            >            lda #intdis             ;allow test to cha
                        
d9d9 : 48                       pha
d9da : a60b                     ldx irq_x
d9dc : e8                       inx             ;return registers with modific
d9dd : a50a                     lda irq_a
d9df : 49aa                     eor #$aa
d9e1 : 28                       plp             ;N=0, V=0, Z=0, C=0 but origin
d9e2 : 40                       rti
                                trap            ;runover protection
d9e3 : 4ce3d9          >        jmp *           ;failed anyway
                        
d9e6 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                            if report = 1
                                include "report.i65"
                            endif
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
d9e9 :                  zp_init
d9e9 : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT
d9ed : 7f               zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
d9ee : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
d9f2 : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
d9f6 : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
d9fa : 1002             ind1_   dw  abs1            ;indirect pointer to patte
d9fc : 1102                     dw  abs1+1
d9fe : 1202                     dw  abs1+2
da00 : 1302                     dw  abs1+3
da02 : 1402                     dw  abs7f
da04 : 1801             inw1_   dw  abs1-$f8        ;indirect pointer for wrap
da06 : 0502             indt_   dw  abst            ;indirect pointer to store
da08 : 0602                     dw  abst+1
da0a : 0702                     dw  abst+2
da0c : 0802                     dw  abst+3
da0e : 0d01             inwt_   dw  abst-$f8        ;indirect pointer for wrap
da10 : 4702             indAN_  dw  absAN           ;indirect pointer to AND p
da12 : 4802                     dw  absAN+1
da14 : 4902                     dw  absAN+2
da16 : 4a02                     dw  absAN+3
da18 : 4b02             indEO_  dw  absEO           ;indirect pointer to EOR p
da1a : 4c02                     dw  absEO+1
da1c : 4d02                     dw  absEO+2
da1e : 4e02                     dw  absEO+3
da20 : 4302             indOR_  dw  absOR           ;indirect pointer to OR pa
da22 : 4402                     dw  absOR+1
da24 : 4502                     dw  absOR+2
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

da26 : 4602                     dw  absOR+3
                        ;add/subtract indirect pointers
da28 : 0502             adi2_   dw  ada2            ;indirect pointer to opera
da2a : 0602             sbi2_   dw  sba2            ;indirect pointer to compl
da2c : 0601             adiy2_  dw  ada2-$ff        ;with offset for indirect 
da2e : 0701             sbiy2_  dw  sba2-$ff
da30 :                  zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and 
                            endif
da30 :                  data_init
da30 : 6900             ex_adc_ adc #0              ;execute immediate opcodes
da32 : 60                       rts
da33 : e900             ex_sbc_ sbc #0              ;execute immediate opcodes
da35 : 60                       rts
da36 : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT
da3a : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
da3b : 80800002         fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
da3f :                  rASL_                       ;expected result ASL & ROL
da3f : 86048200         rROL_   db  $86,$04,$82,0   ; "
da43 : 87058301         rROLc_  db  $87,$05,$83,1   ;expected result ROL +carr
da47 :                  rLSR_                       ;expected result LSR & ROR
da47 : 61412000         rROR_   db  $61,$41,$20,0   ; "
da4b : e1c1a080         rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carr
da4f :                  fASL_                       ;expected flags for shifts
da4f : 81018002         fROL_   db  fnc,fc,fn,fz    ;no carry in
da53 : 81018000         fROLc_  db  fnc,fc,fn,0     ;carry in
da57 :                  fLSR_
da57 : 01000102         fROR_   db  fc,0,fc,fz      ;no carry in
da5b : 81808180         fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
da5f : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/D
da64 : 0080800200       fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DE
                        ;logical memory operand
da69 : 001f7180         absOR_  db  0,$1f,$71,$80   ;test pattern for OR
da6d : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
da71 : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
da75 : 00f11f00         absORa_ db  0,$f1,$1f,0     ;test pattern for OR
da79 : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
da7d : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
da81 : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
da85 : 02800080         absflo_ db  fz,fn,0,fn
da89 :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and 
                            endif
                        
da89 :                  vec_init
da89 : 53d9                     dw  nmi_trap
da8b : 59d9                     dw  res_trap
da8d : 61d9                     dw  irq_trap
fffa =                  vec_bss equ $fffa
                            endif                   ;end of RAM init data
                        
                        ; code at end of image due to the need to add blank sp
                            if ($ff & (ji_ret - * - 2)) < ($ff & (jxi_ret - * 
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------- 65C02_extended_opcodes_test.a65c ----------------------

                        ; JMP (abs) when $xxff and $xx00 are from same page
                                ds  lo(ji_ret - * - 2)
                                nop
                                nop
                        ji_px   nop             ;low address byte matched with
                                nop
                                trap            ;jmp indirect page cross bug
                        
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
                                ds  lo(jxi_ret - * - 2)
                                nop
                                nop
                        jxi_px  nop             ;low address byte matched with
                                nop
                                trap            ;jmp indexed indirect page cro
                            else
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
da8f : 00000000000000..         ds  lo(jxi_ret - * - 2)
dac8 : ea                       nop
dac9 : ea                       nop
daca : ea               jxi_px  nop             ;low address byte matched with
dacb : ea                       nop
                                trap            ;jmp indexed indirect page cro
dacc : 4cccda          >        jmp *           ;failed anyway
                        
                        
                        ; JMP (abs) when $xxff and $xx00 are from same page
dacf : 00000000000000..         ds  lo(ji_ret - * - 2)
db7c : ea                       nop
db7d : ea                       nop
db7e : ea               ji_px   nop             ;low address byte matched with
db7f : ea                       nop
                                trap            ;jmp indirect page cross bug
db80 : 4c80db          >        jmp *           ;failed anyway
                        
                            endif
                        
                            if (ROM_vectors = 1)
fffa =                          org $fffa       ;vectors
fffa : 53d9                     dw  nmi_trap
fffc : 00c0                     dw  start
fffe : 61d9                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
Program start address is at $c000 (49152).
