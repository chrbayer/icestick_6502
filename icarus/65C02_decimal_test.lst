AS65 Assembler for R6502 [1.42].                                     Page    1
--------------------------- 6502_decimal_test.a65 ----------------------------

363 lines read, no errors in pass 1.
                        ; Verify decimal mode behavior
                        ; Written by Bruce Clark.  This code is public domain.
                        ; see http://www.6502.org/tutorials/decimal_mode.html
                        ;
                        ; Returns:
                        ;   ERROR = 0 if the test passed
                        ;   ERROR = 1 if the test failed
                        ;   modify the code at the DONE label for desired prog
                        ;
                        ; This routine requires 17 bytes of RAM -- 1 byte each
                        ;   AR, CF, DA, DNVZC, ERROR, HA, HNVZC, N1, N1H, N1L,
                        ; and 2 bytes for N2H
                        ;
                        ; Variables:
                        ;   N1 and N2 are the two numbers to be added or subtr
                        ;   N1H, N1L, N2H, and N2L are the upper 4 bits and lo
                        ;   DA and DNVZC are the actual accumulator and flag r
                        ;   HA and HNVZC are the accumulator and flag results 
                        ;     added or subtracted using binary arithmetic
                        ;   AR, NF, VF, ZF, and CF are the predicted decimal m
                        ;     flag results, calculated using binary arithmetic
                        ;
                        ; This program takes approximately 1 minute at 1 MHz (
                        ; a 65C02 than a 6502 or 65816)
                        ;
                        
                        ; Configuration:
0001 =                  cputype = 1         ; 0 = 6502, 1 = 65C02, 2 = 65C816
0001 =                  vld_bcd = 1         ; 0 = allow invalid bcd, 1 = valid
0001 =                  chk_a   = 1         ; check accumulator
0001 =                  chk_n   = 1         ; check sign (negative) flag
0000 =                  chk_v   = 0         ; check overflow flag
0001 =                  chk_z   = 1         ; check zero flag
0001 =                  chk_c   = 1         ; check carry flag
                        
                        end_of_test macro
                                        jmp *     ;loop forever
                                    endm
                        
                                bss
0000 =                          org 0
                        ; operands - register Y = carry in
0000 =                  N1      ds  1
0001 =                  N2      ds  1
                        ; binary result
0002 =                  HA      ds  1
0003 =                  HNVZC   ds  1
                                            ;04
                        ; decimal result
0004 =                  DA      ds  1
0005 =                  DNVZC   ds  1
                        ; predicted results
0006 =                  AR      ds  1
0007 =                  NF      ds  1
                                            ;08
0008 =                  VF      ds  1
0009 =                  ZF      ds  1
000a =                  CF      ds  1
000b =                  ERROR   ds  1
                                            ;0C
                        ; workspace
AS65 Assembler for R6502 [1.42].                                     Page    2
--------------------------- 6502_decimal_test.a65 ----------------------------

000c =                  N1L     ds  1
000d =                  N1H     ds  1
000e =                  N2L     ds  1
000f =                  N2H     ds  2
                        
                                code
c000 =                          org $c000
c000 : d8               TEST    cld
c001 : a2ff                     ldx #$ff
c003 : 9a                       txs
c004 : a001                     ldy #1    ; initialize Y (used to loop through
c006 : 840b                     sty ERROR ; store 1 in ERROR until the test pa
c008 : a900                     lda #0    ; initialize N1 and N2
c00a : 8500                     sta N1
c00c : 8501                     sta N2
c00e : a501             LOOP1   lda N2    ; N2L = N2 & $0F
c010 : 290f                     and #$0F  ; [1] see text
                                if  vld_bcd = 1
c012 : c90a                         cmp #$0a
c014 : b03e                         bcs NEXT2
                                endif
c016 : 850e                     sta N2L
c018 : a501                     lda N2    ; N2H = N2 & $F0
c01a : 29f0                     and #$F0  ; [2] see text
                                if  vld_bcd = 1
c01c : c9a0                         cmp #$a0
c01e : b034                         bcs NEXT2
                                endif
c020 : 850f                     sta N2H
c022 : 090f                     ora #$0F  ; N2H+1 = (N2 & $F0) + $0F
c024 : 8510                     sta N2H+1
c026 : a500             LOOP2   lda N1    ; N1L = N1 & $0F
c028 : 290f                     and #$0F  ; [3] see text
                                if  vld_bcd = 1
c02a : c90a                         cmp #$0a
c02c : b022                         bcs NEXT1
                                endif
c02e : 850c                     sta N1L
c030 : a500                     lda N1    ; N1H = N1 & $F0
c032 : 29f0                     and #$F0  ; [4] see text
                                if  vld_bcd = 1
c034 : c9a0                         cmp #$a0
c036 : b018                         bcs NEXT1
                                endif
c038 : 850d                     sta N1H
c03a : 2062c0                   jsr ADD
c03d : 20fdc0                   jsr A6502
c040 : 20e0c0                   jsr COMPARE
c043 : d01a                     bne DONE
c045 : 20a6c0                   jsr SUB
c048 : 2006c1                   jsr S6502
c04b : 20e0c0                   jsr COMPARE
c04e : d00f                     bne DONE
c050 : e600             NEXT1   inc N1    ; [5] see text
c052 : d0d2                     bne LOOP2 ; loop through all 256 values of N1
c054 : e601             NEXT2   inc N2    ; [6] see text
c056 : d0b6                     bne LOOP1 ; loop through all 256 values of N2
c058 : 88                       dey
c059 : 10b3                     bpl LOOP1 ; loop through both values of the ca
c05b : a900                     lda #0    ; test passed, so store 0 in ERROR
c05d : 850b                     sta ERROR
c05f :                  DONE
AS65 Assembler for R6502 [1.42].                                     Page    3
--------------------------- 6502_decimal_test.a65 ----------------------------

                                end_of_test
c05f : 4c5fc0          >                jmp *     ;loop forever
                        
                        
                        ; Calculate the actual decimal mode accumulator and fl
                        ; and flag results when N1 is added to N2 using binary
                        ; predicted accumulator result, the predicted carry fl
                        ; V flag
                        ;
c062 : f8               ADD     sed       ; decimal mode
c063 : c001                     cpy #1    ; set carry if Y = 1, clear carry if
c065 : a500                     lda N1
c067 : 6501                     adc N2
c069 : 8504                     sta DA    ; actual accumulator result in decim
c06b : 08                       php
c06c : 68                       pla
c06d : 8505                     sta DNVZC ; actual flags result in decimal mod
c06f : d8                       cld       ; binary mode
c070 : c001                     cpy #1    ; set carry if Y = 1, clear carry if
c072 : a500                     lda N1
c074 : 6501                     adc N2
c076 : 8502                     sta HA    ; accumulator result of N1+N2 using 
                        
c078 : 08                       php
c079 : 68                       pla
c07a : 8503                     sta HNVZC ; flags result of N1+N2 using binary
c07c : c001                     cpy #1
c07e : a50c                     lda N1L
c080 : 650e                     adc N2L
c082 : c90a                     cmp #$0A
c084 : a200                     ldx #0
c086 : 9006                     bcc A1
c088 : e8                       inx
c089 : 6905                     adc #5    ; add 6 (carry is set)
c08b : 290f                     and #$0F
c08d : 38                       sec
c08e : 050d             A1      ora N1H
                        ;
                        ; if N1L + N2L <  $0A, then add N2 & $F0
                        ; if N1L + N2L >= $0A, then add (N2 & $F0) + $0F + 1 (
                        ;
c090 : 750f                     adc N2H,x
c092 : 08                       php
c093 : b004                     bcs A2
c095 : c9a0                     cmp #$A0
c097 : 9003                     bcc A3
c099 : 695f             A2      adc #$5F  ; add $60 (carry is set)
c09b : 38                       sec
c09c : 8506             A3      sta AR    ; predicted accumulator result
c09e : 08                       php
c09f : 68                       pla
c0a0 : 850a                     sta CF    ; predicted carry result
c0a2 : 68                       pla
                        ;
                        ; note that all 8 bits of the P register are stored in
                        ;
c0a3 : 8508                     sta VF    ; predicted V flags
c0a5 : 60                       rts
                        
                        ; Calculate the actual decimal mode accumulator and fl
                        ; accumulator and flag results when N2 is subtracted f
                        ; arithmetic
AS65 Assembler for R6502 [1.42].                                     Page    4
--------------------------- 6502_decimal_test.a65 ----------------------------

                        ;
c0a6 : f8               SUB     sed       ; decimal mode
c0a7 : c001                     cpy #1    ; set carry if Y = 1, clear carry if
c0a9 : a500                     lda N1
c0ab : e501                     sbc N2
c0ad : 8504                     sta DA    ; actual accumulator result in decim
c0af : 08                       php
c0b0 : 68                       pla
c0b1 : 8505                     sta DNVZC ; actual flags result in decimal mod
c0b3 : d8                       cld       ; binary mode
c0b4 : c001                     cpy #1    ; set carry if Y = 1, clear carry if
c0b6 : a500                     lda N1
c0b8 : e501                     sbc N2
c0ba : 8502                     sta HA    ; accumulator result of N1-N2 using 
                        
c0bc : 08                       php
c0bd : 68                       pla
c0be : 8503                     sta HNVZC ; flags result of N1-N2 using binary
c0c0 : 60                       rts
                        
                                if cputype != 1
                        ; Calculate the predicted SBC accumulator result for t
                        ;
                        SUB1        cpy #1    ; set carry if Y = 1, clear carr
                                    lda N1L
                                    sbc N2L
                                    ldx #0
                                    bcs S11
                                    inx
                                    sbc #5    ; subtract 6 (carry is clear)
                                    and #$0F
                                    clc
                        S11         ora N1H
                        ;
                        ; if N1L - N2L >= 0, then subtract N2 & $F0
                        ; if N1L - N2L <  0, then subtract (N2 & $F0) + $0F + 
                        ;
                                    sbc N2H,x
                                    bcs S12
                                    sbc #$5F  ; subtract $60 (carry is clear)
                        S12         sta AR
                                    rts
                                endif
                        
                                if cputype = 1
                        ; Calculate the predicted SBC accumulator result for t
                        ;
c0c1 : c001             SUB2        cpy #1    ; set carry if Y = 1, clear carr
c0c3 : a50c                         lda N1L
c0c5 : e50e                         sbc N2L
c0c7 : a200                         ldx #0
c0c9 : b004                         bcs S21
c0cb : e8                           inx
c0cc : 290f                         and #$0F
c0ce : 18                           clc
c0cf : 050d             S21         ora N1H
                        ;
                        ; if N1L - N2L >= 0, then subtract N2 & $F0
                        ; if N1L - N2L <  0, then subtract (N2 & $F0) + $0F + 
                        ;
c0d1 : f50f                         sbc N2H,x
c0d3 : b002                         bcs S22
AS65 Assembler for R6502 [1.42].                                     Page    5
--------------------------- 6502_decimal_test.a65 ----------------------------

c0d5 : e95f                         sbc #$5F   ; subtract $60 (carry is clear)
c0d7 : e000             S22         cpx #0
c0d9 : f002                         beq S23
c0db : e906                         sbc #6
c0dd : 8506             S23         sta AR     ; predicted accumulator result
c0df : 60                           rts
                                endif
                        
                        ; Compare accumulator actual results to predicted resu
                        ;
                        ; Return:
                        ;   Z flag = 1 (BEQ branch) if same
                        ;   Z flag = 0 (BNE branch) if different
                        ;
c0e0 :                  COMPARE
                                if chk_a = 1
c0e0 : a504                         lda DA
c0e2 : c506                         cmp AR
c0e4 : d016                         bne C1
                                endif
                                if chk_n = 1
c0e6 : a505                         lda DNVZC ; [7] see text
c0e8 : 4507                         eor NF
c0ea : 2980                         and #$80  ; mask off N flag
c0ec : d00e                         bne C1
                                endif
                                if chk_v = 1
                                    lda DNVZC ; [8] see text
                                    eor VF
                                    and #$40  ; mask off V flag
                                    bne C1    ; [9] see text
                                endif
                                if chk_z = 1
c0ee : a505                         lda DNVZC
c0f0 : 4509                         eor ZF    ; mask off Z flag
c0f2 : 2902                         and #2
c0f4 : d006                         bne C1    ; [10] see text
                                endif
                                if chk_c = 1
c0f6 : a505                         lda DNVZC
c0f8 : 450a                         eor CF
c0fa : 2901                         and #1    ; mask off C flag
                                endif
c0fc : 60               C1      rts
                        
                        ; These routines store the predicted values for ADC an
                        ; 65C02, and 65816 in AR, CF, NF, VF, and ZF
                        
                                if cputype = 0
                        
                        A6502       lda VF      ; 6502
                        ;
                        ; since all 8 bits of the P register were stored in VF
                        ; the N flag for NF
                        ;
                                    sta NF
                                    lda HNVZC
                                    sta ZF
                                    rts
                        
                        S6502       jsr SUB1
                                    lda HNVZC
AS65 Assembler for R6502 [1.42].                                     Page    6
--------------------------- 6502_decimal_test.a65 ----------------------------

                                    sta NF
                                    sta VF
                                    sta ZF
                                    sta CF
                                    rts
                        
                                endif
                                if  cputype = 1
                        
c0fd : a506             A6502       lda AR      ; 65C02
c0ff : 08                           php
c100 : 68                           pla
c101 : 8507                         sta NF
c103 : 8509                         sta ZF
c105 : 60                           rts
                        
c106 : 20c1c0           S6502       jsr SUB2
c109 : a506                         lda AR
c10b : 08                           php
c10c : 68                           pla
c10d : 8507                         sta NF
c10f : 8509                         sta ZF
c111 : a503                         lda HNVZC
c113 : 8508                         sta VF
c115 : 850a                         sta CF
c117 : 60                           rts
                        
                                endif
                                if  cputype = 2
                        
                        A6502       lda AR      ; 65C816
                                    php
                                    pla
                                    sta NF
                                    sta ZF
                                    rts
                        
                        S6502       jsr SUB1
                                    lda AR
                                    php
                                    pla
                                    sta NF
                                    sta ZF
                                    lda HNVZC
                                    sta VF
                                    sta CF
                                    rts
                        
                                endif
                        
fffa =                          org $fffa       ;vectors
fffa : 5fc0                     dw  DONE
fffc : 00c0                     dw  TEST
fffe : 5fc0                     dw  DONE
                        
fffa =                          end TEST
                        
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
Program start address is at $c000 (49152).
