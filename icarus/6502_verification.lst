AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------- 6502_functional_test.a65 --------------------------

6108 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute 
                        ; it under the terms of the GNU General Public License
                        ; the Free Software Foundation, either version 3 of th
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will
                        ; but WITHOUT ANY WARRANTY; without even the implied w
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General P
                        ; along with this program.  If not, see <http://www.gn
                        
                        
                        ; This program is designed to test all opcodes of a 65
                        ; addressing modes with focus on propper setting of th
                        ; register bits.
                        ;
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my G
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers
                        ;                         |  |  |   wide listing (133 
                        ;                         |  |  write intel hex file i
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to 
                        ; To run load intel hex image with a load command, tha
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successf
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions wi
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapp
                        ; Tests documented behavior of the original NMOS 6502 
                        ; opcodes. Additional opcodes of newer versions of the
                        ; not be tested. Decimal ops will only be tested with 
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you
                        ;   immediately preceeding code for the instruction to
                        ;   tested first, flags are checked second by pushing 
                        ;   pulling them to the accumulator after the result w
                        ;   flags are no longer valid for the tested instructi
                        ;     If the tested instruction was indexed, the relev
                        ;   also be checked. Opposed to the flags, X and Y reg
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------- 6502_functional_test.a65 --------------------------

                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to cha
                        ;   01-dec-2012  fixed trap in branch field must be a 
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when
                        ;                added test sequence check to detect i
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output
                        ;   13-dec-2014  added binary/decimal opcode table swi
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifyin
                        ;   24-aug-2015  all self modifying immediate opcodes 
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode 
                        ;   04-dec-2017  fixed BRK only tested with interrupts
                        ;                added option to skip the remainder of
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result 
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be
                        ;as a consequence BRK can not be tested but will be em
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load di
                        ;loading directly is preferred but may not be supporte
                        ;0 produces only consecutive object code, 1 is not sui
0000 =                  load_data_direct = 0
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2
                        ;change) 2 requires extra code and is not recommended.
                        ;tested if you allow changing the interrupt status (I_
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used 
                        ;zero_page memory start address, $52 (82) consecutive 
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a
                        
                        ;data_segment memory start address, $7B (123) consecut
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUS
                            endif
                        
                        ;code_segment memory start address, 13.1kB of consecut
                        ;                                   add 2.5 kB if I_fl
c000 =                  code_segment = $c000
                        
                        ;self modifying code may be disabled to allow running 
                        ;0=part of the code is self modifying and must reside 
                        ;1=tests disabled: branch range
0001 =                  disable_selfmod = 1
                        
                        ;report errors through I/O channel (0=use standard sel
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------- 6502_functional_test.a65 --------------------------

                        ;RAM integrity test option. Checks for undesired RAM w
                        ;set lowest non RAM or RAM mirror address page (-1=dis
                        ;leave disabled if a monitor, OS or background interru
0010 =                  ram_top = $10
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disa
                        ;2=disable including decimal flag in processor status
0000 =                  disable_decimal = 0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modifi
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from
                        ; putting larger portions of code (more than 3 bytes) 
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets i
                        ; therefore a RTS inside the success macro is not poss
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------- 6502_functional_test.a65 --------------------------

                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets i
                        ; therefore a RTS inside the success macro is not poss
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------- 6502_functional_test.a65 --------------------------

0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP,
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disabl
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt di
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compa
                        ;masking of always on bits after PHP or BRK (unused & 
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrup
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enab
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interru
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disa
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    cmp #(\1|fao)&m8i   ;expected flags + alwa
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    eor #(\1&m8i|fao)   ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change 
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + alwa
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------- 6502_functional_test.a65 --------------------------

                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrup
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode b
                                    cmp #(\1|faod)&m8i  ;I_flag is always enab
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode b
                                    eor #(\1&m8i|faod)  ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interru
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode b
                                    cmp #(\1|faid)&m8   ;I_flag is always disa
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode b
                                    eor #(\1|faid)      ;invert expected flags
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    ora #decmode        ;ignore decimal mode b
                                    cmp #(\1|faod)&m8i  ;expected flags + alwa
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never chang
                                    ora #decmode        ;ignore decimal mode b
                                    eor #(\1&m8i|faod)  ;mask I, invert expect
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change 
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode b
                                    cmp #(\1|faod)&m8   ;expected flags + alwa
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode b
                                    eor #\1|faod        ;invert expected flags
                                    endm
                                endif
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------- 6502_functional_test.a65 --------------------------

                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processo
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & im
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & im
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & imme
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate 
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & 
                                    load_flag \2
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------- 6502_functional_test.a65 --------------------------

                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & 
                        tst_stat    macro       ;testing flags in the processo
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_a       macro       ;testing result in accu & flag
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & f
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & f
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in acc
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------- 6502_functional_test.a65 --------------------------

                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in acc
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_z       macro       ;indexed testing result in zp 
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flag
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in mem
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & fla
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has alter
                        ;   designated write areas.
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------- 6502_functional_test.a65 --------------------------

                        ;   uses zpt word as indirect pointer, zpt+2 word as c
                                if ram_top > -1
                        check_ram   macro
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect 
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write te
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execut
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't ju
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altere
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, co
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a =                  irq_a   ds  1               ;a register
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------- 6502_functional_test.a65 --------------------------

000b =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c =                  zpt                         ;6 bytes store/modify test
                        ;add/subtract operand generation and result/flag predi
000c =                  adfc    ds  1               ;carry flag before op
000d =                  ad1     ds  1               ;operand 1 - accumulator
000e =                  ad2     ds  1               ;operand 2 - memory / imme
000f =                  adrl    ds  1               ;expected result bits 0-7
0010 =                  adrh    ds  1               ;expected result bit 8 (ca
0011 =                  adrf    ds  1               ;expected flags NV0000ZC (
0012 =                  sb2     ds  1               ;operand 2 complemented fo
0013 =                  zp_bss
0013 =                  zps     db  $80,1           ;additional shift pattern 
0015 =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT
0019 =                  zp7f    db  $7f             ;test pattern for compare
                        ;logical zeropage operands
001a =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001e =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0022 =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0026 =                  ind1    dw  abs1            ;indirect pointer to patte
0028 =                          dw  abs1+1
002a =                          dw  abs1+2
002c =                          dw  abs1+3
002e =                          dw  abs7f
0030 =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap
0032 =                  indt    dw  abst            ;indirect pointer to store
0034 =                          dw  abst+1
0036 =                          dw  abst+2
0038 =                          dw  abst+3
003a =                  inwt    dw  abst-$f8        ;indirect pointer for wrap
003c =                  indAN   dw  absAN           ;indirect pointer to AND p
003e =                          dw  absAN+1
0040 =                          dw  absAN+2
0042 =                          dw  absAN+3
0044 =                  indEO   dw  absEO           ;indirect pointer to EOR p
0046 =                          dw  absEO+1
0048 =                          dw  absEO+2
004a =                          dw  absEO+3
004c =                  indOR   dw  absOR           ;indirect pointer to OR pa
004e =                          dw  absOR+1
0050 =                          dw  absOR+2
0052 =                          dw  absOR+3
                        ;add/subtract indirect pointers
0054 =                  adi2    dw  ada2            ;indirect pointer to opera
0056 =                  sbi2    dw  sba2            ;indirect pointer to compl
0058 =                  adiy2   dw  ada2-$ff        ;with offset for indirect 
005a =                  sbiy2   dw  sba2-$ff
005c =                  zp_bss_end
                        
0200 =                          org data_segment
0200 =                  test_case   ds  1           ;current test number
0201 =                  ram_chksm   ds  2           ;checksum for RAM integrit
                        ;add/subtract operand copy - abs tests write area
0203 =                  abst                        ;6 bytes store/modify test
0203 =                  ada2    ds  1               ;operand 2
0204 =                  sba2    ds  1               ;operand 2 complemented fo
0205 =                          ds  4               ;fill remaining bytes
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------- 6502_functional_test.a65 --------------------------

0209 =                  data_bss
                            if load_data_direct = 1
                        ex_andi and #0              ;execute immediate opcodes
                                rts
                        ex_eori eor #0              ;execute immediate opcodes
                                rts
                        ex_orai ora #0              ;execute immediate opcodes
                                rts
                        ex_adci adc #0              ;execute immediate opcodes
                                rts
                        ex_sbci sbc #0              ;execute immediate opcodes
                                rts
                            else
0209 =                  ex_andi ds  3
020c =                  ex_eori ds  3
020f =                  ex_orai ds  3
0212 =                  ex_adci ds  3
0215 =                  ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns
0218 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT
021c =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d =                  fLDx    db  fn,fn,0,fz              ;expected flags fo
                        ;shifts
0221 =                  rASL                                ;expected result A
0221 =                  rROL    db  0,2,$86,$04,$82,0
0227 =                  rROLc   db  1,3,$87,$05,$83,1       ;expected result R
022d =                  rLSR                                ;expected result L
022d =                  rROR    db  $40,0,$61,$41,$20,0
0233 =                  rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result R
0239 =                  fASL                                ;expected flags fo
0239 =                  fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f =                  fROLc   db  fc,0,fnc,fc,fn,0        ;carry in
0245 =                  fLSR
0245 =                  fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b =                  fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 =                  rINC    db  $7f,$80,$ff,0,1         ;expected result f
0256 =                  fINC    db  0,fn,fn,fz,0            ;expected flags fo
                        ;logical memory operand
025b =                  absOR   db  0,$1f,$71,$80           ;test pattern for 
025f =                  absAN   db  $0f,$ff,$7f,$80         ;test pattern for 
0263 =                  absEO   db  $ff,$0f,$8f,$8f         ;test pattern for 
                        ;logical accu operand
0267 =                  absORa  db  0,$f1,$1f,0             ;test pattern for 
026b =                  absANa  db  $f0,$ff,$ff,$ff         ;test pattern for 
026f =                  absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for 
                        ;logical results
0273 =                  absrlo  db  0,$ff,$7f,$80
0277 =                  absflo  db  fz,fn,0,fn
027b =                  data_bss_end
                        
                        
                                code
c000 =                          org code_segment
c000 : d8               start   cld
c001 : a2ff                     ldx #$ff
c003 : 9a                       txs
c004 : a900                     lda #0          ;*** test 0 = initialize
c006 : 8d0002                   sta test_case
0000 =                  test_num = 0
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------- 6502_functional_test.a65 --------------------------

                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                        
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                        
                        ;pretest small branch offset
c009 : a205                     ldx #5
c00b : 4c33c0                   jmp psb_test
c00e :                  psb_bwok
c00e : a005                     ldy #5
c010 : d008                     bne psb_forw
                                trap        ;branch should be taken
c012 : 4c12c0          >        jmp *           ;failed anyway
                        
c015 : 88                       dey         ;forward landing zone
c016 : 88                       dey
c017 : 88                       dey
c018 : 88                       dey
c019 : 88                       dey
c01a :                  psb_forw
c01a : 88                       dey
c01b : 88                       dey
c01c : 88                       dey
c01d : 88                       dey
c01e : 88                       dey
c01f : f017                     beq psb_fwok
                                trap        ;forward offset
c021 : 4c21c0          >        jmp *           ;failed anyway
                        
                        
c024 : ca                       dex         ;backward landing zone
c025 : ca                       dex
c026 : ca                       dex
c027 : ca                       dex
c028 : ca                       dex
c029 :                  psb_back
c029 : ca                       dex
c02a : ca                       dex
c02b : ca                       dex
c02c : ca                       dex
c02d : ca                       dex
c02e : f0de                     beq psb_bwok
                                trap        ;backward offset
c030 : 4c30c0          >        jmp *           ;failed anyway
                        
c033 :                  psb_test
c033 : d0f4                     bne psb_back
                                trap        ;branch should be taken
c035 : 4c35c0          >        jmp *           ;failed anyway
                        
c038 :                  psb_fwok
                        
                        ;initialize BSS segment
                            if load_data_direct != 1
c038 : a248                     ldx #zp_end-zp_init-1
c03a : bd81f3           ld_zp   lda zp_init,x
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------- 6502_functional_test.a65 --------------------------

c03d : 9513                     sta zp_bss,x
c03f : ca                       dex
c040 : 10f8                     bpl ld_zp
c042 : a271                     ldx #data_end-data_init-1
c044 : bdcaf3           ld_data lda data_init,x
c047 : 9d0902                   sta data_bss,x
c04a : ca                       dex
c04b : 10f7                     bpl ld_data
                              if ROM_vectors = 1
c04d : a205                     ldx #5
c04f : bd3cf4           ld_vect lda vec_init,x
c052 : 9dfaff                   sta vec_bss,x
c055 : ca                       dex
c056 : 10f7                     bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                        
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
c058 : a900                     lda #0
c05a : 850c                     sta zpt         ;set low byte of indirect poin
c05c : 8d0202                   sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
c05f : 18                       clc
c060 : a209                     ldx #zp_bss-zero_page ;zeropage - write test a
c062 : 750a             gcs3    adc zero_page,x
c064 : 9004                     bcc gcs2
c066 : ee0202                   inc ram_chksm+1 ;carry to high byte
c069 : 18                       clc
c06a : e8               gcs2    inx
c06b : d0f5                     bne gcs3
c06d : a202                     ldx #hi(abs1)   ;set high byte of indirect poi
c06f : 860d                     stx zpt+1
c071 : a018                     ldy #lo(abs1)   ;data after write & execute te
c073 : 710c             gcs5    adc (zpt),y
c075 : 9004                     bcc gcs4
c077 : ee0202                   inc ram_chksm+1 ;carry to high byte
c07a : 18                       clc
c07b : c8               gcs4    iny
c07c : d0f5                     bne gcs5
c07e : e8                       inx             ;advance RAM high address
c07f : 860d                     stx zpt+1
c081 : e010                     cpx #ram_top
c083 : d0ee                     bne gcs5
c085 : 8d0102                   sta ram_chksm   ;checksum complete
                            endif
                                next_test
c088 : ad0002          >            lda test_case   ;previous test
c08b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------- 6502_functional_test.a65 --------------------------

c08d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
c08f : a901            >            lda #test_num   ;*** next tests' number
c091 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
                                ldy #$fe        ;testing maximum range, not -1
                        range_loop
                                dey             ;next relative address
                                tya
                                tax             ;precharge count to end of loo
                                bpl range_fw    ;calculate relative address
                                clc             ;avoid branch self or to relat
                                adc #2
                                nop             ;offset landing zone - tolerat
                                nop
                                nop
                                nop
                                nop
                        range_fw
                                nop
                                nop
                                nop
                                nop
                                nop
                                eor #$7f        ;complement except sign
                                sta range_adr   ;load into test target
                                lda #0          ;should set zero flag in statu
                                jmp range_op
                        
                                dex             ; offset landing zone - backwa
                                dex
                                dex
                                dex
                                dex
                                ;relative address target field with branch und
                                dex             ;-128 - max backward
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-120
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-110
                                dex
                                dex
                                dex
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------- 6502_functional_test.a65 --------------------------

                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-100
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-90
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-80
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-70
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-60
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-50
                                dex
                                dex
                                dex
                                dex
                                dex
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------- 6502_functional_test.a65 --------------------------

                                dex
                                dex
                                dex
                                dex
                                dex             ;-40
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-30
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-20
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-10
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-3
                        range_op                ;test target with zero flag=0,
                        range_adr   = *+1       ;modifiable relative address
                                beq *+64        ;+64 if called without modific
                                dex             ;+0
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+10
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------- 6502_functional_test.a65 --------------------------

                                dex
                                dex
                                dex
                                dex             ;+20
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+30
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+40
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+50
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+60
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+70
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------- 6502_functional_test.a65 --------------------------

                                dex
                                dex             ;+80
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+90
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+100
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+110
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+120
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                nop             ;offset landing zone - forward
                                nop
                                nop
                                nop
                                nop
                                beq range_ok    ;+127 - max forward
                                trap            ; bad range
                                nop             ;offset landing zone - tolerat
                                nop
                                nop
                                nop
                                nop
                        range_ok
                                nop
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------- 6502_functional_test.a65 --------------------------

                                nop
                                nop
                                nop
                                nop
                                cpy #0
                                beq range_end
                                jmp range_loop
                        range_end               ;range test successful
                            endif
                                next_test
c094 : ad0002          >            lda test_case   ;previous test
c097 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c099 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
c09b : a902            >            lda #test_num   ;*** next tests' number
c09d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
c0a0 : c001                     cpy #1          ;testing BNE true
c0a2 : d003                     bne test_bne
                                trap
c0a4 : 4ca4c0          >        jmp *           ;failed anyway
                        
c0a7 :                  test_bne
c0a7 : a900                     lda #0
c0a9 : c900                     cmp #0          ;test compare immediate
                                trap_ne
c0ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
c0ad : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
c0af : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
c0b1 : c901                     cmp #1
                                trap_eq
c0b3 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
c0b5 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
c0b7 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
c0b9 : aa                       tax
c0ba : e000                     cpx #0          ;test compare x immediate
                                trap_ne
c0bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
c0be : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
c0c0 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
c0c2 : e001                     cpx #1
                                trap_eq
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------- 6502_functional_test.a65 --------------------------

c0c4 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
c0c6 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
c0c8 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
c0ca : a8                       tay
c0cb : c000                     cpy #0          ;test compare y immediate
                                trap_ne
c0cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
c0cf : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
c0d1 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
c0d3 : c001                     cpy #1
                                trap_eq
c0d5 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
c0d7 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
c0d9 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
c0db : ad0002          >            lda test_case   ;previous test
c0de : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c0e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
c0e2 : a903            >            lda #test_num   ;*** next tests' number
c0e4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        ;testing stack operations PHA PHP PLA PLP
                        
c0e7 : a2ff                     ldx #$ff        ;initialize stack
c0e9 : 9a                       txs
c0ea : a955                     lda #$55
c0ec : 48                       pha
c0ed : a9aa                     lda #$aa
c0ef : 48                       pha
c0f0 : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
c0f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0f5 : ba                       tsx
c0f6 : 8a                       txa             ;overwrite accu
c0f7 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
c0f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c0fb : 68                       pla
c0fc : c9aa                     cmp #$aa        ;successful retreived from sta
                                trap_ne
c0fe : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------- 6502_functional_test.a65 --------------------------

                        
c100 : 68                       pla
c101 : c955                     cmp #$55
                                trap_ne
c103 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c105 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
c108 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c10a : ba                       tsx
c10b : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
c10d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c10f : ad0002          >            lda test_case   ;previous test
c112 : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c114 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
c116 : a904            >            lda #test_num   ;*** next tests' number
c118 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE 
                                set_stat $ff    ;all on
                       >            load_flag $ff    
c11b : a9ff            >            lda #$ff                 ;allow test to ch
                       >
c11d : 48              >            pha         ;use stack to load status
c11e : 28              >            plp
                        
c11f : 101a                     bpl nbr1        ;branches should not be taken
c121 : 501b                     bvc nbr2
c123 : 901c                     bcc nbr3
c125 : d01d                     bne nbr4
c127 : 3003                     bmi br1         ;branches should be taken
                                trap
c129 : 4c29c1          >        jmp *           ;failed anyway
                        
c12c : 7003             br1     bvs br2
                                trap
c12e : 4c2ec1          >        jmp *           ;failed anyway
                        
c131 : b003             br2     bcs br3
                                trap
c133 : 4c33c1          >        jmp *           ;failed anyway
                        
c136 : f00f             br3     beq br4
                                trap
c138 : 4c38c1          >        jmp *           ;failed anyway
                        
c13b :                  nbr1
                                trap            ;previous bpl taken
c13b : 4c3bc1          >        jmp *           ;failed anyway
                        
c13e :                  nbr2
                                trap            ;previous bvc taken
c13e : 4c3ec1          >        jmp *           ;failed anyway
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------- 6502_functional_test.a65 --------------------------

                        
c141 :                  nbr3
                                trap            ;previous bcc taken
c141 : 4c41c1          >        jmp *           ;failed anyway
                        
c144 :                  nbr4
                                trap            ;previous bne taken
c144 : 4c44c1          >        jmp *           ;failed anyway
                        
c147 : 08               br4     php
c148 : ba                       tsx
c149 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
c14b : d0fe            >        bne *           ;failed not equal (non zero)
                        
c14d : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
c14e : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags +
                        
                                trap_ne
c150 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c152 : ba                       tsx
c153 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
c155 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
c157 : a900            >            lda #0                   ;allow test to ch
                       >
c159 : 48              >            pha         ;use stack to load status
c15a : 28              >            plp
                        
c15b : 301a                     bmi nbr11       ;branches should not be taken
c15d : 701b                     bvs nbr12
c15f : b01c                     bcs nbr13
c161 : f01d                     beq nbr14
c163 : 1003                     bpl br11        ;branches should be taken
                                trap
c165 : 4c65c1          >        jmp *           ;failed anyway
                        
c168 : 5003             br11    bvc br12
                                trap
c16a : 4c6ac1          >        jmp *           ;failed anyway
                        
c16d : 9003             br12    bcc br13
                                trap
c16f : 4c6fc1          >        jmp *           ;failed anyway
                        
c172 : d00f             br13    bne br14
                                trap
c174 : 4c74c1          >        jmp *           ;failed anyway
                        
c177 :                  nbr11
                                trap            ;previous bmi taken
c177 : 4c77c1          >        jmp *           ;failed anyway
                        
c17a :                  nbr12
                                trap            ;previous bvs taken
c17a : 4c7ac1          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------- 6502_functional_test.a65 --------------------------

c17d :                  nbr13
                                trap            ;previous bcs taken
c17d : 4c7dc1          >        jmp *           ;failed anyway
                        
c180 :                  nbr14
                                trap            ;previous beq taken
c180 : 4c80c1          >        jmp *           ;failed anyway
                        
c183 : 08               br14    php
c184 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushe
c185 : c930            >            cmp #(0      |fao)&m8    ;expected flags +
                        
                                trap_ne
c187 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
c189 : a902            >            lda #zero             ;allow test to chang
                       >
c18b : 48              >            pha         ;use stack to load status
c18c : 28              >            plp
                        
c18d : d002                     bne brzs1
c18f : f003                     beq brzs2
c191 :                  brzs1
                                trap            ;branch zero/non zero
c191 : 4c91c1          >        jmp *           ;failed anyway
                        
c194 : b002             brzs2   bcs brzs3
c196 : 9003                     bcc brzs4
c198 :                  brzs3
                                trap            ;branch carry/no carry
c198 : 4c98c1          >        jmp *           ;failed anyway
                        
c19b : 3002             brzs4   bmi brzs5
c19d : 1003                     bpl brzs6
c19f :                  brzs5
                                trap            ;branch minus/plus
c19f : 4c9fc1          >        jmp *           ;failed anyway
                        
c1a2 : 7002             brzs6   bvs brzs7
c1a4 : 5003                     bvc brzs8
c1a6 :                  brzs7
                                trap            ;branch overflow/no overflow
c1a6 : 4ca6c1          >        jmp *           ;failed anyway
                        
c1a9 :                  brzs8
                                set_stat carry
                       >            load_flag carry
c1a9 : a901            >            lda #carry             ;allow test to chan
                       >
c1ab : 48              >            pha         ;use stack to load status
c1ac : 28              >            plp
                        
c1ad : f002                     beq brcs1
c1af : d003                     bne brcs2
c1b1 :                  brcs1
                                trap            ;branch zero/non zero
c1b1 : 4cb1c1          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------- 6502_functional_test.a65 --------------------------

c1b4 : 9002             brcs2   bcc brcs3
c1b6 : b003                     bcs brcs4
c1b8 :                  brcs3
                                trap            ;branch carry/no carry
c1b8 : 4cb8c1          >        jmp *           ;failed anyway
                        
c1bb : 3002             brcs4   bmi brcs5
c1bd : 1003                     bpl brcs6
c1bf :                  brcs5
                                trap            ;branch minus/plus
c1bf : 4cbfc1          >        jmp *           ;failed anyway
                        
c1c2 : 7002             brcs6   bvs brcs7
c1c4 : 5003                     bvc brcs8
c1c6 :                  brcs7
                                trap            ;branch overflow/no overflow
c1c6 : 4cc6c1          >        jmp *           ;failed anyway
                        
                        
c1c9 :                  brcs8
                                set_stat minus
                       >            load_flag minus
c1c9 : a980            >            lda #minus             ;allow test to chan
                       >
c1cb : 48              >            pha         ;use stack to load status
c1cc : 28              >            plp
                        
c1cd : f002                     beq brmi1
c1cf : d003                     bne brmi2
c1d1 :                  brmi1
                                trap            ;branch zero/non zero
c1d1 : 4cd1c1          >        jmp *           ;failed anyway
                        
c1d4 : b002             brmi2   bcs brmi3
c1d6 : 9003                     bcc brmi4
c1d8 :                  brmi3
                                trap            ;branch carry/no carry
c1d8 : 4cd8c1          >        jmp *           ;failed anyway
                        
c1db : 1002             brmi4   bpl brmi5
c1dd : 3003                     bmi brmi6
c1df :                  brmi5
                                trap            ;branch minus/plus
c1df : 4cdfc1          >        jmp *           ;failed anyway
                        
c1e2 : 7002             brmi6   bvs brmi7
c1e4 : 5003                     bvc brmi8
c1e6 :                  brmi7
                                trap            ;branch overflow/no overflow
c1e6 : 4ce6c1          >        jmp *           ;failed anyway
                        
c1e9 :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
c1e9 : a940            >            lda #overfl             ;allow test to cha
                       >
c1eb : 48              >            pha         ;use stack to load status
c1ec : 28              >            plp
                        
c1ed : f002                     beq brvs1
c1ef : d003                     bne brvs2
c1f1 :                  brvs1
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------- 6502_functional_test.a65 --------------------------

                                trap            ;branch zero/non zero
c1f1 : 4cf1c1          >        jmp *           ;failed anyway
                        
c1f4 : b002             brvs2   bcs brvs3
c1f6 : 9003                     bcc brvs4
c1f8 :                  brvs3
                                trap            ;branch carry/no carry
c1f8 : 4cf8c1          >        jmp *           ;failed anyway
                        
c1fb : 3002             brvs4   bmi brvs5
c1fd : 1003                     bpl brvs6
c1ff :                  brvs5
                                trap            ;branch minus/plus
c1ff : 4cffc1          >        jmp *           ;failed anyway
                        
c202 : 5002             brvs6   bvc brvs7
c204 : 7003                     bvs brvs8
c206 :                  brvs7
                                trap            ;branch overflow/no overflow
c206 : 4c06c2          >        jmp *           ;failed anyway
                        
c209 :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
c209 : a9fd            >            lda #$ff-zero             ;allow test to c
                       >
c20b : 48              >            pha         ;use stack to load status
c20c : 28              >            plp
                        
c20d : f002                     beq brzc1
c20f : d003                     bne brzc2
c211 :                  brzc1
                                trap            ;branch zero/non zero
c211 : 4c11c2          >        jmp *           ;failed anyway
                        
c214 : 9002             brzc2   bcc brzc3
c216 : b003                     bcs brzc4
c218 :                  brzc3
                                trap            ;branch carry/no carry
c218 : 4c18c2          >        jmp *           ;failed anyway
                        
c21b : 1002             brzc4   bpl brzc5
c21d : 3003                     bmi brzc6
c21f :                  brzc5
                                trap            ;branch minus/plus
c21f : 4c1fc2          >        jmp *           ;failed anyway
                        
c222 : 5002             brzc6   bvc brzc7
c224 : 7003                     bvs brzc8
c226 :                  brzc7
                                trap            ;branch overflow/no overflow
c226 : 4c26c2          >        jmp *           ;failed anyway
                        
c229 :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
c229 : a9fe            >            lda #$ff-carry             ;allow test to 
                       >
c22b : 48              >            pha         ;use stack to load status
c22c : 28              >            plp
                        
c22d : d002                     bne brcc1
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------- 6502_functional_test.a65 --------------------------

c22f : f003                     beq brcc2
c231 :                  brcc1
                                trap            ;branch zero/non zero
c231 : 4c31c2          >        jmp *           ;failed anyway
                        
c234 : b002             brcc2   bcs brcc3
c236 : 9003                     bcc brcc4
c238 :                  brcc3
                                trap            ;branch carry/no carry
c238 : 4c38c2          >        jmp *           ;failed anyway
                        
c23b : 1002             brcc4   bpl brcc5
c23d : 3003                     bmi brcc6
c23f :                  brcc5
                                trap            ;branch minus/plus
c23f : 4c3fc2          >        jmp *           ;failed anyway
                        
c242 : 5002             brcc6   bvc brcc7
c244 : 7003                     bvs brcc8
c246 :                  brcc7
                                trap            ;branch overflow/no overflow
c246 : 4c46c2          >        jmp *           ;failed anyway
                        
c249 :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
c249 : a97f            >            lda #$ff-minus             ;allow test to 
                       >
c24b : 48              >            pha         ;use stack to load status
c24c : 28              >            plp
                        
c24d : d002                     bne brpl1
c24f : f003                     beq brpl2
c251 :                  brpl1
                                trap            ;branch zero/non zero
c251 : 4c51c2          >        jmp *           ;failed anyway
                        
c254 : 9002             brpl2   bcc brpl3
c256 : b003                     bcs brpl4
c258 :                  brpl3
                                trap            ;branch carry/no carry
c258 : 4c58c2          >        jmp *           ;failed anyway
                        
c25b : 3002             brpl4   bmi brpl5
c25d : 1003                     bpl brpl6
c25f :                  brpl5
                                trap            ;branch minus/plus
c25f : 4c5fc2          >        jmp *           ;failed anyway
                        
c262 : 5002             brpl6   bvc brpl7
c264 : 7003                     bvs brpl8
c266 :                  brpl7
                                trap            ;branch overflow/no overflow
c266 : 4c66c2          >        jmp *           ;failed anyway
                        
c269 :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
c269 : a9bf            >            lda #$ff-overfl             ;allow test to
                       >
c26b : 48              >            pha         ;use stack to load status
c26c : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------- 6502_functional_test.a65 --------------------------

                        
c26d : d002                     bne brvc1
c26f : f003                     beq brvc2
c271 :                  brvc1
                                trap            ;branch zero/non zero
c271 : 4c71c2          >        jmp *           ;failed anyway
                        
c274 : 9002             brvc2   bcc brvc3
c276 : b003                     bcs brvc4
c278 :                  brvc3
                                trap            ;branch carry/no carry
c278 : 4c78c2          >        jmp *           ;failed anyway
                        
c27b : 1002             brvc4   bpl brvc5
c27d : 3003                     bmi brvc6
c27f :                  brvc5
                                trap            ;branch minus/plus
c27f : 4c7fc2          >        jmp *           ;failed anyway
                        
c282 : 7002             brvc6   bvs brvc7
c284 : 5003                     bvc brvc8
c286 :                  brvc7
                                trap            ;branch overflow/no overflow
c286 : 4c86c2          >        jmp *           ;failed anyway
                        
c289 :                  brvc8
                                next_test
c289 : ad0002          >            lda test_case   ;previous test
c28c : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c28e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
c290 : a905            >            lda #test_num   ;*** next tests' number
c292 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA
c295 : a255                     ldx #$55        ;x & y protected
c297 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
c299 : a9ff            >            lda #$ff                  ;allow test to c
                       >
c29b : 48              >            pha         ;use stack to load status
c29c : a901            >            lda #1     ;precharge accu
c29e : 28              >            plp
                        
c29f : 48                       pha
                                tst_a 1,$ff
c2a0 : 08              >            php         ;save flags
c2a1 : c901            >            cmp #1     ;test result
                       >            trap_ne
c2a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2a5 : 68              >            pla         ;load status
c2a6 : 48              >            pha
                       >            cmp_flag $ff
c2a7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------- 6502_functional_test.a65 --------------------------

c2a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2ab : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
c2ac : a900            >            lda #0             ;allow test to change I
                       >
c2ae : 48              >            pha         ;use stack to load status
c2af : a900            >            lda #0     ;precharge accu
c2b1 : 28              >            plp
                        
c2b2 : 48                       pha
                                tst_a 0,0
c2b3 : 08              >            php         ;save flags
c2b4 : c900            >            cmp #0     ;test result
                       >            trap_ne
c2b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2b8 : 68              >            pla         ;load status
c2b9 : 48              >            pha
                       >            cmp_flag 0
c2ba : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c2bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2be : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
c2bf : a9ff            >            lda #$ff             ;allow test to change
                       >
c2c1 : 48              >            pha         ;use stack to load status
c2c2 : a9ff            >            lda #$ff     ;precharge accu
c2c4 : 28              >            plp
                        
c2c5 : 48                       pha
                                tst_a $ff,$ff
c2c6 : 08              >            php         ;save flags
c2c7 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c2c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2cb : 68              >            pla         ;load status
c2cc : 48              >            pha
                       >            cmp_flag $ff
c2cd : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c2cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2d1 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
c2d2 : a900            >            lda #0             ;allow test to change I
                       >
c2d4 : 48              >            pha         ;use stack to load status
c2d5 : a901            >            lda #1     ;precharge accu
c2d7 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------- 6502_functional_test.a65 --------------------------

c2d8 : 48                       pha
                                tst_a 1,0
c2d9 : 08              >            php         ;save flags
c2da : c901            >            cmp #1     ;test result
                       >            trap_ne
c2dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2de : 68              >            pla         ;load status
c2df : 48              >            pha
                       >            cmp_flag 0
c2e0 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c2e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2e4 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
c2e5 : a9ff            >            lda #$ff             ;allow test to change
                       >
c2e7 : 48              >            pha         ;use stack to load status
c2e8 : a900            >            lda #0     ;precharge accu
c2ea : 28              >            plp
                        
c2eb : 48                       pha
                                tst_a 0,$ff
c2ec : 08              >            php         ;save flags
c2ed : c900            >            cmp #0     ;test result
                       >            trap_ne
c2ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2f1 : 68              >            pla         ;load status
c2f2 : 48              >            pha
                       >            cmp_flag $ff
c2f3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c2f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c2f7 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
c2f8 : a900            >            lda #0             ;allow test to change I
                       >
c2fa : 48              >            pha         ;use stack to load status
c2fb : a9ff            >            lda #$ff     ;precharge accu
c2fd : 28              >            plp
                        
c2fe : 48                       pha
                                tst_a $ff,0
c2ff : 08              >            php         ;save flags
c300 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c302 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c304 : 68              >            pla         ;load status
c305 : 48              >            pha
                       >            cmp_flag 0
c306 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
c308 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c30a : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
c30b : a9ff            >            lda #$ff                  ;allow test to c
                       >
c30d : 48              >            pha         ;use stack to load status
c30e : a900            >            lda #0     ;precharge accu
c310 : 28              >            plp
                        
c311 : 68                       pla
                                tst_a $ff,$ff-zero
c312 : 08              >            php         ;save flags
c313 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c315 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c317 : 68              >            pla         ;load status
c318 : 48              >            pha
                       >            cmp_flag $ff-zero
c319 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c31b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c31d : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
c31e : a900            >            lda #0             ;allow test to change I
                       >
c320 : 48              >            pha         ;use stack to load status
c321 : a9ff            >            lda #$ff     ;precharge accu
c323 : 28              >            plp
                        
c324 : 68                       pla
                                tst_a 0,zero
c325 : 08              >            php         ;save flags
c326 : c900            >            cmp #0     ;test result
                       >            trap_ne
c328 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c32a : 68              >            pla         ;load status
c32b : 48              >            pha
                       >            cmp_flag zero
c32c : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c32e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c330 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
c331 : a9ff            >            lda #$ff             ;allow test to change
                       >
c333 : 48              >            pha         ;use stack to load status
c334 : a9fe            >            lda #$fe     ;precharge accu
c336 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------- 6502_functional_test.a65 --------------------------

                        
c337 : 68                       pla
                                tst_a 1,$ff-zero-minus
c338 : 08              >            php         ;save flags
c339 : c901            >            cmp #1     ;test result
                       >            trap_ne
c33b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c33d : 68              >            pla         ;load status
c33e : 48              >            pha
                       >            cmp_flag $ff-zero-minus
c33f : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected 
                       >
                       >            trap_ne
c341 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c343 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
c344 : a900            >            lda #0             ;allow test to change I
                       >
c346 : 48              >            pha         ;use stack to load status
c347 : a900            >            lda #0     ;precharge accu
c349 : 28              >            plp
                        
c34a : 68                       pla
                                tst_a $ff,minus
c34b : 08              >            php         ;save flags
c34c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c34e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c350 : 68              >            pla         ;load status
c351 : 48              >            pha
                       >            cmp_flag minus
c352 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c354 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c356 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
c357 : a9ff            >            lda #$ff             ;allow test to change
                       >
c359 : 48              >            pha         ;use stack to load status
c35a : a9ff            >            lda #$ff     ;precharge accu
c35c : 28              >            plp
                        
c35d : 68                       pla
                                tst_a 0,$ff-minus
c35e : 08              >            php         ;save flags
c35f : c900            >            cmp #0     ;test result
                       >            trap_ne
c361 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c363 : 68              >            pla         ;load status
c364 : 48              >            pha
                       >            cmp_flag $ff-minus
c365 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------- 6502_functional_test.a65 --------------------------

                       >
                       >            trap_ne
c367 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c369 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
c36a : a900            >            lda #0             ;allow test to change I
                       >
c36c : 48              >            pha         ;use stack to load status
c36d : a9fe            >            lda #$fe     ;precharge accu
c36f : 28              >            plp
                        
c370 : 68                       pla
                                tst_a 1,0
c371 : 08              >            php         ;save flags
c372 : c901            >            cmp #1     ;test result
                       >            trap_ne
c374 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c376 : 68              >            pla         ;load status
c377 : 48              >            pha
                       >            cmp_flag 0
c378 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c37a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c37c : 28              >            plp         ;restore status
                        
c37d : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
c37f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c381 : c0aa                     cpy #$aa
                                trap_ne
c383 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c385 : ad0002          >            lda test_case   ;previous test
c388 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c38a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
c38c : a906            >            lda #test_num   ;*** next tests' number
c38e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
c391 : a900            >            lda #0             ;allow test to change I
                       >
c393 : 48              >            pha         ;use stack to load status
c394 : a93c            >            lda #$3c     ;precharge accu
c396 : 28              >            plp
                        
c397 : 49c3                     eor #$c3
                                tst_a $ff,fn
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------- 6502_functional_test.a65 --------------------------

c399 : 08              >            php         ;save flags
c39a : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c39c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c39e : 68              >            pla         ;load status
c39f : 48              >            pha
                       >            cmp_flag fn
c3a0 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
c3a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3a4 : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
c3a5 : a900            >            lda #0             ;allow test to change I
                       >
c3a7 : 48              >            pha         ;use stack to load status
c3a8 : a9c3            >            lda #$c3     ;precharge accu
c3aa : 28              >            plp
                        
c3ab : 49c3                     eor #$c3
                                tst_a 0,fz
c3ad : 08              >            php         ;save flags
c3ae : c900            >            cmp #0     ;test result
                       >            trap_ne
c3b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3b2 : 68              >            pla         ;load status
c3b3 : 48              >            pha
                       >            cmp_flag fz
c3b4 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
c3b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3b8 : 28              >            plp         ;restore status
                        
                                next_test
c3b9 : ad0002          >            lda test_case   ;previous test
c3bc : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c3be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
c3c0 : a907            >            lda #test_num   ;*** next tests' number
c3c2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP,
                        ; testing NOP
c3c5 : a224                     ldx #$24
c3c7 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
c3c9 : a900            >            lda #0             ;allow test to change I
                       >
c3cb : 48              >            pha         ;use stack to load status
c3cc : a918            >            lda #$18     ;precharge accu
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------- 6502_functional_test.a65 --------------------------

c3ce : 28              >            plp
                        
c3cf : ea                       nop
                                tst_a $18,0
c3d0 : 08              >            php         ;save flags
c3d1 : c918            >            cmp #$18     ;test result
                       >            trap_ne
c3d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3d5 : 68              >            pla         ;load status
c3d6 : 48              >            pha
                       >            cmp_flag 0
c3d7 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c3d9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3db : 28              >            plp         ;restore status
                        
c3dc : e024                     cpx #$24
                                trap_ne
c3de : d0fe            >        bne *           ;failed not equal (non zero)
                        
c3e0 : c042                     cpy #$42
                                trap_ne
c3e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c3e4 : a2db                     ldx #$db
c3e6 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
c3e8 : a9ff            >            lda #$ff             ;allow test to change
                       >
c3ea : 48              >            pha         ;use stack to load status
c3eb : a9e7            >            lda #$e7     ;precharge accu
c3ed : 28              >            plp
                        
c3ee : ea                       nop
                                tst_a $e7,$ff
c3ef : 08              >            php         ;save flags
c3f0 : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
c3f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3f4 : 68              >            pla         ;load status
c3f5 : 48              >            pha
                       >            cmp_flag $ff
c3f6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c3f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c3fa : 28              >            plp         ;restore status
                        
c3fb : e0db                     cpx #$db
                                trap_ne
c3fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
c3ff : c0bd                     cpy #$bd
                                trap_ne
c401 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------- 6502_functional_test.a65 --------------------------

                                next_test
c403 : ad0002          >            lda test_case   ;previous test
c406 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c408 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
c40a : a908            >            lda #test_num   ;*** next tests' number
c40c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
c40f : a900            >            lda #$0             ;allow test to change 
                       >
c411 : 48              >            pha         ;use stack to load status
c412 : 28              >            plp
                        
c413 : a946                     lda #'F'
c415 : a241                     ldx #'A'
c417 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
c419 : 4c3bf2                   jmp test_far
c41c : ea                       nop
c41d : ea                       nop
                                trap_ne         ;runover protection
c41e : d0fe            >        bne *           ;failed not equal (non zero)
                        
c420 : e8                       inx
c421 : e8                       inx
c422 :                  far_ret
                                trap_eq         ;returned flags OK?
c422 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
c424 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
c426 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
c428 : 50fe            >        bvc *           ;failed overflow clear
                        
c42a : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
c42c : d0fe            >        bne *           ;failed not equal (non zero)
                        
c42e : e042                     cpx #('A'+1)
                                trap_ne
c430 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c432 : c04f                     cpy #('R'-3)
                                trap_ne
c434 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c436 : ca                       dex
c437 : c8                       iny
c438 : c8                       iny
c439 : c8                       iny
c43a : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
c43c : 4c45c4                   jmp test_near
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------- 6502_functional_test.a65 --------------------------

c43f : ea                       nop
c440 : ea                       nop
                                trap_ne         ;runover protection
c441 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c443 : e8                       inx
c444 : e8                       inx
c445 :                  test_near
                                trap_eq         ;passed flags OK?
c445 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
c447 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
c449 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
c44b : 50fe            >        bvc *           ;failed overflow clear
                        
c44d : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
c44f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c451 : e041                     cpx #'A'
                                trap_ne
c453 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c455 : c052                     cpy #'R'
                                trap_ne
c457 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c459 : ad0002          >            lda test_case   ;previous test
c45c : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c45e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
c460 : a909            >            lda #test_num   ;*** next tests' number
c462 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
c465 : a900            >            lda #0             ;allow test to change I
                       >
c467 : 48              >            pha         ;use stack to load status
c468 : 28              >            plp
                        
c469 : a949                     lda #'I'
c46b : a24e                     ldx #'N'
c46d : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
c46f : 6c6af2                   jmp (ptr_tst_ind)
c472 : ea                       nop
                                trap_ne         ;runover protection
c473 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c475 : 88                       dey
c476 : 88                       dey
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------- 6502_functional_test.a65 --------------------------

c477 :                  ind_ret
c477 : 08                       php             ;either SP or Y count will fai
c478 : 88                       dey
c479 : 88                       dey
c47a : 88                       dey
c47b : 28                       plp
                                trap_eq         ;returned flags OK?
c47c : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
c47e : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
c480 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
c482 : 50fe            >        bvc *           ;failed overflow clear
                        
c484 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
c486 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c488 : e04f                     cpx #('N'+1)
                                trap_ne
c48a : d0fe            >        bne *           ;failed not equal (non zero)
                        
c48c : c03e                     cpy #('D'-6)
                                trap_ne
c48e : d0fe            >        bne *           ;failed not equal (non zero)
                        
c490 : ba                       tsx             ;SP check
c491 : e0ff                     cpx #$ff
                                trap_ne
c493 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c495 : ad0002          >            lda test_case   ;previous test
c498 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c49a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
c49c : a90a            >            lda #test_num   ;*** next tests' number
c49e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
c4a1 : a900            >            lda #0             ;allow test to change I
                       >
c4a3 : 48              >            pha         ;use stack to load status
c4a4 : 28              >            plp
                        
c4a5 : a94a                     lda #'J'
c4a7 : a253                     ldx #'S'
c4a9 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
c4ab : 20a9f2                   jsr test_jsr
c4ad =                  jsr_ret = *-1           ;last address of jsr = return 
c4ae : 08                       php             ;either SP or Y count will fai
c4af : 88                       dey
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------- 6502_functional_test.a65 --------------------------

c4b0 : 88                       dey
c4b1 : 88                       dey
c4b2 : 28                       plp
                                trap_eq         ;returned flags OK?
c4b3 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
c4b5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
c4b7 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
c4b9 : 50fe            >        bvc *           ;failed overflow clear
                        
c4bb : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
c4bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
c4bf : e054                     cpx #('S'+1)
                                trap_ne
c4c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c4c3 : c04c                     cpy #('R'-6)
                                trap_ne
c4c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c4c7 : ba                       tsx             ;sp?
c4c8 : e0ff                     cpx #$ff
                                trap_ne
c4ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c4cc : ad0002          >            lda test_case   ;previous test
c4cf : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c4d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
c4d3 : a90b            >            lda #test_num   ;*** next tests' number
c4d5 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if al
c4d8 : a900            >            lda #0                  ;allow test to cha
                        
c4da : 48                       pha
c4db : a942                     lda #'B'
c4dd : a252                     ldx #'R'
c4df : a04b                     ldy #'K'
c4e1 : 28                       plp             ;N=0, V=0, Z=0, C=0
c4e2 : 00                       brk
                            else
                                lda #hi brk_ret0 ;emulated break
                                pha
                                lda #lo brk_ret0
                                pha
                                load_flag fao    ;set break & unused on stack
                                pha
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------- 6502_functional_test.a65 --------------------------

                                load_flag intdis ;during interrupt
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
c4e3 : 88                       dey             ;should not be executed
c4e4 :                  brk_ret0                ;address of break return
c4e4 : 08                       php             ;either SP or Y count will fai
c4e5 : 88                       dey
c4e6 : 88                       dey
c4e7 : 88                       dey
c4e8 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X st
                                trap_ne
c4ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
c4ec : e053                     cpx #'R'+1
                                trap_ne
c4ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
c4f0 : c045                     cpy #'K'-6
                                trap_ne
c4f2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c4f4 : 68                       pla             ;returned flags OK (unchanged)
                                cmp_flag 0
c4f5 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                        
                                trap_ne
c4f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c4f9 : ba                       tsx             ;sp?
c4fa : e0ff                     cpx #$ff
                                trap_ne
c4fc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if a
c4fe : a9ff            >            lda #$ff                ;allow test to cha
                        
c500 : 48                       pha
c501 : a9bd                     lda #$ff-'B'
c503 : a2ad                     ldx #$ff-'R'
c505 : a0b4                     ldy #$ff-'K'
c507 : 28                       plp             ;N=1, V=1, Z=1, C=1
c508 : 00                       brk
                            else
                                lda #hi brk_ret1 ;emulated break
                                pha
                                lda #lo brk_ret1
                                pha
                                load_flag $ff
                                pha             ;set break & unused on stack
                                pha             ;actual flags
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                jmp irq_trap
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------- 6502_functional_test.a65 --------------------------

                            endif
c509 : 88                       dey             ;should not be executed
c50a :                  brk_ret1                ;address of break return
c50a : 08                       php             ;either SP or Y count will fai
c50b : 88                       dey
c50c : 88                       dey
c50d : 88                       dey
c50e : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X st
                                trap_ne
c510 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c512 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
c514 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c516 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
c518 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c51a : 68                       pla             ;returned flags OK (unchanged)
                                cmp_flag $ff
c51b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                        
                                trap_ne
c51d : d0fe            >        bne *           ;failed not equal (non zero)
                        
c51f : ba                       tsx             ;sp?
c520 : e0ff                     cpx #$ff
                                trap_ne
c522 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
c524 : ad0002          >            lda test_case   ;previous test
c527 : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c529 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
c52b : a90c            >            lda #test_num   ;*** next tests' number
c52d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
c530 : a9ff            >            lda #$ff             ;allow test to change
                       >
c532 : 48              >            pha         ;use stack to load status
c533 : 28              >            plp
                        
c534 : 18                       clc
                                tst_stat $ff-carry
c535 : 08              >            php         ;save status
c536 : 68              >            pla         ;use stack to retrieve status
c537 : 48              >            pha
                       >            cmp_flag $ff-carry
c538 : c9fe            >            cmp #($ff-carry|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c53a : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------- 6502_functional_test.a65 --------------------------

                       >
c53c : 28              >            plp         ;restore status
                        
c53d : 38                       sec
                                tst_stat $ff
c53e : 08              >            php         ;save status
c53f : 68              >            pla         ;use stack to retrieve status
c540 : 48              >            pha
                       >            cmp_flag $ff
c541 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c543 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c545 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
c546 : 58                       cli
                                tst_stat $ff-intdis
c547 : 08              >            php         ;save status
c548 : 68              >            pla         ;use stack to retrieve status
c549 : 48              >            pha
                       >            cmp_flag $ff-intdis
c54a : c9fb            >            cmp #($ff-intdis|fao)&m8    ;expected flag
                       >
                       >            trap_ne
c54c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c54e : 28              >            plp         ;restore status
                        
c54f : 78                       sei
                                tst_stat $ff
c550 : 08              >            php         ;save status
c551 : 68              >            pla         ;use stack to retrieve status
c552 : 48              >            pha
                       >            cmp_flag $ff
c553 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c555 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c557 : 28              >            plp         ;restore status
                        
                            endif
c558 : d8                       cld
                                tst_stat $ff-decmode
c559 : 08              >            php         ;save status
c55a : 68              >            pla         ;use stack to retrieve status
c55b : 48              >            pha
                       >            cmp_flag $ff-decmode
c55c : c9f7            >            cmp #($ff-decmode|fao)&m8    ;expected fla
                       >
                       >            trap_ne
c55e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c560 : 28              >            plp         ;restore status
                        
c561 : f8                       sed
                                tst_stat $ff
c562 : 08              >            php         ;save status
c563 : 68              >            pla         ;use stack to retrieve status
c564 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------- 6502_functional_test.a65 --------------------------

                       >            cmp_flag $ff
c565 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
c567 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c569 : 28              >            plp         ;restore status
                        
c56a : b8                       clv
                                tst_stat $ff-overfl
c56b : 08              >            php         ;save status
c56c : 68              >            pla         ;use stack to retrieve status
c56d : 48              >            pha
                       >            cmp_flag $ff-overfl
c56e : c9bf            >            cmp #($ff-overfl|fao)&m8    ;expected flag
                       >
                       >            trap_ne
c570 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c572 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
c573 : a900            >            lda #0             ;allow test to change I
                       >
c575 : 48              >            pha         ;use stack to load status
c576 : 28              >            plp
                        
                                tst_stat 0
c577 : 08              >            php         ;save status
c578 : 68              >            pla         ;use stack to retrieve status
c579 : 48              >            pha
                       >            cmp_flag 0
c57a : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c57c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c57e : 28              >            plp         ;restore status
                        
c57f : 38                       sec
                                tst_stat carry
c580 : 08              >            php         ;save status
c581 : 68              >            pla         ;use stack to retrieve status
c582 : 48              >            pha
                       >            cmp_flag carry
c583 : c931            >            cmp #(carry|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c585 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c587 : 28              >            plp         ;restore status
                        
c588 : 18                       clc
                                tst_stat 0
c589 : 08              >            php         ;save status
c58a : 68              >            pla         ;use stack to retrieve status
c58b : 48              >            pha
                       >            cmp_flag 0
c58c : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------- 6502_functional_test.a65 --------------------------

c58e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c590 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
c591 : 78                       sei
                                tst_stat intdis
c592 : 08              >            php         ;save status
c593 : 68              >            pla         ;use stack to retrieve status
c594 : 48              >            pha
                       >            cmp_flag intdis
c595 : c934            >            cmp #(intdis|fao)&m8    ;expected flags + 
                       >
                       >            trap_ne
c597 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c599 : 28              >            plp         ;restore status
                        
c59a : 58                       cli
                                tst_stat 0
c59b : 08              >            php         ;save status
c59c : 68              >            pla         ;use stack to retrieve status
c59d : 48              >            pha
                       >            cmp_flag 0
c59e : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c5a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5a2 : 28              >            plp         ;restore status
                        
                            endif
c5a3 : f8                       sed
                                tst_stat decmode
c5a4 : 08              >            php         ;save status
c5a5 : 68              >            pla         ;use stack to retrieve status
c5a6 : 48              >            pha
                       >            cmp_flag decmode
c5a7 : c938            >            cmp #(decmode|fao)&m8    ;expected flags +
                       >
                       >            trap_ne
c5a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5ab : 28              >            plp         ;restore status
                        
c5ac : d8                       cld
                                tst_stat 0
c5ad : 08              >            php         ;save status
c5ae : 68              >            pla         ;use stack to retrieve status
c5af : 48              >            pha
                       >            cmp_flag 0
c5b0 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c5b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5b4 : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
c5b5 : a940            >            lda #overfl             ;allow test to cha
                       >
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------- 6502_functional_test.a65 --------------------------

c5b7 : 48              >            pha         ;use stack to load status
c5b8 : 28              >            plp
                        
                                tst_stat overfl
c5b9 : 08              >            php         ;save status
c5ba : 68              >            pla         ;use stack to retrieve status
c5bb : 48              >            pha
                       >            cmp_flag overfl
c5bc : c970            >            cmp #(overfl|fao)&m8    ;expected flags + 
                       >
                       >            trap_ne
c5be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5c0 : 28              >            plp         ;restore status
                        
c5c1 : b8                       clv
                                tst_stat 0
c5c2 : 08              >            php         ;save status
c5c3 : 68              >            pla         ;use stack to retrieve status
c5c4 : 48              >            pha
                       >            cmp_flag 0
c5c5 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c5c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5c9 : 28              >            plp         ;restore status
                        
                                next_test
c5ca : ad0002          >            lda test_case   ;previous test
c5cd : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c5cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
c5d1 : a90d            >            lda #test_num   ;*** next tests' number
c5d3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        ; testing index register increment/decrement and trans
                        ; INX INY DEX DEY TAX TXA TAY TYA
c5d6 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
c5d8 : a9ff            >            lda #$ff             ;allow test to change
                       >
c5da : 48              >            pha         ;use stack to load status
c5db : 28              >            plp
                        
c5dc : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
c5dd : 08              >            php         ;save flags
c5de : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c5e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5e2 : 68              >            pla         ;load status
c5e3 : 48              >            pha
                       >            cmp_flag $ff-zero
c5e4 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------- 6502_functional_test.a65 --------------------------

c5e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5e8 : 28              >            plp         ;restore status
                        
c5e9 : e8                       inx             ;00
                                tst_x 0,$ff-minus
c5ea : 08              >            php         ;save flags
c5eb : e000            >            cpx #0     ;test result
                       >            trap_ne
c5ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5ef : 68              >            pla         ;load status
c5f0 : 48              >            pha
                       >            cmp_flag $ff-minus
c5f1 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c5f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5f5 : 28              >            plp         ;restore status
                        
c5f6 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
c5f7 : 08              >            php         ;save flags
c5f8 : e001            >            cpx #1     ;test result
                       >            trap_ne
c5fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c5fc : 68              >            pla         ;load status
c5fd : 48              >            pha
                       >            cmp_flag $ff-minus-zero
c5fe : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
c600 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c602 : 28              >            plp         ;restore status
                        
c603 : ca                       dex             ;00
                                tst_x 0,$ff-minus
c604 : 08              >            php         ;save flags
c605 : e000            >            cpx #0     ;test result
                       >            trap_ne
c607 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c609 : 68              >            pla         ;load status
c60a : 48              >            pha
                       >            cmp_flag $ff-minus
c60b : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c60d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c60f : 28              >            plp         ;restore status
                        
c610 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
c611 : 08              >            php         ;save flags
c612 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c614 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------- 6502_functional_test.a65 --------------------------

c616 : 68              >            pla         ;load status
c617 : 48              >            pha
                       >            cmp_flag $ff-zero
c618 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c61a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c61c : 28              >            plp         ;restore status
                        
c61d : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
c61e : a900            >            lda #0             ;allow test to change I
                       >
c620 : 48              >            pha         ;use stack to load status
c621 : 28              >            plp
                        
c622 : e8                       inx             ;ff
                                tst_x $ff,minus
c623 : 08              >            php         ;save flags
c624 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c626 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c628 : 68              >            pla         ;load status
c629 : 48              >            pha
                       >            cmp_flag minus
c62a : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c62c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c62e : 28              >            plp         ;restore status
                        
c62f : e8                       inx             ;00
                                tst_x 0,zero
c630 : 08              >            php         ;save flags
c631 : e000            >            cpx #0     ;test result
                       >            trap_ne
c633 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c635 : 68              >            pla         ;load status
c636 : 48              >            pha
                       >            cmp_flag zero
c637 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c639 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c63b : 28              >            plp         ;restore status
                        
c63c : e8                       inx             ;01
                                tst_x 1,0
c63d : 08              >            php         ;save flags
c63e : e001            >            cpx #1     ;test result
                       >            trap_ne
c640 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c642 : 68              >            pla         ;load status
c643 : 48              >            pha
                       >            cmp_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------- 6502_functional_test.a65 --------------------------

c644 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c646 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c648 : 28              >            plp         ;restore status
                        
c649 : ca                       dex             ;00
                                tst_x 0,zero
c64a : 08              >            php         ;save flags
c64b : e000            >            cpx #0     ;test result
                       >            trap_ne
c64d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c64f : 68              >            pla         ;load status
c650 : 48              >            pha
                       >            cmp_flag zero
c651 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c653 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c655 : 28              >            plp         ;restore status
                        
c656 : ca                       dex             ;ff
                                tst_x $ff,minus
c657 : 08              >            php         ;save flags
c658 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c65a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c65c : 68              >            pla         ;load status
c65d : 48              >            pha
                       >            cmp_flag minus
c65e : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c660 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c662 : 28              >            plp         ;restore status
                        
                        
c663 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
c665 : a9ff            >            lda #$ff             ;allow test to change
                       >
c667 : 48              >            pha         ;use stack to load status
c668 : 28              >            plp
                        
c669 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
c66a : 08              >            php         ;save flags
c66b : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c66d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c66f : 68              >            pla         ;load status
c670 : 48              >            pha
                       >            cmp_flag $ff-zero
c671 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
c673 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c675 : 28              >            plp         ;restore status
                        
c676 : c8                       iny             ;00
                                tst_y 0,$ff-minus
c677 : 08              >            php         ;save flags
c678 : c000            >            cpy #0     ;test result
                       >            trap_ne
c67a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c67c : 68              >            pla         ;load status
c67d : 48              >            pha
                       >            cmp_flag $ff-minus
c67e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c680 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c682 : 28              >            plp         ;restore status
                        
c683 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
c684 : 08              >            php         ;save flags
c685 : c001            >            cpy #1     ;test result
                       >            trap_ne
c687 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c689 : 68              >            pla         ;load status
c68a : 48              >            pha
                       >            cmp_flag $ff-minus-zero
c68b : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
c68d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c68f : 28              >            plp         ;restore status
                        
c690 : 88                       dey             ;00
                                tst_y 0,$ff-minus
c691 : 08              >            php         ;save flags
c692 : c000            >            cpy #0     ;test result
                       >            trap_ne
c694 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c696 : 68              >            pla         ;load status
c697 : 48              >            pha
                       >            cmp_flag $ff-minus
c698 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c69a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c69c : 28              >            plp         ;restore status
                        
c69d : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
c69e : 08              >            php         ;save flags
c69f : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c6a1 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------- 6502_functional_test.a65 --------------------------

                       >
c6a3 : 68              >            pla         ;load status
c6a4 : 48              >            pha
                       >            cmp_flag $ff-zero
c6a5 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c6a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6a9 : 28              >            plp         ;restore status
                        
c6aa : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
c6ab : a900            >            lda #0             ;allow test to change I
                       >
c6ad : 48              >            pha         ;use stack to load status
c6ae : 28              >            plp
                        
c6af : c8                       iny             ;ff
                                tst_y $ff,0+minus
c6b0 : 08              >            php         ;save flags
c6b1 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c6b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6b5 : 68              >            pla         ;load status
c6b6 : 48              >            pha
                       >            cmp_flag 0+minus
c6b7 : c9b0            >            cmp #(0+minus|fao)&m8    ;expected flags +
                       >
                       >            trap_ne
c6b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6bb : 28              >            plp         ;restore status
                        
c6bc : c8                       iny             ;00
                                tst_y 0,zero
c6bd : 08              >            php         ;save flags
c6be : c000            >            cpy #0     ;test result
                       >            trap_ne
c6c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6c2 : 68              >            pla         ;load status
c6c3 : 48              >            pha
                       >            cmp_flag zero
c6c4 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c6c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6c8 : 28              >            plp         ;restore status
                        
c6c9 : c8                       iny             ;01
                                tst_y 1,0
c6ca : 08              >            php         ;save flags
c6cb : c001            >            cpy #1     ;test result
                       >            trap_ne
c6cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6cf : 68              >            pla         ;load status
c6d0 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------- 6502_functional_test.a65 --------------------------

                       >            cmp_flag 0
c6d1 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c6d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6d5 : 28              >            plp         ;restore status
                        
c6d6 : 88                       dey             ;00
                                tst_y 0,zero
c6d7 : 08              >            php         ;save flags
c6d8 : c000            >            cpy #0     ;test result
                       >            trap_ne
c6da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6dc : 68              >            pla         ;load status
c6dd : 48              >            pha
                       >            cmp_flag zero
c6de : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c6e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6e2 : 28              >            plp         ;restore status
                        
c6e3 : 88                       dey             ;ff
                                tst_y $ff,minus
c6e4 : 08              >            php         ;save flags
c6e5 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c6e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6e9 : 68              >            pla         ;load status
c6ea : 48              >            pha
                       >            cmp_flag minus
c6eb : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c6ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6ef : 28              >            plp         ;restore status
                        
                        
c6f0 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
c6f2 : a9ff            >            lda #$ff             ;allow test to change
                       >
c6f4 : 48              >            pha         ;use stack to load status
c6f5 : 28              >            plp
                        
c6f6 : 8a                       txa
                                tst_a $ff,$ff-zero
c6f7 : 08              >            php         ;save flags
c6f8 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c6fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c6fc : 68              >            pla         ;load status
c6fd : 48              >            pha
                       >            cmp_flag $ff-zero
c6fe : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------- 6502_functional_test.a65 --------------------------

                       >
                       >            trap_ne
c700 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c702 : 28              >            plp         ;restore status
                        
c703 : 08                       php
c704 : e8                       inx             ;00
c705 : 28                       plp
c706 : 8a                       txa
                                tst_a 0,$ff-minus
c707 : 08              >            php         ;save flags
c708 : c900            >            cmp #0     ;test result
                       >            trap_ne
c70a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c70c : 68              >            pla         ;load status
c70d : 48              >            pha
                       >            cmp_flag $ff-minus
c70e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c710 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c712 : 28              >            plp         ;restore status
                        
c713 : 08                       php
c714 : e8                       inx             ;01
c715 : 28                       plp
c716 : 8a                       txa
                                tst_a 1,$ff-minus-zero
c717 : 08              >            php         ;save flags
c718 : c901            >            cmp #1     ;test result
                       >            trap_ne
c71a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c71c : 68              >            pla         ;load status
c71d : 48              >            pha
                       >            cmp_flag $ff-minus-zero
c71e : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
c720 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c722 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
c723 : a900            >            lda #0             ;allow test to change I
                       >
c725 : 48              >            pha         ;use stack to load status
c726 : 28              >            plp
                        
c727 : 8a                       txa
                                tst_a 1,0
c728 : 08              >            php         ;save flags
c729 : c901            >            cmp #1     ;test result
                       >            trap_ne
c72b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c72d : 68              >            pla         ;load status
c72e : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------- 6502_functional_test.a65 --------------------------

                       >            cmp_flag 0
c72f : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c731 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c733 : 28              >            plp         ;restore status
                        
c734 : 08                       php
c735 : ca                       dex             ;00
c736 : 28                       plp
c737 : 8a                       txa
                                tst_a 0,zero
c738 : 08              >            php         ;save flags
c739 : c900            >            cmp #0     ;test result
                       >            trap_ne
c73b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c73d : 68              >            pla         ;load status
c73e : 48              >            pha
                       >            cmp_flag zero
c73f : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c741 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c743 : 28              >            plp         ;restore status
                        
c744 : 08                       php
c745 : ca                       dex             ;ff
c746 : 28                       plp
c747 : 8a                       txa
                                tst_a $ff,minus
c748 : 08              >            php         ;save flags
c749 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c74b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c74d : 68              >            pla         ;load status
c74e : 48              >            pha
                       >            cmp_flag minus
c74f : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c751 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c753 : 28              >            plp         ;restore status
                        
                        
c754 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
c756 : a9ff            >            lda #$ff             ;allow test to change
                       >
c758 : 48              >            pha         ;use stack to load status
c759 : 28              >            plp
                        
c75a : 98                       tya
                                tst_a $ff,$ff-zero
c75b : 08              >            php         ;save flags
c75c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------- 6502_functional_test.a65 --------------------------

c75e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c760 : 68              >            pla         ;load status
c761 : 48              >            pha
                       >            cmp_flag $ff-zero
c762 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c764 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c766 : 28              >            plp         ;restore status
                        
c767 : 08                       php
c768 : c8                       iny             ;00
c769 : 28                       plp
c76a : 98                       tya
                                tst_a 0,$ff-minus
c76b : 08              >            php         ;save flags
c76c : c900            >            cmp #0     ;test result
                       >            trap_ne
c76e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c770 : 68              >            pla         ;load status
c771 : 48              >            pha
                       >            cmp_flag $ff-minus
c772 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c774 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c776 : 28              >            plp         ;restore status
                        
c777 : 08                       php
c778 : c8                       iny             ;01
c779 : 28                       plp
c77a : 98                       tya
                                tst_a 1,$ff-minus-zero
c77b : 08              >            php         ;save flags
c77c : c901            >            cmp #1     ;test result
                       >            trap_ne
c77e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c780 : 68              >            pla         ;load status
c781 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
c782 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
c784 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c786 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
c787 : a900            >            lda #0             ;allow test to change I
                       >
c789 : 48              >            pha         ;use stack to load status
c78a : 28              >            plp
                        
c78b : 98                       tya
                                tst_a 1,0
c78c : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------- 6502_functional_test.a65 --------------------------

c78d : c901            >            cmp #1     ;test result
                       >            trap_ne
c78f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c791 : 68              >            pla         ;load status
c792 : 48              >            pha
                       >            cmp_flag 0
c793 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c795 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c797 : 28              >            plp         ;restore status
                        
c798 : 08                       php
c799 : 88                       dey             ;00
c79a : 28                       plp
c79b : 98                       tya
                                tst_a 0,zero
c79c : 08              >            php         ;save flags
c79d : c900            >            cmp #0     ;test result
                       >            trap_ne
c79f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7a1 : 68              >            pla         ;load status
c7a2 : 48              >            pha
                       >            cmp_flag zero
c7a3 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c7a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7a7 : 28              >            plp         ;restore status
                        
c7a8 : 08                       php
c7a9 : 88                       dey             ;ff
c7aa : 28                       plp
c7ab : 98                       tya
                                tst_a $ff,minus
c7ac : 08              >            php         ;save flags
c7ad : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
c7af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7b1 : 68              >            pla         ;load status
c7b2 : 48              >            pha
                       >            cmp_flag minus
c7b3 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c7b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7b7 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
c7b8 : a9ff            >            lda #$ff             ;allow test to change
                        
c7ba : 48                       pha
c7bb : a2ff                     ldx #$ff        ;ff
c7bd : 8a                       txa
c7be : 28                       plp
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------- 6502_functional_test.a65 --------------------------

c7bf : a8                       tay
                                tst_y $ff,$ff-zero
c7c0 : 08              >            php         ;save flags
c7c1 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c7c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7c5 : 68              >            pla         ;load status
c7c6 : 48              >            pha
                       >            cmp_flag $ff-zero
c7c7 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c7c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7cb : 28              >            plp         ;restore status
                        
c7cc : 08                       php
c7cd : e8                       inx             ;00
c7ce : 8a                       txa
c7cf : 28                       plp
c7d0 : a8                       tay
                                tst_y 0,$ff-minus
c7d1 : 08              >            php         ;save flags
c7d2 : c000            >            cpy #0     ;test result
                       >            trap_ne
c7d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7d6 : 68              >            pla         ;load status
c7d7 : 48              >            pha
                       >            cmp_flag $ff-minus
c7d8 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c7da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7dc : 28              >            plp         ;restore status
                        
c7dd : 08                       php
c7de : e8                       inx             ;01
c7df : 8a                       txa
c7e0 : 28                       plp
c7e1 : a8                       tay
                                tst_y 1,$ff-minus-zero
c7e2 : 08              >            php         ;save flags
c7e3 : c001            >            cpy #1     ;test result
                       >            trap_ne
c7e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7e7 : 68              >            pla         ;load status
c7e8 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
c7e9 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
c7eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7ed : 28              >            plp         ;restore status
                        
                                load_flag 0
c7ee : a900            >            lda #0             ;allow test to change I
                        
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------- 6502_functional_test.a65 --------------------------

c7f0 : 48                       pha
c7f1 : a900                     lda #0
c7f3 : 8a                       txa
c7f4 : 28                       plp
c7f5 : a8                       tay
                                tst_y 1,0
c7f6 : 08              >            php         ;save flags
c7f7 : c001            >            cpy #1     ;test result
                       >            trap_ne
c7f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c7fb : 68              >            pla         ;load status
c7fc : 48              >            pha
                       >            cmp_flag 0
c7fd : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c7ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c801 : 28              >            plp         ;restore status
                        
c802 : 08                       php
c803 : ca                       dex             ;00
c804 : 8a                       txa
c805 : 28                       plp
c806 : a8                       tay
                                tst_y 0,zero
c807 : 08              >            php         ;save flags
c808 : c000            >            cpy #0     ;test result
                       >            trap_ne
c80a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c80c : 68              >            pla         ;load status
c80d : 48              >            pha
                       >            cmp_flag zero
c80e : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c810 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c812 : 28              >            plp         ;restore status
                        
c813 : 08                       php
c814 : ca                       dex             ;ff
c815 : 8a                       txa
c816 : 28                       plp
c817 : a8                       tay
                                tst_y $ff,minus
c818 : 08              >            php         ;save flags
c819 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
c81b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c81d : 68              >            pla         ;load status
c81e : 48              >            pha
                       >            cmp_flag minus
c81f : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c821 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c823 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------- 6502_functional_test.a65 --------------------------

                        
                        
                        
                                load_flag $ff
c824 : a9ff            >            lda #$ff             ;allow test to change
                        
c826 : 48                       pha
c827 : a0ff                     ldy #$ff        ;ff
c829 : 98                       tya
c82a : 28                       plp
c82b : aa                       tax
                                tst_x $ff,$ff-zero
c82c : 08              >            php         ;save flags
c82d : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c82f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c831 : 68              >            pla         ;load status
c832 : 48              >            pha
                       >            cmp_flag $ff-zero
c833 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                       >
                       >            trap_ne
c835 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c837 : 28              >            plp         ;restore status
                        
c838 : 08                       php
c839 : c8                       iny             ;00
c83a : 98                       tya
c83b : 28                       plp
c83c : aa                       tax
                                tst_x 0,$ff-minus
c83d : 08              >            php         ;save flags
c83e : e000            >            cpx #0     ;test result
                       >            trap_ne
c840 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c842 : 68              >            pla         ;load status
c843 : 48              >            pha
                       >            cmp_flag $ff-minus
c844 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                       >
                       >            trap_ne
c846 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c848 : 28              >            plp         ;restore status
                        
c849 : 08                       php
c84a : c8                       iny             ;01
c84b : 98                       tya
c84c : 28                       plp
c84d : aa                       tax
                                tst_x 1,$ff-minus-zero
c84e : 08              >            php         ;save flags
c84f : e001            >            cpx #1     ;test result
                       >            trap_ne
c851 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c853 : 68              >            pla         ;load status
c854 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------- 6502_functional_test.a65 --------------------------

c855 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                       >
                       >            trap_ne
c857 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c859 : 28              >            plp         ;restore status
                        
                                load_flag 0
c85a : a900            >            lda #0             ;allow test to change I
                        
c85c : 48                       pha
c85d : a900                     lda #0          ;preset status
c85f : 98                       tya
c860 : 28                       plp
c861 : aa                       tax
                                tst_x 1,0
c862 : 08              >            php         ;save flags
c863 : e001            >            cpx #1     ;test result
                       >            trap_ne
c865 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c867 : 68              >            pla         ;load status
c868 : 48              >            pha
                       >            cmp_flag 0
c869 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                       >
                       >            trap_ne
c86b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c86d : 28              >            plp         ;restore status
                        
c86e : 08                       php
c86f : 88                       dey             ;00
c870 : 98                       tya
c871 : 28                       plp
c872 : aa                       tax
                                tst_x 0,zero
c873 : 08              >            php         ;save flags
c874 : e000            >            cpx #0     ;test result
                       >            trap_ne
c876 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c878 : 68              >            pla         ;load status
c879 : 48              >            pha
                       >            cmp_flag zero
c87a : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
c87c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c87e : 28              >            plp         ;restore status
                        
c87f : 08                       php
c880 : 88                       dey             ;ff
c881 : 98                       tya
c882 : 28                       plp
c883 : aa                       tax
                                tst_x $ff,minus
c884 : 08              >            php         ;save flags
c885 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
c887 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------- 6502_functional_test.a65 --------------------------

                       >
c889 : 68              >            pla         ;load status
c88a : 48              >            pha
                       >            cmp_flag minus
c88b : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                       >
                       >            trap_ne
c88d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
c88f : 28              >            plp         ;restore status
                        
                                next_test
c890 : ad0002          >            lda test_case   ;previous test
c893 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c895 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
c897 : a90e            >            lda #test_num   ;*** next tests' number
c899 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap aroun
c89c : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
c89e : a9ff            >            lda #$ff             ;allow test to change
                       >
c8a0 : 48              >            pha         ;use stack to load status
c8a1 : 28              >            plp
                        
c8a2 : 9a                       txs
c8a3 : 08                       php
c8a4 : ad0101                   lda $101
                                cmp_flag $ff
c8a7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                        
                                trap_ne
c8a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
c8ab : a900            >            lda #0             ;allow test to change I
                       >
c8ad : 48              >            pha         ;use stack to load status
c8ae : 28              >            plp
                        
c8af : 9a                       txs
c8b0 : 08                       php
c8b1 : ad0101                   lda $101
                                cmp_flag 0
c8b4 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                        
                                trap_ne
c8b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c8b8 : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
c8b9 : a9ff            >            lda #$ff             ;allow test to change
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------- 6502_functional_test.a65 --------------------------

                       >
c8bb : 48              >            pha         ;use stack to load status
c8bc : 28              >            plp
                        
c8bd : 9a                       txs
c8be : 08                       php
c8bf : ad0001                   lda $100
                                cmp_flag $ff
c8c2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                        
                                trap_ne
c8c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
c8c6 : a900            >            lda #0             ;allow test to change I
                       >
c8c8 : 48              >            pha         ;use stack to load status
c8c9 : 28              >            plp
                        
c8ca : 9a                       txs
c8cb : 08                       php
c8cc : ad0001                   lda $100
                                cmp_flag 0
c8cf : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                        
                                trap_ne
c8d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c8d3 : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
c8d4 : a9ff            >            lda #$ff             ;allow test to change
                       >
c8d6 : 48              >            pha         ;use stack to load status
c8d7 : 28              >            plp
                        
c8d8 : 9a                       txs
c8d9 : 08                       php
c8da : adff01                   lda $1ff
                                cmp_flag $ff
c8dd : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + alw
                        
                                trap_ne
c8df : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
c8e1 : a900            >            lda #0             ;allow test to change I
                       >
c8e3 : 48              >            pha         ;use stack to load status
c8e4 : 28              >            plp
                        
c8e5 : 9a                       txs
c8e6 : 08                       php
c8e7 : adff01                   lda $1ff
                                cmp_flag 0
c8ea : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                        
                        
c8ec : a201                     ldx #1
c8ee : 9a                       txs             ;sp=01
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------- 6502_functional_test.a65 --------------------------

                                set_stat $ff
                       >            load_flag $ff
c8ef : a9ff            >            lda #$ff             ;allow test to change
                       >
c8f1 : 48              >            pha         ;use stack to load status
c8f2 : 28              >            plp
                        
c8f3 : ba                       tsx             ;clears Z, N
c8f4 : 08                       php             ;sp=00
c8f5 : e001                     cpx #1
                                trap_ne
c8f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c8f9 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
c8fc : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected 
                        
                                trap_ne
c8fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
c900 : a9ff            >            lda #$ff             ;allow test to change
                       >
c902 : 48              >            pha         ;use stack to load status
c903 : 28              >            plp
                        
c904 : ba                       tsx             ;clears N, sets Z
c905 : 08                       php             ;sp=ff
c906 : e000                     cpx #0
                                trap_ne
c908 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c90a : ad0001                   lda $100
                                cmp_flag $ff-minus
c90d : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags
                        
                                trap_ne
c90f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
c911 : a9ff            >            lda #$ff             ;allow test to change
                       >
c913 : 48              >            pha         ;use stack to load status
c914 : 28              >            plp
                        
c915 : ba                       tsx             ;clears N, sets Z
c916 : 08                       php             ;sp=fe
c917 : e0ff                     cpx #$ff
                                trap_ne
c919 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c91b : adff01                   lda $1ff
                                cmp_flag $ff-zero
c91e : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags 
                        
                                trap_ne
c920 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
c922 : a201                     ldx #1
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------- 6502_functional_test.a65 --------------------------

c924 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
c925 : a900            >            lda #0             ;allow test to change I
                       >
c927 : 48              >            pha         ;use stack to load status
c928 : 28              >            plp
                        
c929 : ba                       tsx             ;clears Z, N
c92a : 08                       php             ;sp=00
c92b : e001                     cpx #1
                                trap_ne
c92d : d0fe            >        bne *           ;failed not equal (non zero)
                        
c92f : ad0101                   lda $101
                                cmp_flag 0
c932 : c930            >            cmp #(0|fao)&m8    ;expected flags + alway
                        
                                trap_ne
c934 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
c936 : a900            >            lda #0             ;allow test to change I
                       >
c938 : 48              >            pha         ;use stack to load status
c939 : 28              >            plp
                        
c93a : ba                       tsx             ;clears N, sets Z
c93b : 08                       php             ;sp=ff
c93c : e000                     cpx #0
                                trap_ne
c93e : d0fe            >        bne *           ;failed not equal (non zero)
                        
c940 : ad0001                   lda $100
                                cmp_flag zero
c943 : c932            >            cmp #(zero|fao)&m8    ;expected flags + al
                        
                                trap_ne
c945 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
c947 : a900            >            lda #0             ;allow test to change I
                       >
c949 : 48              >            pha         ;use stack to load status
c94a : 28              >            plp
                        
c94b : ba                       tsx             ;clears N, sets Z
c94c : 08                       php             ;sp=fe
c94d : e0ff                     cpx #$ff
                                trap_ne
c94f : d0fe            >        bne *           ;failed not equal (non zero)
                        
c951 : adff01                   lda $1ff
                                cmp_flag minus
c954 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + a
                        
                                trap_ne
c956 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c958 : 68                       pla             ;sp=ff
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------- 6502_functional_test.a65 --------------------------

                                next_test
c959 : ad0002          >            lda test_case   ;previous test
c95c : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
c95e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
c960 : a90f            >            lda #test_num   ;*** next tests' number
c962 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing index register load & store LDY LDX STY STX 
                        ; LDX / STX - zp,y / abs,y
c965 : a003                     ldy #3
c967 :                  tldx
                                set_stat 0
                       >            load_flag 0
c967 : a900            >            lda #0             ;allow test to change I
                       >
c969 : 48              >            pha         ;use stack to load status
c96a : 28              >            plp
                        
c96b : b615                     ldx zp1,y
c96d : 08                       php         ;test stores do not alter flags
c96e : 8a                       txa
c96f : 49c3                     eor #$c3
c971 : 28                       plp
c972 : 990302                   sta abst,y
c975 : 08                       php         ;flags after load/store sequence
c976 : 49c3                     eor #$c3
c978 : d91802                   cmp abs1,y  ;test result
                                trap_ne
c97b : d0fe            >        bne *           ;failed not equal (non zero)
                        
c97d : 68                       pla         ;load status
                                eor_flag 0
c97e : 4930            >            eor #0|fao         ;invert expected flags 
                        
c980 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
c983 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c985 : 88                       dey
c986 : 10df                     bpl tldx
                        
c988 : a003                     ldy #3
c98a :                  tldx1
                                set_stat $ff
                       >            load_flag $ff
c98a : a9ff            >            lda #$ff             ;allow test to change
                       >
c98c : 48              >            pha         ;use stack to load status
c98d : 28              >            plp
                        
c98e : b615                     ldx zp1,y
c990 : 08                       php         ;test stores do not alter flags
c991 : 8a                       txa
c992 : 49c3                     eor #$c3
c994 : 28                       plp
c995 : 990302                   sta abst,y
c998 : 08                       php         ;flags after load/store sequence
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------- 6502_functional_test.a65 --------------------------

c999 : 49c3                     eor #$c3
c99b : d91802                   cmp abs1,y  ;test result
                                trap_ne
c99e : d0fe            >        bne *           ;failed not equal (non zero)
                        
c9a0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
c9a1 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
c9a3 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
c9a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c9a8 : 88                       dey
c9a9 : 10df                     bpl tldx1
                        
c9ab : a003                     ldy #3
c9ad :                  tldx2
                                set_stat 0
                       >            load_flag 0
c9ad : a900            >            lda #0             ;allow test to change I
                       >
c9af : 48              >            pha         ;use stack to load status
c9b0 : 28              >            plp
                        
c9b1 : be1802                   ldx abs1,y
c9b4 : 08                       php         ;test stores do not alter flags
c9b5 : 8a                       txa
c9b6 : 49c3                     eor #$c3
c9b8 : aa                       tax
c9b9 : 28                       plp
c9ba : 960c                     stx zpt,y
c9bc : 08                       php         ;flags after load/store sequence
c9bd : 49c3                     eor #$c3
c9bf : d91500                   cmp zp1,y   ;test result
                                trap_ne
c9c2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c9c4 : 68                       pla         ;load status
                                eor_flag 0
c9c5 : 4930            >            eor #0|fao         ;invert expected flags 
                        
c9c7 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
c9ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
c9cc : 88                       dey
c9cd : 10de                     bpl tldx2
                        
c9cf : a003                     ldy #3
c9d1 :                  tldx3
                                set_stat $ff
                       >            load_flag $ff
c9d1 : a9ff            >            lda #$ff             ;allow test to change
                       >
c9d3 : 48              >            pha         ;use stack to load status
c9d4 : 28              >            plp
                        
c9d5 : be1802                   ldx abs1,y
c9d8 : 08                       php         ;test stores do not alter flags
c9d9 : 8a                       txa
c9da : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------- 6502_functional_test.a65 --------------------------

c9dc : aa                       tax
c9dd : 28                       plp
c9de : 960c                     stx zpt,y
c9e0 : 08                       php         ;flags after load/store sequence
c9e1 : 49c3                     eor #$c3
c9e3 : d91500                   cmp zp1,y   ;test result
                                trap_ne
c9e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
c9e8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
c9e9 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
c9eb : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
c9ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
c9f0 : 88                       dey
c9f1 : 10de                     bpl tldx3
                        
c9f3 : a003                     ldy #3      ;testing store result
c9f5 : a200                     ldx #0
c9f7 : b90c00           tstx    lda zpt,y
c9fa : 49c3                     eor #$c3
c9fc : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
c9ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca01 : 960c                     stx zpt,y   ;clear
ca03 : b90302                   lda abst,y
ca06 : 49c3                     eor #$c3
ca08 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
ca0b : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca0d : 8a                       txa
ca0e : 990302                   sta abst,y  ;clear
ca11 : 88                       dey
ca12 : 10e3                     bpl tstx
                                next_test
ca14 : ad0002          >            lda test_case   ;previous test
ca17 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ca19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
ca1b : a910            >            lda #test_num   ;*** next tests' number
ca1d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; indexed wraparound test (only zp should wrap)
ca20 : a0fd                     ldy #3+$fa
ca22 : b61b             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
ca24 : 8a                       txa
ca25 : 990901                   sta abst-$fa,y      ;no STX abs,y!
ca28 : 88                       dey
ca29 : c0fa                     cpy #$fa
ca2b : b0f5                     bcs tldx4
ca2d : a0fd                     ldy #3+$fa
ca2f : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
ca32 : 9612                     stx zpt-$fa&$ff,y
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------- 6502_functional_test.a65 --------------------------

ca34 : 88                       dey
ca35 : c0fa                     cpy #$fa
ca37 : b0f6                     bcs tldx5
ca39 : a003                     ldy #3      ;testing wraparound result
ca3b : a200                     ldx #0
ca3d : b90c00           tstx1   lda zpt,y
ca40 : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
ca43 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca45 : 960c                     stx zpt,y   ;clear
ca47 : b90302                   lda abst,y
ca4a : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
ca4d : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca4f : 8a                       txa
ca50 : 990302                   sta abst,y  ;clear
ca53 : 88                       dey
ca54 : 10e7                     bpl tstx1
                                next_test
ca56 : ad0002          >            lda test_case   ;previous test
ca59 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ca5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
ca5d : a911            >            lda #test_num   ;*** next tests' number
ca5f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; LDY / STY - zp,x / abs,x
ca62 : a203                     ldx #3
ca64 :                  tldy
                                set_stat 0
                       >            load_flag 0
ca64 : a900            >            lda #0             ;allow test to change I
                       >
ca66 : 48              >            pha         ;use stack to load status
ca67 : 28              >            plp
                        
ca68 : b415                     ldy zp1,x
ca6a : 08                       php         ;test stores do not alter flags
ca6b : 98                       tya
ca6c : 49c3                     eor #$c3
ca6e : 28                       plp
ca6f : 9d0302                   sta abst,x
ca72 : 08                       php         ;flags after load/store sequence
ca73 : 49c3                     eor #$c3
ca75 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
ca78 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca7a : 68                       pla         ;load status
                                eor_flag 0
ca7b : 4930            >            eor #0|fao         ;invert expected flags 
                        
ca7d : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
ca80 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------- 6502_functional_test.a65 --------------------------

ca82 : ca                       dex
ca83 : 10df                     bpl tldy
                        
ca85 : a203                     ldx #3
ca87 :                  tldy1
                                set_stat $ff
                       >            load_flag $ff
ca87 : a9ff            >            lda #$ff             ;allow test to change
                       >
ca89 : 48              >            pha         ;use stack to load status
ca8a : 28              >            plp
                        
ca8b : b415                     ldy zp1,x
ca8d : 08                       php         ;test stores do not alter flags
ca8e : 98                       tya
ca8f : 49c3                     eor #$c3
ca91 : 28                       plp
ca92 : 9d0302                   sta abst,x
ca95 : 08                       php         ;flags after load/store sequence
ca96 : 49c3                     eor #$c3
ca98 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
ca9b : d0fe            >        bne *           ;failed not equal (non zero)
                        
ca9d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
ca9e : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
caa0 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
caa3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
caa5 : ca                       dex
caa6 : 10df                     bpl tldy1
                        
caa8 : a203                     ldx #3
caaa :                  tldy2
                                set_stat 0
                       >            load_flag 0
caaa : a900            >            lda #0             ;allow test to change I
                       >
caac : 48              >            pha         ;use stack to load status
caad : 28              >            plp
                        
caae : bc1802                   ldy abs1,x
cab1 : 08                       php         ;test stores do not alter flags
cab2 : 98                       tya
cab3 : 49c3                     eor #$c3
cab5 : a8                       tay
cab6 : 28                       plp
cab7 : 940c                     sty zpt,x
cab9 : 08                       php         ;flags after load/store sequence
caba : 49c3                     eor #$c3
cabc : d515                     cmp zp1,x   ;test result
                                trap_ne
cabe : d0fe            >        bne *           ;failed not equal (non zero)
                        
cac0 : 68                       pla         ;load status
                                eor_flag 0
cac1 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cac3 : dd1d02                   cmp fLDx,x  ;test flags
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne
cac6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cac8 : ca                       dex
cac9 : 10df                     bpl tldy2
                        
cacb : a203                     ldx #3
cacd :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
cacd : a9ff            >            lda #$ff             ;allow test to change
                       >
cacf : 48              >            pha         ;use stack to load status
cad0 : 28              >            plp
                        
cad1 : bc1802                   ldy abs1,x
cad4 : 08                       php         ;test stores do not alter flags
cad5 : 98                       tya
cad6 : 49c3                     eor #$c3
cad8 : a8                       tay
cad9 : 28                       plp
cada : 940c                     sty zpt,x
cadc : 08                       php         ;flags after load/store sequence
cadd : 49c3                     eor #$c3
cadf : d515                     cmp zp1,x   ;test result
                                trap_ne
cae1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cae3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cae4 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cae6 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
cae9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
caeb : ca                       dex
caec : 10df                     bpl tldy3
                        
caee : a203                     ldx #3      ;testing store result
caf0 : a000                     ldy #0
caf2 : b50c             tsty    lda zpt,x
caf4 : 49c3                     eor #$c3
caf6 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
caf8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cafa : 940c                     sty zpt,x   ;clear
cafc : bd0302                   lda abst,x
caff : 49c3                     eor #$c3
cb01 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
cb04 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb06 : 8a                       txa
cb07 : 9d0302                   sta abst,x  ;clear
cb0a : ca                       dex
cb0b : 10e5                     bpl tsty
                                next_test
cb0d : ad0002          >            lda test_case   ;previous test
cb10 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------- 6502_functional_test.a65 --------------------------

cb12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
cb14 : a912            >            lda #test_num   ;*** next tests' number
cb16 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; indexed wraparound test (only zp should wrap)
cb19 : a2fd                     ldx #3+$fa
cb1b : b41b             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
cb1d : 98                       tya
cb1e : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
cb21 : ca                       dex
cb22 : e0fa                     cpx #$fa
cb24 : b0f5                     bcs tldy4
cb26 : a2fd                     ldx #3+$fa
cb28 : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
cb2b : 9412                     sty zpt-$fa&$ff,x
cb2d : ca                       dex
cb2e : e0fa                     cpx #$fa
cb30 : b0f6                     bcs tldy5
cb32 : a203                     ldx #3      ;testing wraparound result
cb34 : a000                     ldy #0
cb36 : b50c             tsty1   lda zpt,x
cb38 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
cb3a : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb3c : 940c                     sty zpt,x   ;clear
cb3e : bd0302                   lda abst,x
cb41 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
cb44 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb46 : 8a                       txa
cb47 : 9d0302                   sta abst,x  ;clear
cb4a : ca                       dex
cb4b : 10e9                     bpl tsty1
                                next_test
cb4d : ad0002          >            lda test_case   ;previous test
cb50 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
cb52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
cb54 : a913            >            lda #test_num   ;*** next tests' number
cb56 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0
                       >            load_flag 0
cb59 : a900            >            lda #0             ;allow test to change I
                       >
cb5b : 48              >            pha         ;use stack to load status
cb5c : 28              >            plp
                        
cb5d : a615                     ldx zp1
cb5f : 08                       php         ;test stores do not alter flags
cb60 : 8a                       txa
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------- 6502_functional_test.a65 --------------------------

cb61 : 49c3                     eor #$c3
cb63 : aa                       tax
cb64 : 28                       plp
cb65 : 8e0302                   stx abst
cb68 : 08                       php         ;flags after load/store sequence
cb69 : 49c3                     eor #$c3
cb6b : aa                       tax
cb6c : e0c3                     cpx #$c3    ;test result
                                trap_ne
cb6e : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb70 : 68                       pla         ;load status
                                eor_flag 0
cb71 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cb73 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cb76 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cb78 : a900            >            lda #0             ;allow test to change I
                       >
cb7a : 48              >            pha         ;use stack to load status
cb7b : 28              >            plp
                        
cb7c : a616                     ldx zp1+1
cb7e : 08                       php         ;test stores do not alter flags
cb7f : 8a                       txa
cb80 : 49c3                     eor #$c3
cb82 : aa                       tax
cb83 : 28                       plp
cb84 : 8e0402                   stx abst+1
cb87 : 08                       php         ;flags after load/store sequence
cb88 : 49c3                     eor #$c3
cb8a : aa                       tax
cb8b : e082                     cpx #$82    ;test result
                                trap_ne
cb8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
cb8f : 68                       pla         ;load status
                                eor_flag 0
cb90 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cb92 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cb95 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cb97 : a900            >            lda #0             ;allow test to change I
                       >
cb99 : 48              >            pha         ;use stack to load status
cb9a : 28              >            plp
                        
cb9b : a617                     ldx zp1+2
cb9d : 08                       php         ;test stores do not alter flags
cb9e : 8a                       txa
cb9f : 49c3                     eor #$c3
cba1 : aa                       tax
cba2 : 28                       plp
cba3 : 8e0502                   stx abst+2
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------- 6502_functional_test.a65 --------------------------

cba6 : 08                       php         ;flags after load/store sequence
cba7 : 49c3                     eor #$c3
cba9 : aa                       tax
cbaa : e041                     cpx #$41    ;test result
                                trap_ne
cbac : d0fe            >        bne *           ;failed not equal (non zero)
                        
cbae : 68                       pla         ;load status
                                eor_flag 0
cbaf : 4930            >            eor #0|fao         ;invert expected flags 
                        
cbb1 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cbb4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cbb6 : a900            >            lda #0             ;allow test to change I
                       >
cbb8 : 48              >            pha         ;use stack to load status
cbb9 : 28              >            plp
                        
cbba : a618                     ldx zp1+3
cbbc : 08                       php         ;test stores do not alter flags
cbbd : 8a                       txa
cbbe : 49c3                     eor #$c3
cbc0 : aa                       tax
cbc1 : 28                       plp
cbc2 : 8e0602                   stx abst+3
cbc5 : 08                       php         ;flags after load/store sequence
cbc6 : 49c3                     eor #$c3
cbc8 : aa                       tax
cbc9 : e000                     cpx #0      ;test result
                                trap_ne
cbcb : d0fe            >        bne *           ;failed not equal (non zero)
                        
cbcd : 68                       pla         ;load status
                                eor_flag 0
cbce : 4930            >            eor #0|fao         ;invert expected flags 
                        
cbd0 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
cbd3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
cbd5 : a9ff            >            lda #$ff             ;allow test to change
                       >
cbd7 : 48              >            pha         ;use stack to load status
cbd8 : 28              >            plp
                        
cbd9 : a615                     ldx zp1
cbdb : 08                       php         ;test stores do not alter flags
cbdc : 8a                       txa
cbdd : 49c3                     eor #$c3
cbdf : aa                       tax
cbe0 : 28                       plp
cbe1 : 8e0302                   stx abst
cbe4 : 08                       php         ;flags after load/store sequence
cbe5 : 49c3                     eor #$c3
cbe7 : aa                       tax
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------- 6502_functional_test.a65 --------------------------

cbe8 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
cbea : d0fe            >        bne *           ;failed not equal (non zero)
                        
cbec : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cbed : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cbef : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cbf2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cbf4 : a9ff            >            lda #$ff             ;allow test to change
                       >
cbf6 : 48              >            pha         ;use stack to load status
cbf7 : 28              >            plp
                        
cbf8 : a616                     ldx zp1+1
cbfa : 08                       php         ;test stores do not alter flags
cbfb : 8a                       txa
cbfc : 49c3                     eor #$c3
cbfe : aa                       tax
cbff : 28                       plp
cc00 : 8e0402                   stx abst+1
cc03 : 08                       php         ;flags after load/store sequence
cc04 : 49c3                     eor #$c3
cc06 : aa                       tax
cc07 : e082                     cpx #$82    ;test result
                                trap_ne
cc09 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cc0b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cc0c : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cc0e : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cc11 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cc13 : a9ff            >            lda #$ff             ;allow test to change
                       >
cc15 : 48              >            pha         ;use stack to load status
cc16 : 28              >            plp
                        
cc17 : a617                     ldx zp1+2
cc19 : 08                       php         ;test stores do not alter flags
cc1a : 8a                       txa
cc1b : 49c3                     eor #$c3
cc1d : aa                       tax
cc1e : 28                       plp
cc1f : 8e0502                   stx abst+2
cc22 : 08                       php         ;flags after load/store sequence
cc23 : 49c3                     eor #$c3
cc25 : aa                       tax
cc26 : e041                     cpx #$41    ;test result
                                trap_ne     ;
cc28 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------- 6502_functional_test.a65 --------------------------

cc2a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cc2b : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cc2d : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cc30 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cc32 : a9ff            >            lda #$ff             ;allow test to change
                       >
cc34 : 48              >            pha         ;use stack to load status
cc35 : 28              >            plp
                        
cc36 : a618                     ldx zp1+3
cc38 : 08                       php         ;test stores do not alter flags
cc39 : 8a                       txa
cc3a : 49c3                     eor #$c3
cc3c : aa                       tax
cc3d : 28                       plp
cc3e : 8e0602                   stx abst+3
cc41 : 08                       php         ;flags after load/store sequence
cc42 : 49c3                     eor #$c3
cc44 : aa                       tax
cc45 : e000                     cpx #0      ;test result
                                trap_ne
cc47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cc49 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cc4a : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cc4c : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
cc4f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
cc51 : a900            >            lda #0             ;allow test to change I
                       >
cc53 : 48              >            pha         ;use stack to load status
cc54 : 28              >            plp
                        
cc55 : ae1802                   ldx abs1
cc58 : 08                       php         ;test stores do not alter flags
cc59 : 8a                       txa
cc5a : 49c3                     eor #$c3
cc5c : aa                       tax
cc5d : 28                       plp
cc5e : 860c                     stx zpt
cc60 : 08                       php         ;flags after load/store sequence
cc61 : 49c3                     eor #$c3
cc63 : c515                     cmp zp1     ;test result
                                trap_ne
cc65 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cc67 : 68                       pla         ;load status
                                eor_flag 0
cc68 : 4930            >            eor #0|fao         ;invert expected flags 
                        
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------- 6502_functional_test.a65 --------------------------

cc6a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cc6d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cc6f : a900            >            lda #0             ;allow test to change I
                       >
cc71 : 48              >            pha         ;use stack to load status
cc72 : 28              >            plp
                        
cc73 : ae1902                   ldx abs1+1
cc76 : 08                       php         ;test stores do not alter flags
cc77 : 8a                       txa
cc78 : 49c3                     eor #$c3
cc7a : aa                       tax
cc7b : 28                       plp
cc7c : 860d                     stx zpt+1
cc7e : 08                       php         ;flags after load/store sequence
cc7f : 49c3                     eor #$c3
cc81 : c516                     cmp zp1+1   ;test result
                                trap_ne
cc83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cc85 : 68                       pla         ;load status
                                eor_flag 0
cc86 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cc88 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cc8b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cc8d : a900            >            lda #0             ;allow test to change I
                       >
cc8f : 48              >            pha         ;use stack to load status
cc90 : 28              >            plp
                        
cc91 : ae1a02                   ldx abs1+2
cc94 : 08                       php         ;test stores do not alter flags
cc95 : 8a                       txa
cc96 : 49c3                     eor #$c3
cc98 : aa                       tax
cc99 : 28                       plp
cc9a : 860e                     stx zpt+2
cc9c : 08                       php         ;flags after load/store sequence
cc9d : 49c3                     eor #$c3
cc9f : c517                     cmp zp1+2   ;test result
                                trap_ne
cca1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cca3 : 68                       pla         ;load status
                                eor_flag 0
cca4 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cca6 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cca9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------- 6502_functional_test.a65 --------------------------

ccab : a900            >            lda #0             ;allow test to change I
                       >
ccad : 48              >            pha         ;use stack to load status
ccae : 28              >            plp
                        
ccaf : ae1b02                   ldx abs1+3
ccb2 : 08                       php         ;test stores do not alter flags
ccb3 : 8a                       txa
ccb4 : 49c3                     eor #$c3
ccb6 : aa                       tax
ccb7 : 28                       plp
ccb8 : 860f                     stx zpt+3
ccba : 08                       php         ;flags after load/store sequence
ccbb : 49c3                     eor #$c3
ccbd : c518                     cmp zp1+3   ;test result
                                trap_ne
ccbf : d0fe            >        bne *           ;failed not equal (non zero)
                        
ccc1 : 68                       pla         ;load status
                                eor_flag 0
ccc2 : 4930            >            eor #0|fao         ;invert expected flags 
                        
ccc4 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
ccc7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
ccc9 : a9ff            >            lda #$ff             ;allow test to change
                       >
cccb : 48              >            pha         ;use stack to load status
cccc : 28              >            plp
                        
cccd : ae1802                   ldx abs1
ccd0 : 08                       php         ;test stores do not alter flags
ccd1 : 8a                       txa
ccd2 : 49c3                     eor #$c3
ccd4 : aa                       tax
ccd5 : 28                       plp
ccd6 : 860c                     stx zpt
ccd8 : 08                       php         ;flags after load/store sequence
ccd9 : 49c3                     eor #$c3
ccdb : aa                       tax
ccdc : e415                     cpx zp1     ;test result
                                trap_ne
ccde : d0fe            >        bne *           ;failed not equal (non zero)
                        
cce0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cce1 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cce3 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cce6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cce8 : a9ff            >            lda #$ff             ;allow test to change
                       >
ccea : 48              >            pha         ;use stack to load status
cceb : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------- 6502_functional_test.a65 --------------------------

                        
ccec : ae1902                   ldx abs1+1
ccef : 08                       php         ;test stores do not alter flags
ccf0 : 8a                       txa
ccf1 : 49c3                     eor #$c3
ccf3 : aa                       tax
ccf4 : 28                       plp
ccf5 : 860d                     stx zpt+1
ccf7 : 08                       php         ;flags after load/store sequence
ccf8 : 49c3                     eor #$c3
ccfa : aa                       tax
ccfb : e416                     cpx zp1+1   ;test result
                                trap_ne
ccfd : d0fe            >        bne *           ;failed not equal (non zero)
                        
ccff : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cd00 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cd02 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cd05 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cd07 : a9ff            >            lda #$ff             ;allow test to change
                       >
cd09 : 48              >            pha         ;use stack to load status
cd0a : 28              >            plp
                        
cd0b : ae1a02                   ldx abs1+2
cd0e : 08                       php         ;test stores do not alter flags
cd0f : 8a                       txa
cd10 : 49c3                     eor #$c3
cd12 : aa                       tax
cd13 : 28                       plp
cd14 : 860e                     stx zpt+2
cd16 : 08                       php         ;flags after load/store sequence
cd17 : 49c3                     eor #$c3
cd19 : aa                       tax
cd1a : e417                     cpx zp1+2   ;test result
                                trap_ne
cd1c : d0fe            >        bne *           ;failed not equal (non zero)
                        
cd1e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cd1f : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cd21 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cd24 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cd26 : a9ff            >            lda #$ff             ;allow test to change
                       >
cd28 : 48              >            pha         ;use stack to load status
cd29 : 28              >            plp
                        
cd2a : ae1b02                   ldx abs1+3
cd2d : 08                       php         ;test stores do not alter flags
cd2e : 8a                       txa
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------- 6502_functional_test.a65 --------------------------

cd2f : 49c3                     eor #$c3
cd31 : aa                       tax
cd32 : 28                       plp
cd33 : 860f                     stx zpt+3
cd35 : 08                       php         ;flags after load/store sequence
cd36 : 49c3                     eor #$c3
cd38 : aa                       tax
cd39 : e418                     cpx zp1+3   ;test result
                                trap_ne
cd3b : d0fe            >        bne *           ;failed not equal (non zero)
                        
cd3d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cd3e : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cd40 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
cd43 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
cd45 : a900            >            lda #0             ;allow test to change I
                       >
cd47 : 48              >            pha         ;use stack to load status
cd48 : 28              >            plp
                        
cd49 : a2c3                     ldx #$c3
cd4b : 08                       php
cd4c : ec1802                   cpx abs1    ;test result
                                trap_ne
cd4f : d0fe            >        bne *           ;failed not equal (non zero)
                        
cd51 : 68                       pla         ;load status
                                eor_flag 0
cd52 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cd54 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cd57 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cd59 : a900            >            lda #0             ;allow test to change I
                       >
cd5b : 48              >            pha         ;use stack to load status
cd5c : 28              >            plp
                        
cd5d : a282                     ldx #$82
cd5f : 08                       php
cd60 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
cd63 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cd65 : 68                       pla         ;load status
                                eor_flag 0
cd66 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cd68 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cd6b : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------- 6502_functional_test.a65 --------------------------

                                set_stat 0
                       >            load_flag 0
cd6d : a900            >            lda #0             ;allow test to change I
                       >
cd6f : 48              >            pha         ;use stack to load status
cd70 : 28              >            plp
                        
cd71 : a241                     ldx #$41
cd73 : 08                       php
cd74 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
cd77 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cd79 : 68                       pla         ;load status
                                eor_flag 0
cd7a : 4930            >            eor #0|fao         ;invert expected flags 
                        
cd7c : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cd7f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cd81 : a900            >            lda #0             ;allow test to change I
                       >
cd83 : 48              >            pha         ;use stack to load status
cd84 : 28              >            plp
                        
cd85 : a200                     ldx #0
cd87 : 08                       php
cd88 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
cd8b : d0fe            >        bne *           ;failed not equal (non zero)
                        
cd8d : 68                       pla         ;load status
                                eor_flag 0
cd8e : 4930            >            eor #0|fao         ;invert expected flags 
                        
cd90 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
cd93 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
cd95 : a9ff            >            lda #$ff             ;allow test to change
                       >
cd97 : 48              >            pha         ;use stack to load status
cd98 : 28              >            plp
                        
cd99 : a2c3                     ldx #$c3
cd9b : 08                       php
cd9c : ec1802                   cpx abs1    ;test result
                                trap_ne
cd9f : d0fe            >        bne *           ;failed not equal (non zero)
                        
cda1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cda2 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cda4 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------- 6502_functional_test.a65 --------------------------

cda7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cda9 : a9ff            >            lda #$ff             ;allow test to change
                       >
cdab : 48              >            pha         ;use stack to load status
cdac : 28              >            plp
                        
cdad : a282                     ldx #$82
cdaf : 08                       php
cdb0 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
cdb3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cdb5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cdb6 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cdb8 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cdbb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cdbd : a9ff            >            lda #$ff             ;allow test to change
                       >
cdbf : 48              >            pha         ;use stack to load status
cdc0 : 28              >            plp
                        
cdc1 : a241                     ldx #$41
cdc3 : 08                       php
cdc4 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
cdc7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cdc9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cdca : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cdcc : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cdcf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cdd1 : a9ff            >            lda #$ff             ;allow test to change
                       >
cdd3 : 48              >            pha         ;use stack to load status
cdd4 : 28              >            plp
                        
cdd5 : a200                     ldx #0
cdd7 : 08                       php
cdd8 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
cddb : d0fe            >        bne *           ;failed not equal (non zero)
                        
cddd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cdde : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cde0 : cd2002                   cmp fLDx+3  ;test flags
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne
cde3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
cde5 : a200                     ldx #0
cde7 : a50c                     lda zpt
cde9 : 49c3                     eor #$c3
cdeb : c515                     cmp zp1
                                trap_ne     ;store to zp data
cded : d0fe            >        bne *           ;failed not equal (non zero)
                        
cdef : 860c                     stx zpt     ;clear
cdf1 : ad0302                   lda abst
cdf4 : 49c3                     eor #$c3
cdf6 : cd1802                   cmp abs1
                                trap_ne     ;store to abs data
cdf9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cdfb : 8e0302                   stx abst    ;clear
cdfe : a50d                     lda zpt+1
ce00 : 49c3                     eor #$c3
ce02 : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
ce04 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ce06 : 860d                     stx zpt+1   ;clear
ce08 : ad0402                   lda abst+1
ce0b : 49c3                     eor #$c3
ce0d : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
ce10 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ce12 : 8e0402                   stx abst+1  ;clear
ce15 : a50e                     lda zpt+2
ce17 : 49c3                     eor #$c3
ce19 : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
ce1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
ce1d : 860e                     stx zpt+2   ;clear
ce1f : ad0502                   lda abst+2
ce22 : 49c3                     eor #$c3
ce24 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
ce27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ce29 : 8e0502                   stx abst+2  ;clear
ce2c : a50f                     lda zpt+3
ce2e : 49c3                     eor #$c3
ce30 : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
ce32 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ce34 : 860f                     stx zpt+3   ;clear
ce36 : ad0602                   lda abst+3
ce39 : 49c3                     eor #$c3
ce3b : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
ce3e : d0fe            >        bne *           ;failed not equal (non zero)
                        
ce40 : 8e0602                   stx abst+3  ;clear
                                next_test
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------- 6502_functional_test.a65 --------------------------

ce43 : ad0002          >            lda test_case   ;previous test
ce46 : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ce48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
ce4a : a914            >            lda #test_num   ;*** next tests' number
ce4c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
ce4f : a900            >            lda #0             ;allow test to change I
                       >
ce51 : 48              >            pha         ;use stack to load status
ce52 : 28              >            plp
                        
ce53 : a415                     ldy zp1
ce55 : 08                       php         ;test stores do not alter flags
ce56 : 98                       tya
ce57 : 49c3                     eor #$c3
ce59 : a8                       tay
ce5a : 28                       plp
ce5b : 8c0302                   sty abst
ce5e : 08                       php         ;flags after load/store sequence
ce5f : 49c3                     eor #$c3
ce61 : a8                       tay
ce62 : c0c3                     cpy #$c3    ;test result
                                trap_ne
ce64 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ce66 : 68                       pla         ;load status
                                eor_flag 0
ce67 : 4930            >            eor #0|fao         ;invert expected flags 
                        
ce69 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
ce6c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
ce6e : a900            >            lda #0             ;allow test to change I
                       >
ce70 : 48              >            pha         ;use stack to load status
ce71 : 28              >            plp
                        
ce72 : a416                     ldy zp1+1
ce74 : 08                       php         ;test stores do not alter flags
ce75 : 98                       tya
ce76 : 49c3                     eor #$c3
ce78 : a8                       tay
ce79 : 28                       plp
ce7a : 8c0402                   sty abst+1
ce7d : 08                       php         ;flags after load/store sequence
ce7e : 49c3                     eor #$c3
ce80 : a8                       tay
ce81 : c082                     cpy #$82    ;test result
                                trap_ne
ce83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------- 6502_functional_test.a65 --------------------------

ce85 : 68                       pla         ;load status
                                eor_flag 0
ce86 : 4930            >            eor #0|fao         ;invert expected flags 
                        
ce88 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
ce8b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
ce8d : a900            >            lda #0             ;allow test to change I
                       >
ce8f : 48              >            pha         ;use stack to load status
ce90 : 28              >            plp
                        
ce91 : a417                     ldy zp1+2
ce93 : 08                       php         ;test stores do not alter flags
ce94 : 98                       tya
ce95 : 49c3                     eor #$c3
ce97 : a8                       tay
ce98 : 28                       plp
ce99 : 8c0502                   sty abst+2
ce9c : 08                       php         ;flags after load/store sequence
ce9d : 49c3                     eor #$c3
ce9f : a8                       tay
cea0 : c041                     cpy #$41    ;test result
                                trap_ne
cea2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cea4 : 68                       pla         ;load status
                                eor_flag 0
cea5 : 4930            >            eor #0|fao         ;invert expected flags 
                        
cea7 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
ceaa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
ceac : a900            >            lda #0             ;allow test to change I
                       >
ceae : 48              >            pha         ;use stack to load status
ceaf : 28              >            plp
                        
ceb0 : a418                     ldy zp1+3
ceb2 : 08                       php         ;test stores do not alter flags
ceb3 : 98                       tya
ceb4 : 49c3                     eor #$c3
ceb6 : a8                       tay
ceb7 : 28                       plp
ceb8 : 8c0602                   sty abst+3
cebb : 08                       php         ;flags after load/store sequence
cebc : 49c3                     eor #$c3
cebe : a8                       tay
cebf : c000                     cpy #0      ;test result
                                trap_ne
cec1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cec3 : 68                       pla         ;load status
                                eor_flag 0
cec4 : 4930            >            eor #0|fao         ;invert expected flags 
                        
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------- 6502_functional_test.a65 --------------------------

cec6 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
cec9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
cecb : a9ff            >            lda #$ff             ;allow test to change
                       >
cecd : 48              >            pha         ;use stack to load status
cece : 28              >            plp
                        
cecf : a415                     ldy zp1
ced1 : 08                       php         ;test stores do not alter flags
ced2 : 98                       tya
ced3 : 49c3                     eor #$c3
ced5 : a8                       tay
ced6 : 28                       plp
ced7 : 8c0302                   sty abst
ceda : 08                       php         ;flags after load/store sequence
cedb : 49c3                     eor #$c3
cedd : a8                       tay
cede : c0c3                     cpy #$c3    ;test result
                                trap_ne
cee0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cee2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cee3 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cee5 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cee8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
ceea : a9ff            >            lda #$ff             ;allow test to change
                       >
ceec : 48              >            pha         ;use stack to load status
ceed : 28              >            plp
                        
ceee : a416                     ldy zp1+1
cef0 : 08                       php         ;test stores do not alter flags
cef1 : 98                       tya
cef2 : 49c3                     eor #$c3
cef4 : a8                       tay
cef5 : 28                       plp
cef6 : 8c0402                   sty abst+1
cef9 : 08                       php         ;flags after load/store sequence
cefa : 49c3                     eor #$c3
cefc : a8                       tay
cefd : c082                     cpy #$82   ;test result
                                trap_ne
ceff : d0fe            >        bne *           ;failed not equal (non zero)
                        
cf01 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cf02 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cf04 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cf07 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------- 6502_functional_test.a65 --------------------------

                        
                                set_stat $ff
                       >            load_flag $ff
cf09 : a9ff            >            lda #$ff             ;allow test to change
                       >
cf0b : 48              >            pha         ;use stack to load status
cf0c : 28              >            plp
                        
cf0d : a417                     ldy zp1+2
cf0f : 08                       php         ;test stores do not alter flags
cf10 : 98                       tya
cf11 : 49c3                     eor #$c3
cf13 : a8                       tay
cf14 : 28                       plp
cf15 : 8c0502                   sty abst+2
cf18 : 08                       php         ;flags after load/store sequence
cf19 : 49c3                     eor #$c3
cf1b : a8                       tay
cf1c : c041                     cpy #$41    ;test result
                                trap_ne
cf1e : d0fe            >        bne *           ;failed not equal (non zero)
                        
cf20 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cf21 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cf23 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cf26 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cf28 : a9ff            >            lda #$ff             ;allow test to change
                       >
cf2a : 48              >            pha         ;use stack to load status
cf2b : 28              >            plp
                        
cf2c : a418                     ldy zp1+3
cf2e : 08                       php         ;test stores do not alter flags
cf2f : 98                       tya
cf30 : 49c3                     eor #$c3
cf32 : a8                       tay
cf33 : 28                       plp
cf34 : 8c0602                   sty abst+3
cf37 : 08                       php         ;flags after load/store sequence
cf38 : 49c3                     eor #$c3
cf3a : a8                       tay
cf3b : c000                     cpy #0      ;test result
                                trap_ne
cf3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
cf3f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cf40 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cf42 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
cf45 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------- 6502_functional_test.a65 --------------------------

cf47 : a900            >            lda #0             ;allow test to change I
                       >
cf49 : 48              >            pha         ;use stack to load status
cf4a : 28              >            plp
                        
cf4b : ac1802                   ldy abs1
cf4e : 08                       php         ;test stores do not alter flags
cf4f : 98                       tya
cf50 : 49c3                     eor #$c3
cf52 : a8                       tay
cf53 : 28                       plp
cf54 : 840c                     sty zpt
cf56 : 08                       php         ;flags after load/store sequence
cf57 : 49c3                     eor #$c3
cf59 : a8                       tay
cf5a : c415                     cpy zp1     ;test result
                                trap_ne
cf5c : d0fe            >        bne *           ;failed not equal (non zero)
                        
cf5e : 68                       pla         ;load status
                                eor_flag 0
cf5f : 4930            >            eor #0|fao         ;invert expected flags 
                        
cf61 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cf64 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cf66 : a900            >            lda #0             ;allow test to change I
                       >
cf68 : 48              >            pha         ;use stack to load status
cf69 : 28              >            plp
                        
cf6a : ac1902                   ldy abs1+1
cf6d : 08                       php         ;test stores do not alter flags
cf6e : 98                       tya
cf6f : 49c3                     eor #$c3
cf71 : a8                       tay
cf72 : 28                       plp
cf73 : 840d                     sty zpt+1
cf75 : 08                       php         ;flags after load/store sequence
cf76 : 49c3                     eor #$c3
cf78 : a8                       tay
cf79 : c416                     cpy zp1+1   ;test result
                                trap_ne
cf7b : d0fe            >        bne *           ;failed not equal (non zero)
                        
cf7d : 68                       pla         ;load status
                                eor_flag 0
cf7e : 4930            >            eor #0|fao         ;invert expected flags 
                        
cf80 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cf83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cf85 : a900            >            lda #0             ;allow test to change I
                       >
cf87 : 48              >            pha         ;use stack to load status
cf88 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------- 6502_functional_test.a65 --------------------------

                        
cf89 : ac1a02                   ldy abs1+2
cf8c : 08                       php         ;test stores do not alter flags
cf8d : 98                       tya
cf8e : 49c3                     eor #$c3
cf90 : a8                       tay
cf91 : 28                       plp
cf92 : 840e                     sty zpt+2
cf94 : 08                       php         ;flags after load/store sequence
cf95 : 49c3                     eor #$c3
cf97 : a8                       tay
cf98 : c417                     cpy zp1+2   ;test result
                                trap_ne
cf9a : d0fe            >        bne *           ;failed not equal (non zero)
                        
cf9c : 68                       pla         ;load status
                                eor_flag 0
cf9d : 4930            >            eor #0|fao         ;invert expected flags 
                        
cf9f : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
cfa2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
cfa4 : a900            >            lda #0             ;allow test to change I
                       >
cfa6 : 48              >            pha         ;use stack to load status
cfa7 : 28              >            plp
                        
cfa8 : ac1b02                   ldy abs1+3
cfab : 08                       php         ;test stores do not alter flags
cfac : 98                       tya
cfad : 49c3                     eor #$c3
cfaf : a8                       tay
cfb0 : 28                       plp
cfb1 : 840f                     sty zpt+3
cfb3 : 08                       php         ;flags after load/store sequence
cfb4 : 49c3                     eor #$c3
cfb6 : a8                       tay
cfb7 : c418                     cpy zp1+3   ;test result
                                trap_ne
cfb9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cfbb : 68                       pla         ;load status
                                eor_flag 0
cfbc : 4930            >            eor #0|fao         ;invert expected flags 
                        
cfbe : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
cfc1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
cfc3 : a9ff            >            lda #$ff             ;allow test to change
                       >
cfc5 : 48              >            pha         ;use stack to load status
cfc6 : 28              >            plp
                        
cfc7 : ac1802                   ldy abs1
cfca : 08                       php         ;test stores do not alter flags
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------- 6502_functional_test.a65 --------------------------

cfcb : 98                       tya
cfcc : 49c3                     eor #$c3
cfce : a8                       tay
cfcf : 28                       plp
cfd0 : 840c                     sty zpt
cfd2 : 08                       php         ;flags after load/store sequence
cfd3 : 49c3                     eor #$c3
cfd5 : a8                       tay
cfd6 : c515                     cmp zp1     ;test result
                                trap_ne
cfd8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cfda : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cfdb : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cfdd : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
cfe0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
cfe2 : a9ff            >            lda #$ff             ;allow test to change
                       >
cfe4 : 48              >            pha         ;use stack to load status
cfe5 : 28              >            plp
                        
cfe6 : ac1902                   ldy abs1+1
cfe9 : 08                       php         ;test stores do not alter flags
cfea : 98                       tya
cfeb : 49c3                     eor #$c3
cfed : a8                       tay
cfee : 28                       plp
cfef : 840d                     sty zpt+1
cff1 : 08                       php         ;flags after load/store sequence
cff2 : 49c3                     eor #$c3
cff4 : a8                       tay
cff5 : c516                     cmp zp1+1   ;test result
                                trap_ne
cff7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
cff9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
cffa : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
cffc : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
cfff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d001 : a9ff            >            lda #$ff             ;allow test to change
                       >
d003 : 48              >            pha         ;use stack to load status
d004 : 28              >            plp
                        
d005 : ac1a02                   ldy abs1+2
d008 : 08                       php         ;test stores do not alter flags
d009 : 98                       tya
d00a : 49c3                     eor #$c3
d00c : a8                       tay
d00d : 28                       plp
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------- 6502_functional_test.a65 --------------------------

d00e : 840e                     sty zpt+2
d010 : 08                       php         ;flags after load/store sequence
d011 : 49c3                     eor #$c3
d013 : a8                       tay
d014 : c517                     cmp zp1+2   ;test result
                                trap_ne
d016 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d018 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d019 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d01b : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d01e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d020 : a9ff            >            lda #$ff             ;allow test to change
                       >
d022 : 48              >            pha         ;use stack to load status
d023 : 28              >            plp
                        
d024 : ac1b02                   ldy abs1+3
d027 : 08                       php         ;test stores do not alter flags
d028 : 98                       tya
d029 : 49c3                     eor #$c3
d02b : a8                       tay
d02c : 28                       plp
d02d : 840f                     sty zpt+3
d02f : 08                       php         ;flags after load/store sequence
d030 : 49c3                     eor #$c3
d032 : a8                       tay
d033 : c518                     cmp zp1+3   ;test result
                                trap_ne
d035 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d037 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d038 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d03a : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d03d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
d03f : a900            >            lda #0             ;allow test to change I
                       >
d041 : 48              >            pha         ;use stack to load status
d042 : 28              >            plp
                        
d043 : a0c3                     ldy #$c3
d045 : 08                       php
d046 : cc1802                   cpy abs1    ;test result
                                trap_ne
d049 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d04b : 68                       pla         ;load status
                                eor_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------- 6502_functional_test.a65 --------------------------

d04c : 4930            >            eor #0|fao         ;invert expected flags 
                        
d04e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d051 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d053 : a900            >            lda #0             ;allow test to change I
                       >
d055 : 48              >            pha         ;use stack to load status
d056 : 28              >            plp
                        
d057 : a082                     ldy #$82
d059 : 08                       php
d05a : cc1902                   cpy abs1+1  ;test result
                                trap_ne
d05d : d0fe            >        bne *           ;failed not equal (non zero)
                        
d05f : 68                       pla         ;load status
                                eor_flag 0
d060 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d062 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d065 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d067 : a900            >            lda #0             ;allow test to change I
                       >
d069 : 48              >            pha         ;use stack to load status
d06a : 28              >            plp
                        
d06b : a041                     ldy #$41
d06d : 08                       php
d06e : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
d071 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d073 : 68                       pla         ;load status
                                eor_flag 0
d074 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d076 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d079 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d07b : a900            >            lda #0             ;allow test to change I
                       >
d07d : 48              >            pha         ;use stack to load status
d07e : 28              >            plp
                        
d07f : a000                     ldy #0
d081 : 08                       php
d082 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
d085 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d087 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------- 6502_functional_test.a65 --------------------------

                                eor_flag 0
d088 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d08a : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d08d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
d08f : a9ff            >            lda #$ff             ;allow test to change
                       >
d091 : 48              >            pha         ;use stack to load status
d092 : 28              >            plp
                        
d093 : a0c3                     ldy #$c3
d095 : 08                       php
d096 : cc1802                   cpy abs1    ;test result
                                trap_ne
d099 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d09b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d09c : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d09e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d0a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d0a3 : a9ff            >            lda #$ff             ;allow test to change
                       >
d0a5 : 48              >            pha         ;use stack to load status
d0a6 : 28              >            plp
                        
d0a7 : a082                     ldy #$82
d0a9 : 08                       php
d0aa : cc1902                   cpy abs1+1  ;test result
                                trap_ne
d0ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
d0af : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d0b0 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d0b2 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d0b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d0b7 : a9ff            >            lda #$ff             ;allow test to change
                       >
d0b9 : 48              >            pha         ;use stack to load status
d0ba : 28              >            plp
                        
d0bb : a041                     ldy #$41
d0bd : 08                       php
d0be : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
d0c1 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------- 6502_functional_test.a65 --------------------------

                        
d0c3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d0c4 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d0c6 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d0c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d0cb : a9ff            >            lda #$ff             ;allow test to change
                       >
d0cd : 48              >            pha         ;use stack to load status
d0ce : 28              >            plp
                        
d0cf : a000                     ldy #0
d0d1 : 08                       php
d0d2 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
d0d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d0d7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d0d8 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d0da : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d0dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
d0df : a000                     ldy #0
d0e1 : a50c                     lda zpt
d0e3 : 49c3                     eor #$c3
d0e5 : c515                     cmp zp1
                                trap_ne     ;store to zp   data
d0e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d0e9 : 840c                     sty zpt     ;clear
d0eb : ad0302                   lda abst
d0ee : 49c3                     eor #$c3
d0f0 : cd1802                   cmp abs1
                                trap_ne     ;store to abs   data
d0f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d0f5 : 8c0302                   sty abst    ;clear
d0f8 : a50d                     lda zpt+1
d0fa : 49c3                     eor #$c3
d0fc : c516                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
d0fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
d100 : 840d                     sty zpt+1   ;clear
d102 : ad0402                   lda abst+1
d105 : 49c3                     eor #$c3
d107 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
d10a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d10c : 8c0402                   sty abst+1  ;clear
d10f : a50e                     lda zpt+2
d111 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------- 6502_functional_test.a65 --------------------------

d113 : c517                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
d115 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d117 : 840e                     sty zpt+2   ;clear
d119 : ad0502                   lda abst+2
d11c : 49c3                     eor #$c3
d11e : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
d121 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d123 : 8c0502                   sty abst+2  ;clear
d126 : a50f                     lda zpt+3
d128 : 49c3                     eor #$c3
d12a : c518                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
d12c : d0fe            >        bne *           ;failed not equal (non zero)
                        
d12e : 840f                     sty zpt+3   ;clear
d130 : ad0602                   lda abst+3
d133 : 49c3                     eor #$c3
d135 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
d138 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d13a : 8c0602                   sty abst+3  ;clear
                                next_test
d13d : ad0002          >            lda test_case   ;previous test
d140 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d142 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
d144 : a915            >            lda #test_num   ;*** next tests' number
d146 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing load / store accumulator LDA / STA all addre
                        ; LDA / STA - zp,x / abs,x
d149 : a203                     ldx #3
d14b :                  tldax
                                set_stat 0
                       >            load_flag 0
d14b : a900            >            lda #0             ;allow test to change I
                       >
d14d : 48              >            pha         ;use stack to load status
d14e : 28              >            plp
                        
d14f : b515                     lda zp1,x
d151 : 08                       php         ;test stores do not alter flags
d152 : 49c3                     eor #$c3
d154 : 28                       plp
d155 : 9d0302                   sta abst,x
d158 : 08                       php         ;flags after load/store sequence
d159 : 49c3                     eor #$c3
d15b : dd1802                   cmp abs1,x  ;test result
                                trap_ne
d15e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d160 : 68                       pla         ;load status
                                eor_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------- 6502_functional_test.a65 --------------------------

d161 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d163 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
d166 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d168 : ca                       dex
d169 : 10e0                     bpl tldax
                        
d16b : a203                     ldx #3
d16d :                  tldax1
                                set_stat $ff
                       >            load_flag $ff
d16d : a9ff            >            lda #$ff             ;allow test to change
                       >
d16f : 48              >            pha         ;use stack to load status
d170 : 28              >            plp
                        
d171 : b515                     lda zp1,x
d173 : 08                       php         ;test stores do not alter flags
d174 : 49c3                     eor #$c3
d176 : 28                       plp
d177 : 9d0302                   sta abst,x
d17a : 08                       php         ;flags after load/store sequence
d17b : 49c3                     eor #$c3
d17d : dd1802                   cmp abs1,x   ;test result
                                trap_ne
d180 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d182 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d183 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d185 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
d188 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d18a : ca                       dex
d18b : 10e0                     bpl tldax1
                        
d18d : a203                     ldx #3
d18f :                  tldax2
                                set_stat 0
                       >            load_flag 0
d18f : a900            >            lda #0             ;allow test to change I
                       >
d191 : 48              >            pha         ;use stack to load status
d192 : 28              >            plp
                        
d193 : bd1802                   lda abs1,x
d196 : 08                       php         ;test stores do not alter flags
d197 : 49c3                     eor #$c3
d199 : 28                       plp
d19a : 950c                     sta zpt,x
d19c : 08                       php         ;flags after load/store sequence
d19d : 49c3                     eor #$c3
d19f : d515                     cmp zp1,x   ;test result
                                trap_ne
d1a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d1a3 : 68                       pla         ;load status
                                eor_flag 0
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------- 6502_functional_test.a65 --------------------------

d1a4 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d1a6 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
d1a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d1ab : ca                       dex
d1ac : 10e1                     bpl tldax2
                        
d1ae : a203                     ldx #3
d1b0 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
d1b0 : a9ff            >            lda #$ff             ;allow test to change
                       >
d1b2 : 48              >            pha         ;use stack to load status
d1b3 : 28              >            plp
                        
d1b4 : bd1802                   lda abs1,x
d1b7 : 08                       php         ;test stores do not alter flags
d1b8 : 49c3                     eor #$c3
d1ba : 28                       plp
d1bb : 950c                     sta zpt,x
d1bd : 08                       php         ;flags after load/store sequence
d1be : 49c3                     eor #$c3
d1c0 : d515                     cmp zp1,x   ;test result
                                trap_ne
d1c2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d1c4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d1c5 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d1c7 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
d1ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
d1cc : ca                       dex
d1cd : 10e1                     bpl tldax3
                        
d1cf : a203                     ldx #3      ;testing store result
d1d1 : a000                     ldy #0
d1d3 : b50c             tstax   lda zpt,x
d1d5 : 49c3                     eor #$c3
d1d7 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
d1d9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d1db : 940c                     sty zpt,x   ;clear
d1dd : bd0302                   lda abst,x
d1e0 : 49c3                     eor #$c3
d1e2 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
d1e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d1e7 : 8a                       txa
d1e8 : 9d0302                   sta abst,x  ;clear
d1eb : ca                       dex
d1ec : 10e5                     bpl tstax
                                next_test
d1ee : ad0002          >            lda test_case   ;previous test
d1f1 : c915            >            cmp #test_num
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne         ;test is out of sequence
d1f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
d1f5 : a916            >            lda #test_num   ;*** next tests' number
d1f7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
d1fa : a003                     ldy #3
d1fc :                  tlday
                                set_stat 0
                       >            load_flag 0
d1fc : a900            >            lda #0             ;allow test to change I
                       >
d1fe : 48              >            pha         ;use stack to load status
d1ff : 28              >            plp
                        
d200 : b126                     lda (ind1),y
d202 : 08                       php         ;test stores do not alter flags
d203 : 49c3                     eor #$c3
d205 : 28                       plp
d206 : 990302                   sta abst,y
d209 : 08                       php         ;flags after load/store sequence
d20a : 49c3                     eor #$c3
d20c : d91802                   cmp abs1,y  ;test result
                                trap_ne
d20f : d0fe            >        bne *           ;failed not equal (non zero)
                        
d211 : 68                       pla         ;load status
                                eor_flag 0
d212 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d214 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
d217 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d219 : 88                       dey
d21a : 10e0                     bpl tlday
                        
d21c : a003                     ldy #3
d21e :                  tlday1
                                set_stat $ff
                       >            load_flag $ff
d21e : a9ff            >            lda #$ff             ;allow test to change
                       >
d220 : 48              >            pha         ;use stack to load status
d221 : 28              >            plp
                        
d222 : b126                     lda (ind1),y
d224 : 08                       php         ;test stores do not alter flags
d225 : 49c3                     eor #$c3
d227 : 28                       plp
d228 : 990302                   sta abst,y
d22b : 08                       php         ;flags after load/store sequence
d22c : 49c3                     eor #$c3
d22e : d91802                   cmp abs1,y  ;test result
                                trap_ne
d231 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d233 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------- 6502_functional_test.a65 --------------------------

                                eor_flag lo~fnz ;mask bits not altered
d234 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d236 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
d239 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d23b : 88                       dey
d23c : 10e0                     bpl tlday1
                        
d23e : a003                     ldy #3      ;testing store result
d240 : a200                     ldx #0
d242 : b90302           tstay   lda abst,y
d245 : 49c3                     eor #$c3
d247 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
d24a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d24c : 8a                       txa
d24d : 990302                   sta abst,y  ;clear
d250 : 88                       dey
d251 : 10ef                     bpl tstay
                        
d253 : a003                     ldy #3
d255 :                  tlday2
                                set_stat 0
                       >            load_flag 0
d255 : a900            >            lda #0             ;allow test to change I
                       >
d257 : 48              >            pha         ;use stack to load status
d258 : 28              >            plp
                        
d259 : b91802                   lda abs1,y
d25c : 08                       php         ;test stores do not alter flags
d25d : 49c3                     eor #$c3
d25f : 28                       plp
d260 : 9132                     sta (indt),y
d262 : 08                       php         ;flags after load/store sequence
d263 : 49c3                     eor #$c3
d265 : d126                     cmp (ind1),y    ;test result
                                trap_ne
d267 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d269 : 68                       pla         ;load status
                                eor_flag 0
d26a : 4930            >            eor #0|fao         ;invert expected flags 
                        
d26c : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
d26f : d0fe            >        bne *           ;failed not equal (non zero)
                        
d271 : 88                       dey
d272 : 10e1                     bpl tlday2
                        
d274 : a003                     ldy #3
d276 :                  tlday3
                                set_stat $ff
                       >            load_flag $ff
d276 : a9ff            >            lda #$ff             ;allow test to change
                       >
d278 : 48              >            pha         ;use stack to load status
d279 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------- 6502_functional_test.a65 --------------------------

                        
d27a : b91802                   lda abs1,y
d27d : 08                       php         ;test stores do not alter flags
d27e : 49c3                     eor #$c3
d280 : 28                       plp
d281 : 9132                     sta (indt),y
d283 : 08                       php         ;flags after load/store sequence
d284 : 49c3                     eor #$c3
d286 : d126                     cmp (ind1),y   ;test result
                                trap_ne
d288 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d28a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d28b : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d28d : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
d290 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d292 : 88                       dey
d293 : 10e1                     bpl tlday3
                        
d295 : a003                     ldy #3      ;testing store result
d297 : a200                     ldx #0
d299 : b90302           tstay1  lda abst,y
d29c : 49c3                     eor #$c3
d29e : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
d2a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d2a3 : 8a                       txa
d2a4 : 990302                   sta abst,y  ;clear
d2a7 : 88                       dey
d2a8 : 10ef                     bpl tstay1
                        
d2aa : a206                     ldx #6
d2ac : a003                     ldy #3
d2ae :                  tldax4
                                set_stat 0
                       >            load_flag 0
d2ae : a900            >            lda #0             ;allow test to change I
                       >
d2b0 : 48              >            pha         ;use stack to load status
d2b1 : 28              >            plp
                        
d2b2 : a126                     lda (ind1,x)
d2b4 : 08                       php         ;test stores do not alter flags
d2b5 : 49c3                     eor #$c3
d2b7 : 28                       plp
d2b8 : 8132                     sta (indt,x)
d2ba : 08                       php         ;flags after load/store sequence
d2bb : 49c3                     eor #$c3
d2bd : d91802                   cmp abs1,y  ;test result
                                trap_ne
d2c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d2c2 : 68                       pla         ;load status
                                eor_flag 0
d2c3 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d2c5 : d91d02                   cmp fLDx,y  ;test flags
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne
d2c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d2ca : ca                       dex
d2cb : ca                       dex
d2cc : 88                       dey
d2cd : 10df                     bpl tldax4
                        
d2cf : a206                     ldx #6
d2d1 : a003                     ldy #3
d2d3 :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
d2d3 : a9ff            >            lda #$ff             ;allow test to change
                       >
d2d5 : 48              >            pha         ;use stack to load status
d2d6 : 28              >            plp
                        
d2d7 : a126                     lda (ind1,x)
d2d9 : 08                       php         ;test stores do not alter flags
d2da : 49c3                     eor #$c3
d2dc : 28                       plp
d2dd : 8132                     sta (indt,x)
d2df : 08                       php         ;flags after load/store sequence
d2e0 : 49c3                     eor #$c3
d2e2 : d91802                   cmp abs1,y  ;test result
                                trap_ne
d2e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d2e7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d2e8 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d2ea : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
d2ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
d2ef : ca                       dex
d2f0 : ca                       dex
d2f1 : 88                       dey
d2f2 : 10df                     bpl tldax5
                        
d2f4 : a003                     ldy #3      ;testing store result
d2f6 : a200                     ldx #0
d2f8 : b90302           tstay2  lda abst,y
d2fb : 49c3                     eor #$c3
d2fd : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
d300 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d302 : 8a                       txa
d303 : 990302                   sta abst,y  ;clear
d306 : 88                       dey
d307 : 10ef                     bpl tstay2
                                next_test
d309 : ad0002          >            lda test_case   ;previous test
d30c : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d30e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
d310 : a917            >            lda #test_num   ;*** next tests' number
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------- 6502_functional_test.a65 --------------------------

d312 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; indexed wraparound test (only zp should wrap)
d315 : a2fd                     ldx #3+$fa
d317 : b51b             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
d319 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
d31c : ca                       dex
d31d : e0fa                     cpx #$fa
d31f : b0f6                     bcs tldax6
d321 : a2fd                     ldx #3+$fa
d323 : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
d326 : 9512                     sta zpt-$fa&$ff,x
d328 : ca                       dex
d329 : e0fa                     cpx #$fa
d32b : b0f6                     bcs tldax7
                        
d32d : a203                     ldx #3      ;testing wraparound result
d32f : a000                     ldy #0
d331 : b50c             tstax1  lda zpt,x
d333 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
d335 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d337 : 940c                     sty zpt,x   ;clear
d339 : bd0302                   lda abst,x
d33c : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
d33f : d0fe            >        bne *           ;failed not equal (non zero)
                        
d341 : 8a                       txa
d342 : 9d0302                   sta abst,x  ;clear
d345 : ca                       dex
d346 : 10e9                     bpl tstax1
                        
d348 : a0fb                     ldy #3+$f8
d34a : a2fe                     ldx #6+$f8
d34c : a12e             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indir
d34e : 990b01                   sta abst-$f8,y
d351 : ca                       dex
d352 : ca                       dex
d353 : 88                       dey
d354 : c0f8                     cpy #$f8
d356 : b0f4                     bcs tlday4
d358 : a003                     ldy #3      ;testing wraparound result
d35a : a200                     ldx #0
d35c : b90302           tstay4  lda abst,y
d35f : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
d362 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d364 : 8a                       txa
d365 : 990302                   sta abst,y  ;clear
d368 : 88                       dey
d369 : 10f1                     bpl tstay4
                        
d36b : a0fb                     ldy #3+$f8
d36d : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
d370 : 913a                     sta (inwt),y
d372 : 88                       dey
d373 : c0f8                     cpy #$f8
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------- 6502_functional_test.a65 --------------------------

d375 : b0f6                     bcs tlday5
d377 : a003                     ldy #3      ;testing wraparound result
d379 : a200                     ldx #0
d37b : b90302           tstay5  lda abst,y
d37e : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
d381 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d383 : 8a                       txa
d384 : 990302                   sta abst,y  ;clear
d387 : 88                       dey
d388 : 10f1                     bpl tstay5
                        
d38a : a0fb                     ldy #3+$f8
d38c : a2fe                     ldx #6+$f8
d38e : b130             tlday6  lda (inw1),y    ;no wrap on zp indirect indexe
d390 : 813a                     sta (indt-$f8&$ff,x)
d392 : ca                       dex
d393 : ca                       dex
d394 : 88                       dey
d395 : c0f8                     cpy #$f8
d397 : b0f5                     bcs tlday6
d399 : a003                     ldy #3      ;testing wraparound result
d39b : a200                     ldx #0
d39d : b90302           tstay6  lda abst,y
d3a0 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
d3a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3a5 : 8a                       txa
d3a6 : 990302                   sta abst,y  ;clear
d3a9 : 88                       dey
d3aa : 10f1                     bpl tstay6
                                next_test
d3ac : ad0002          >            lda test_case   ;previous test
d3af : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d3b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
d3b3 : a918            >            lda #test_num   ;*** next tests' number
d3b5 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0
                       >            load_flag 0
d3b8 : a900            >            lda #0             ;allow test to change I
                       >
d3ba : 48              >            pha         ;use stack to load status
d3bb : 28              >            plp
                        
d3bc : a515                     lda zp1
d3be : 08                       php         ;test stores do not alter flags
d3bf : 49c3                     eor #$c3
d3c1 : 28                       plp
d3c2 : 8d0302                   sta abst
d3c5 : 08                       php         ;flags after load/store sequence
d3c6 : 49c3                     eor #$c3
d3c8 : c9c3                     cmp #$c3    ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------- 6502_functional_test.a65 --------------------------

d3ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3cc : 68                       pla         ;load status
                                eor_flag 0
d3cd : 4930            >            eor #0|fao         ;invert expected flags 
                        
d3cf : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d3d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d3d4 : a900            >            lda #0             ;allow test to change I
                       >
d3d6 : 48              >            pha         ;use stack to load status
d3d7 : 28              >            plp
                        
d3d8 : a516                     lda zp1+1
d3da : 08                       php         ;test stores do not alter flags
d3db : 49c3                     eor #$c3
d3dd : 28                       plp
d3de : 8d0402                   sta abst+1
d3e1 : 08                       php         ;flags after load/store sequence
d3e2 : 49c3                     eor #$c3
d3e4 : c982                     cmp #$82    ;test result
                                trap_ne
d3e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d3e8 : 68                       pla         ;load status
                                eor_flag 0
d3e9 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d3eb : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d3ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d3f0 : a900            >            lda #0             ;allow test to change I
                       >
d3f2 : 48              >            pha         ;use stack to load status
d3f3 : 28              >            plp
                        
d3f4 : a517                     lda zp1+2
d3f6 : 08                       php         ;test stores do not alter flags
d3f7 : 49c3                     eor #$c3
d3f9 : 28                       plp
d3fa : 8d0502                   sta abst+2
d3fd : 08                       php         ;flags after load/store sequence
d3fe : 49c3                     eor #$c3
d400 : c941                     cmp #$41    ;test result
                                trap_ne
d402 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d404 : 68                       pla         ;load status
                                eor_flag 0
d405 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d407 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d40a : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------- 6502_functional_test.a65 --------------------------

                                set_stat 0
                       >            load_flag 0
d40c : a900            >            lda #0             ;allow test to change I
                       >
d40e : 48              >            pha         ;use stack to load status
d40f : 28              >            plp
                        
d410 : a518                     lda zp1+3
d412 : 08                       php         ;test stores do not alter flags
d413 : 49c3                     eor #$c3
d415 : 28                       plp
d416 : 8d0602                   sta abst+3
d419 : 08                       php         ;flags after load/store sequence
d41a : 49c3                     eor #$c3
d41c : c900                     cmp #0      ;test result
                                trap_ne
d41e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d420 : 68                       pla         ;load status
                                eor_flag 0
d421 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d423 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d426 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d428 : a9ff            >            lda #$ff             ;allow test to change
                       >
d42a : 48              >            pha         ;use stack to load status
d42b : 28              >            plp
                        
d42c : a515                     lda zp1
d42e : 08                       php         ;test stores do not alter flags
d42f : 49c3                     eor #$c3
d431 : 28                       plp
d432 : 8d0302                   sta abst
d435 : 08                       php         ;flags after load/store sequence
d436 : 49c3                     eor #$c3
d438 : c9c3                     cmp #$c3    ;test result
                                trap_ne
d43a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d43c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d43d : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d43f : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d442 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d444 : a9ff            >            lda #$ff             ;allow test to change
                       >
d446 : 48              >            pha         ;use stack to load status
d447 : 28              >            plp
                        
d448 : a516                     lda zp1+1
d44a : 08                       php         ;test stores do not alter flags
d44b : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------- 6502_functional_test.a65 --------------------------

d44d : 28                       plp
d44e : 8d0402                   sta abst+1
d451 : 08                       php         ;flags after load/store sequence
d452 : 49c3                     eor #$c3
d454 : c982                     cmp #$82    ;test result
                                trap_ne
d456 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d458 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d459 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d45b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d45e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d460 : a9ff            >            lda #$ff             ;allow test to change
                       >
d462 : 48              >            pha         ;use stack to load status
d463 : 28              >            plp
                        
d464 : a517                     lda zp1+2
d466 : 08                       php         ;test stores do not alter flags
d467 : 49c3                     eor #$c3
d469 : 28                       plp
d46a : 8d0502                   sta abst+2
d46d : 08                       php         ;flags after load/store sequence
d46e : 49c3                     eor #$c3
d470 : c941                     cmp #$41    ;test result
                                trap_ne
d472 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d474 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d475 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d477 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d47a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d47c : a9ff            >            lda #$ff             ;allow test to change
                       >
d47e : 48              >            pha         ;use stack to load status
d47f : 28              >            plp
                        
d480 : a518                     lda zp1+3
d482 : 08                       php         ;test stores do not alter flags
d483 : 49c3                     eor #$c3
d485 : 28                       plp
d486 : 8d0602                   sta abst+3
d489 : 08                       php         ;flags after load/store sequence
d48a : 49c3                     eor #$c3
d48c : c900                     cmp #0      ;test result
                                trap_ne
d48e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d490 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------- 6502_functional_test.a65 --------------------------

d491 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d493 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d496 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d498 : a900            >            lda #0             ;allow test to change I
                       >
d49a : 48              >            pha         ;use stack to load status
d49b : 28              >            plp
                        
d49c : ad1802                   lda abs1
d49f : 08                       php         ;test stores do not alter flags
d4a0 : 49c3                     eor #$c3
d4a2 : 28                       plp
d4a3 : 850c                     sta zpt
d4a5 : 08                       php         ;flags after load/store sequence
d4a6 : 49c3                     eor #$c3
d4a8 : c515                     cmp zp1     ;test result
                                trap_ne
d4aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
d4ac : 68                       pla         ;load status
                                eor_flag 0
d4ad : 4930            >            eor #0|fao         ;invert expected flags 
                        
d4af : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d4b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d4b4 : a900            >            lda #0             ;allow test to change I
                       >
d4b6 : 48              >            pha         ;use stack to load status
d4b7 : 28              >            plp
                        
d4b8 : ad1902                   lda abs1+1
d4bb : 08                       php         ;test stores do not alter flags
d4bc : 49c3                     eor #$c3
d4be : 28                       plp
d4bf : 850d                     sta zpt+1
d4c1 : 08                       php         ;flags after load/store sequence
d4c2 : 49c3                     eor #$c3
d4c4 : c516                     cmp zp1+1   ;test result
                                trap_ne
d4c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d4c8 : 68                       pla         ;load status
                                eor_flag 0
d4c9 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d4cb : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d4ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d4d0 : a900            >            lda #0             ;allow test to change I
                       >
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------- 6502_functional_test.a65 --------------------------

d4d2 : 48              >            pha         ;use stack to load status
d4d3 : 28              >            plp
                        
d4d4 : ad1a02                   lda abs1+2
d4d7 : 08                       php         ;test stores do not alter flags
d4d8 : 49c3                     eor #$c3
d4da : 28                       plp
d4db : 850e                     sta zpt+2
d4dd : 08                       php         ;flags after load/store sequence
d4de : 49c3                     eor #$c3
d4e0 : c517                     cmp zp1+2   ;test result
                                trap_ne
d4e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d4e4 : 68                       pla         ;load status
                                eor_flag 0
d4e5 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d4e7 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d4ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d4ec : a900            >            lda #0             ;allow test to change I
                       >
d4ee : 48              >            pha         ;use stack to load status
d4ef : 28              >            plp
                        
d4f0 : ad1b02                   lda abs1+3
d4f3 : 08                       php         ;test stores do not alter flags
d4f4 : 49c3                     eor #$c3
d4f6 : 28                       plp
d4f7 : 850f                     sta zpt+3
d4f9 : 08                       php         ;flags after load/store sequence
d4fa : 49c3                     eor #$c3
d4fc : c518                     cmp zp1+3   ;test result
                                trap_ne
d4fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
d500 : 68                       pla         ;load status
                                eor_flag 0
d501 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d503 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d506 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d508 : a9ff            >            lda #$ff             ;allow test to change
                       >
d50a : 48              >            pha         ;use stack to load status
d50b : 28              >            plp
                        
d50c : ad1802                   lda abs1
d50f : 08                       php         ;test stores do not alter flags
d510 : 49c3                     eor #$c3
d512 : 28                       plp
d513 : 850c                     sta zpt
d515 : 08                       php         ;flags after load/store sequence
d516 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------- 6502_functional_test.a65 --------------------------

d518 : c515                     cmp zp1     ;test result
                                trap_ne
d51a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d51c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d51d : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d51f : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d522 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d524 : a9ff            >            lda #$ff             ;allow test to change
                       >
d526 : 48              >            pha         ;use stack to load status
d527 : 28              >            plp
                        
d528 : ad1902                   lda abs1+1
d52b : 08                       php         ;test stores do not alter flags
d52c : 49c3                     eor #$c3
d52e : 28                       plp
d52f : 850d                     sta zpt+1
d531 : 08                       php         ;flags after load/store sequence
d532 : 49c3                     eor #$c3
d534 : c516                     cmp zp1+1   ;test result
                                trap_ne
d536 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d538 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d539 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d53b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d53e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d540 : a9ff            >            lda #$ff             ;allow test to change
                       >
d542 : 48              >            pha         ;use stack to load status
d543 : 28              >            plp
                        
d544 : ad1a02                   lda abs1+2
d547 : 08                       php         ;test stores do not alter flags
d548 : 49c3                     eor #$c3
d54a : 28                       plp
d54b : 850e                     sta zpt+2
d54d : 08                       php         ;flags after load/store sequence
d54e : 49c3                     eor #$c3
d550 : c517                     cmp zp1+2   ;test result
                                trap_ne
d552 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d554 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d555 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d557 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------- 6502_functional_test.a65 --------------------------

d55a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d55c : a9ff            >            lda #$ff             ;allow test to change
                       >
d55e : 48              >            pha         ;use stack to load status
d55f : 28              >            plp
                        
d560 : ad1b02                   lda abs1+3
d563 : 08                       php         ;test stores do not alter flags
d564 : 49c3                     eor #$c3
d566 : 28                       plp
d567 : 850f                     sta zpt+3
d569 : 08                       php         ;flags after load/store sequence
d56a : 49c3                     eor #$c3
d56c : c518                     cmp zp1+3   ;test result
                                trap_ne
d56e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d570 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d571 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d573 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d576 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d578 : a900            >            lda #0             ;allow test to change I
                       >
d57a : 48              >            pha         ;use stack to load status
d57b : 28              >            plp
                        
d57c : a9c3                     lda #$c3
d57e : 08                       php
d57f : cd1802                   cmp abs1    ;test result
                                trap_ne
d582 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d584 : 68                       pla         ;load status
                                eor_flag 0
d585 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d587 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d58a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d58c : a900            >            lda #0             ;allow test to change I
                       >
d58e : 48              >            pha         ;use stack to load status
d58f : 28              >            plp
                        
d590 : a982                     lda #$82
d592 : 08                       php
d593 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
d596 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------- 6502_functional_test.a65 --------------------------

d598 : 68                       pla         ;load status
                                eor_flag 0
d599 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d59b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d59e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d5a0 : a900            >            lda #0             ;allow test to change I
                       >
d5a2 : 48              >            pha         ;use stack to load status
d5a3 : 28              >            plp
                        
d5a4 : a941                     lda #$41
d5a6 : 08                       php
d5a7 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
d5aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5ac : 68                       pla         ;load status
                                eor_flag 0
d5ad : 4930            >            eor #0|fao         ;invert expected flags 
                        
d5af : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d5b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
d5b4 : a900            >            lda #0             ;allow test to change I
                       >
d5b6 : 48              >            pha         ;use stack to load status
d5b7 : 28              >            plp
                        
d5b8 : a900                     lda #0
d5ba : 08                       php
d5bb : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
d5be : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5c0 : 68                       pla         ;load status
                                eor_flag 0
d5c1 : 4930            >            eor #0|fao         ;invert expected flags 
                        
d5c3 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d5c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
d5c8 : a9ff            >            lda #$ff             ;allow test to change
                       >
d5ca : 48              >            pha         ;use stack to load status
d5cb : 28              >            plp
                        
d5cc : a9c3                     lda #$c3
d5ce : 08                       php
d5cf : cd1802                   cmp abs1    ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------- 6502_functional_test.a65 --------------------------

d5d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5d4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d5d5 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d5d7 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
d5da : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d5dc : a9ff            >            lda #$ff             ;allow test to change
                       >
d5de : 48              >            pha         ;use stack to load status
d5df : 28              >            plp
                        
d5e0 : a982                     lda #$82
d5e2 : 08                       php
d5e3 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
d5e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5e8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d5e9 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d5eb : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
d5ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d5f0 : a9ff            >            lda #$ff             ;allow test to change
                       >
d5f2 : 48              >            pha         ;use stack to load status
d5f3 : 28              >            plp
                        
d5f4 : a941                     lda #$41
d5f6 : 08                       php
d5f7 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
d5fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
d5fc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d5fd : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d5ff : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
d602 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
d604 : a9ff            >            lda #$ff             ;allow test to change
                       >
d606 : 48              >            pha         ;use stack to load status
d607 : 28              >            plp
                        
d608 : a900                     lda #0
d60a : 08                       php
d60b : cd1b02                   cmp abs1+3  ;test result
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne
d60e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d610 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
d611 : 497d            >            eor #lo~fnz |fao         ;invert expected 
                        
d613 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
d616 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
d618 : a200                     ldx #0
d61a : a50c                     lda zpt
d61c : 49c3                     eor #$c3
d61e : c515                     cmp zp1
                                trap_ne     ;store to zp data
d620 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d622 : 860c                     stx zpt     ;clear
d624 : ad0302                   lda abst
d627 : 49c3                     eor #$c3
d629 : cd1802                   cmp abs1
                                trap_ne     ;store to abs data
d62c : d0fe            >        bne *           ;failed not equal (non zero)
                        
d62e : 8e0302                   stx abst    ;clear
d631 : a50d                     lda zpt+1
d633 : 49c3                     eor #$c3
d635 : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
d637 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d639 : 860d                     stx zpt+1   ;clear
d63b : ad0402                   lda abst+1
d63e : 49c3                     eor #$c3
d640 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
d643 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d645 : 8e0402                   stx abst+1  ;clear
d648 : a50e                     lda zpt+2
d64a : 49c3                     eor #$c3
d64c : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
d64e : d0fe            >        bne *           ;failed not equal (non zero)
                        
d650 : 860e                     stx zpt+2   ;clear
d652 : ad0502                   lda abst+2
d655 : 49c3                     eor #$c3
d657 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
d65a : d0fe            >        bne *           ;failed not equal (non zero)
                        
d65c : 8e0502                   stx abst+2  ;clear
d65f : a50f                     lda zpt+3
d661 : 49c3                     eor #$c3
d663 : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
d665 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d667 : 860f                     stx zpt+3   ;clear
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------- 6502_functional_test.a65 --------------------------

d669 : ad0602                   lda abst+3
d66c : 49c3                     eor #$c3
d66e : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
d671 : d0fe            >        bne *           ;failed not equal (non zero)
                        
d673 : 8e0602                   stx abst+3  ;clear
                                next_test
d676 : ad0002          >            lda test_case   ;previous test
d679 : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d67b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
d67d : a919            >            lda #test_num   ;*** next tests' number
d67f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addr
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
d682 : a900            >            lda #0             ;allow test to change I
                       >
d684 : 48              >            pha         ;use stack to load status
d685 : a9ff            >            lda #$ff     ;precharge accu
d687 : 28              >            plp
                        
d688 : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz
d68a : 08              >            php         ;save flags
d68b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d68d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d68f : 68              >            pla         ;load status
d690 : 48              >            pha
                       >            cmp_flag fz
d691 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d693 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d695 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
d696 : a900            >            lda #0             ;allow test to change I
                       >
d698 : 48              >            pha         ;use stack to load status
d699 : a901            >            lda #1     ;precharge accu
d69b : 28              >            plp
                        
d69c : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
d69e : 08              >            php         ;save flags
d69f : c901            >            cmp #1     ;test result
                       >            trap_ne
d6a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6a3 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------- 6502_functional_test.a65 --------------------------

d6a4 : 48              >            pha
                       >            cmp_flag fv
d6a5 : c970            >            cmp #(fv|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d6a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6a9 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
d6aa : a900            >            lda #0             ;allow test to change I
                       >
d6ac : 48              >            pha         ;use stack to load status
d6ad : a901            >            lda #1     ;precharge accu
d6af : 28              >            plp
                        
d6b0 : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clea
                                tst_a 1,fnz
d6b2 : 08              >            php         ;save flags
d6b3 : c901            >            cmp #1     ;test result
                       >            trap_ne
d6b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6b7 : 68              >            pla         ;load status
d6b8 : 48              >            pha
                       >            cmp_flag fnz
d6b9 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d6bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6bd : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
d6be : a900            >            lda #0             ;allow test to change I
                       >
d6c0 : 48              >            pha         ;use stack to load status
d6c1 : a901            >            lda #1     ;precharge accu
d6c3 : 28              >            plp
                        
d6c4 : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,fnv
d6c6 : 08              >            php         ;save flags
d6c7 : c901            >            cmp #1     ;test result
                       >            trap_ne
d6c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6cb : 68              >            pla         ;load status
d6cc : 48              >            pha
                       >            cmp_flag fnv
d6cd : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d6cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6d1 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------- 6502_functional_test.a65 --------------------------

d6d2 : a9ff            >            lda #$ff             ;allow test to change
                       >
d6d4 : 48              >            pha         ;use stack to load status
d6d5 : a9ff            >            lda #$ff     ;precharge accu
d6d7 : 28              >            plp
                        
d6d8 : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
d6da : 08              >            php         ;save flags
d6db : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d6dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6df : 68              >            pla         ;load status
d6e0 : 48              >            pha
                       >            cmp_flag ~fnv
d6e1 : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d6e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6e5 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
d6e6 : a9ff            >            lda #$ff             ;allow test to change
                       >
d6e8 : 48              >            pha         ;use stack to load status
d6e9 : a901            >            lda #1     ;precharge accu
d6eb : 28              >            plp
                        
d6ec : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
d6ee : 08              >            php         ;save flags
d6ef : c901            >            cmp #1     ;test result
                       >            trap_ne
d6f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6f3 : 68              >            pla         ;load status
d6f4 : 48              >            pha
                       >            cmp_flag ~fnz
d6f5 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d6f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d6f9 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
d6fa : a9ff            >            lda #$ff             ;allow test to change
                       >
d6fc : 48              >            pha         ;use stack to load status
d6fd : a901            >            lda #1     ;precharge accu
d6ff : 28              >            plp
                        
d700 : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clea
                                tst_a 1,~fv
d702 : 08              >            php         ;save flags
d703 : c901            >            cmp #1     ;test result
                       >            trap_ne
d705 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------- 6502_functional_test.a65 --------------------------

                       >
d707 : 68              >            pla         ;load status
d708 : 48              >            pha
                       >            cmp_flag ~fv
d709 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d70b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d70d : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
d70e : a9ff            >            lda #$ff             ;allow test to change
                       >
d710 : 48              >            pha         ;use stack to load status
d711 : a901            >            lda #1     ;precharge accu
d713 : 28              >            plp
                        
d714 : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,~fz
d716 : 08              >            php         ;save flags
d717 : c901            >            cmp #1     ;test result
                       >            trap_ne
d719 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d71b : 68              >            pla         ;load status
d71c : 48              >            pha
                       >            cmp_flag ~fz
d71d : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d71f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d721 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,0
                       >            load_flag 0
d722 : a900            >            lda #0             ;allow test to change I
                       >
d724 : 48              >            pha         ;use stack to load status
d725 : a9ff            >            lda #$ff     ;precharge accu
d727 : 28              >            plp
                        
d728 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz
d72b : 08              >            php         ;save flags
d72c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d72e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d730 : 68              >            pla         ;load status
d731 : 48              >            pha
                       >            cmp_flag fz
d732 : c932            >            cmp #(fz|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d734 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d736 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------- 6502_functional_test.a65 --------------------------

                                set_a 1,0
                       >            load_flag 0
d737 : a900            >            lda #0             ;allow test to change I
                       >
d739 : 48              >            pha         ;use stack to load status
d73a : a901            >            lda #1     ;precharge accu
d73c : 28              >            plp
                        
d73d : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
d740 : 08              >            php         ;save flags
d741 : c901            >            cmp #1     ;test result
                       >            trap_ne
d743 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d745 : 68              >            pla         ;load status
d746 : 48              >            pha
                       >            cmp_flag fv
d747 : c970            >            cmp #(fv|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d749 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d74b : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
d74c : a900            >            lda #0             ;allow test to change I
                       >
d74e : 48              >            pha         ;use stack to load status
d74f : a901            >            lda #1     ;precharge accu
d751 : 28              >            plp
                        
d752 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clea
                                tst_a 1,fnz
d755 : 08              >            php         ;save flags
d756 : c901            >            cmp #1     ;test result
                       >            trap_ne
d758 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d75a : 68              >            pla         ;load status
d75b : 48              >            pha
                       >            cmp_flag fnz
d75c : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d75e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d760 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
d761 : a900            >            lda #0             ;allow test to change I
                       >
d763 : 48              >            pha         ;use stack to load status
d764 : a901            >            lda #1     ;precharge accu
d766 : 28              >            plp
                        
d767 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,fnv
d76a : 08              >            php         ;save flags
d76b : c901            >            cmp #1     ;test result
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
d76d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d76f : 68              >            pla         ;load status
d770 : 48              >            pha
                       >            cmp_flag fnv
d771 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d773 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d775 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,$ff
                       >            load_flag $ff
d776 : a9ff            >            lda #$ff             ;allow test to change
                       >
d778 : 48              >            pha         ;use stack to load status
d779 : a9ff            >            lda #$ff     ;precharge accu
d77b : 28              >            plp
                        
d77c : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
d77f : 08              >            php         ;save flags
d780 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
d782 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d784 : 68              >            pla         ;load status
d785 : 48              >            pha
                       >            cmp_flag ~fnv
d786 : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d788 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d78a : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
d78b : a9ff            >            lda #$ff             ;allow test to change
                       >
d78d : 48              >            pha         ;use stack to load status
d78e : a901            >            lda #1     ;precharge accu
d790 : 28              >            plp
                        
d791 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
d794 : 08              >            php         ;save flags
d795 : c901            >            cmp #1     ;test result
                       >            trap_ne
d797 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d799 : 68              >            pla         ;load status
d79a : 48              >            pha
                       >            cmp_flag ~fnz
d79b : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d79d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------- 6502_functional_test.a65 --------------------------

d79f : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
d7a0 : a9ff            >            lda #$ff             ;allow test to change
                       >
d7a2 : 48              >            pha         ;use stack to load status
d7a3 : a901            >            lda #1     ;precharge accu
d7a5 : 28              >            plp
                        
d7a6 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clea
                                tst_a 1,~fv
d7a9 : 08              >            php         ;save flags
d7aa : c901            >            cmp #1     ;test result
                       >            trap_ne
d7ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7ae : 68              >            pla         ;load status
d7af : 48              >            pha
                       >            cmp_flag ~fv
d7b0 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d7b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7b4 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
d7b5 : a9ff            >            lda #$ff             ;allow test to change
                       >
d7b7 : 48              >            pha         ;use stack to load status
d7b8 : a901            >            lda #1     ;precharge accu
d7ba : 28              >            plp
                        
d7bb : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) /
                                tst_a 1,~fz
d7be : 08              >            php         ;save flags
d7bf : c901            >            cmp #1     ;test result
                       >            trap_ne
d7c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7c3 : 68              >            pla         ;load status
d7c4 : 48              >            pha
                       >            cmp_flag ~fz
d7c5 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d7c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7c9 : 28              >            plp         ;restore status
                        
                                next_test
d7ca : ad0002          >            lda test_case   ;previous test
d7cd : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d7cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
d7d1 : a91a            >            lda #test_num   ;*** next tests' number
d7d3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------- 6502_functional_test.a65 --------------------------

                        
                        
                        ; CPX - zp / abs / #
                                set_x $80,0
                       >            load_flag 0
d7d6 : a900            >            lda #0             ;allow test to change I
                       >
d7d8 : 48              >            pha         ;use stack to load status
d7d9 : a280            >            ldx #$80     ;precharge index x
d7db : 28              >            plp
                        
d7dc : e419                     cpx zp7f
                                tst_stat fc
d7de : 08              >            php         ;save status
d7df : 68              >            pla         ;use stack to retrieve status
d7e0 : 48              >            pha
                       >            cmp_flag fc
d7e1 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d7e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7e5 : 28              >            plp         ;restore status
                        
d7e6 : ca                       dex
d7e7 : e419                     cpx zp7f
                                tst_stat fzc
d7e9 : 08              >            php         ;save status
d7ea : 68              >            pla         ;use stack to retrieve status
d7eb : 48              >            pha
                       >            cmp_flag fzc
d7ec : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d7ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7f0 : 28              >            plp         ;restore status
                        
d7f1 : ca                       dex
d7f2 : e419                     cpx zp7f
                                tst_x $7e,fn
d7f4 : 08              >            php         ;save flags
d7f5 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
d7f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7f9 : 68              >            pla         ;load status
d7fa : 48              >            pha
                       >            cmp_flag fn
d7fb : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d7fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d7ff : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
d800 : a9ff            >            lda #$ff             ;allow test to change
                       >
d802 : 48              >            pha         ;use stack to load status
d803 : a280            >            ldx #$80     ;precharge index x
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------- 6502_functional_test.a65 --------------------------

d805 : 28              >            plp
                        
d806 : e419                     cpx zp7f
                                tst_stat ~fnz
d808 : 08              >            php         ;save status
d809 : 68              >            pla         ;use stack to retrieve status
d80a : 48              >            pha
                       >            cmp_flag ~fnz
d80b : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d80d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d80f : 28              >            plp         ;restore status
                        
d810 : ca                       dex
d811 : e419                     cpx zp7f
                                tst_stat ~fn
d813 : 08              >            php         ;save status
d814 : 68              >            pla         ;use stack to retrieve status
d815 : 48              >            pha
                       >            cmp_flag ~fn
d816 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d818 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d81a : 28              >            plp         ;restore status
                        
d81b : ca                       dex
d81c : e419                     cpx zp7f
                                tst_x $7e,~fzc
d81e : 08              >            php         ;save flags
d81f : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
d821 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d823 : 68              >            pla         ;load status
d824 : 48              >            pha
                       >            cmp_flag ~fzc
d825 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d827 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d829 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
d82a : a900            >            lda #0             ;allow test to change I
                       >
d82c : 48              >            pha         ;use stack to load status
d82d : a280            >            ldx #$80     ;precharge index x
d82f : 28              >            plp
                        
d830 : ec1c02                   cpx abs7f
                                tst_stat fc
d833 : 08              >            php         ;save status
d834 : 68              >            pla         ;use stack to retrieve status
d835 : 48              >            pha
                       >            cmp_flag fc
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------- 6502_functional_test.a65 --------------------------

d836 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d838 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d83a : 28              >            plp         ;restore status
                        
d83b : ca                       dex
d83c : ec1c02                   cpx abs7f
                                tst_stat fzc
d83f : 08              >            php         ;save status
d840 : 68              >            pla         ;use stack to retrieve status
d841 : 48              >            pha
                       >            cmp_flag fzc
d842 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d844 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d846 : 28              >            plp         ;restore status
                        
d847 : ca                       dex
d848 : ec1c02                   cpx abs7f
                                tst_x $7e,fn
d84b : 08              >            php         ;save flags
d84c : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
d84e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d850 : 68              >            pla         ;load status
d851 : 48              >            pha
                       >            cmp_flag fn
d852 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d854 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d856 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
d857 : a9ff            >            lda #$ff             ;allow test to change
                       >
d859 : 48              >            pha         ;use stack to load status
d85a : a280            >            ldx #$80     ;precharge index x
d85c : 28              >            plp
                        
d85d : ec1c02                   cpx abs7f
                                tst_stat ~fnz
d860 : 08              >            php         ;save status
d861 : 68              >            pla         ;use stack to retrieve status
d862 : 48              >            pha
                       >            cmp_flag ~fnz
d863 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d865 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d867 : 28              >            plp         ;restore status
                        
d868 : ca                       dex
d869 : ec1c02                   cpx abs7f
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------- 6502_functional_test.a65 --------------------------

                                tst_stat ~fn
d86c : 08              >            php         ;save status
d86d : 68              >            pla         ;use stack to retrieve status
d86e : 48              >            pha
                       >            cmp_flag ~fn
d86f : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d871 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d873 : 28              >            plp         ;restore status
                        
d874 : ca                       dex
d875 : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
d878 : 08              >            php         ;save flags
d879 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
d87b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d87d : 68              >            pla         ;load status
d87e : 48              >            pha
                       >            cmp_flag ~fzc
d87f : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d881 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d883 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
d884 : a900            >            lda #0             ;allow test to change I
                       >
d886 : 48              >            pha         ;use stack to load status
d887 : a280            >            ldx #$80     ;precharge index x
d889 : 28              >            plp
                        
d88a : e07f                     cpx #$7f
                                tst_stat fc
d88c : 08              >            php         ;save status
d88d : 68              >            pla         ;use stack to retrieve status
d88e : 48              >            pha
                       >            cmp_flag fc
d88f : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d891 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d893 : 28              >            plp         ;restore status
                        
d894 : ca                       dex
d895 : e07f                     cpx #$7f
                                tst_stat fzc
d897 : 08              >            php         ;save status
d898 : 68              >            pla         ;use stack to retrieve status
d899 : 48              >            pha
                       >            cmp_flag fzc
d89a : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------- 6502_functional_test.a65 --------------------------

d89c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d89e : 28              >            plp         ;restore status
                        
d89f : ca                       dex
d8a0 : e07f                     cpx #$7f
                                tst_x $7e,fn
d8a2 : 08              >            php         ;save flags
d8a3 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
d8a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8a7 : 68              >            pla         ;load status
d8a8 : 48              >            pha
                       >            cmp_flag fn
d8a9 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d8ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8ad : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
d8ae : a9ff            >            lda #$ff             ;allow test to change
                       >
d8b0 : 48              >            pha         ;use stack to load status
d8b1 : a280            >            ldx #$80     ;precharge index x
d8b3 : 28              >            plp
                        
d8b4 : e07f                     cpx #$7f
                                tst_stat ~fnz
d8b6 : 08              >            php         ;save status
d8b7 : 68              >            pla         ;use stack to retrieve status
d8b8 : 48              >            pha
                       >            cmp_flag ~fnz
d8b9 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d8bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8bd : 28              >            plp         ;restore status
                        
d8be : ca                       dex
d8bf : e07f                     cpx #$7f
                                tst_stat ~fn
d8c1 : 08              >            php         ;save status
d8c2 : 68              >            pla         ;use stack to retrieve status
d8c3 : 48              >            pha
                       >            cmp_flag ~fn
d8c4 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d8c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8c8 : 28              >            plp         ;restore status
                        
d8c9 : ca                       dex
d8ca : e07f                     cpx #$7f
                                tst_x $7e,~fzc
d8cc : 08              >            php         ;save flags
d8cd : e07e            >            cpx #$7e     ;test result
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
d8cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8d1 : 68              >            pla         ;load status
d8d2 : 48              >            pha
                       >            cmp_flag ~fzc
d8d3 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d8d5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8d7 : 28              >            plp         ;restore status
                        
                                next_test
d8d8 : ad0002          >            lda test_case   ;previous test
d8db : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d8dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
d8df : a91b            >            lda #test_num   ;*** next tests' number
d8e1 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; CPY - zp / abs / #
                                set_y $80,0
                       >            load_flag 0
d8e4 : a900            >            lda #0             ;allow test to change I
                       >
d8e6 : 48              >            pha         ;use stack to load status
d8e7 : a080            >            ldy #$80     ;precharge index y
d8e9 : 28              >            plp
                        
d8ea : c419                     cpy zp7f
                                tst_stat fc
d8ec : 08              >            php         ;save status
d8ed : 68              >            pla         ;use stack to retrieve status
d8ee : 48              >            pha
                       >            cmp_flag fc
d8ef : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d8f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8f3 : 28              >            plp         ;restore status
                        
d8f4 : 88                       dey
d8f5 : c419                     cpy zp7f
                                tst_stat fzc
d8f7 : 08              >            php         ;save status
d8f8 : 68              >            pla         ;use stack to retrieve status
d8f9 : 48              >            pha
                       >            cmp_flag fzc
d8fa : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d8fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d8fe : 28              >            plp         ;restore status
                        
d8ff : 88                       dey
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------- 6502_functional_test.a65 --------------------------

d900 : c419                     cpy zp7f
                                tst_y $7e,fn
d902 : 08              >            php         ;save flags
d903 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
d905 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d907 : 68              >            pla         ;load status
d908 : 48              >            pha
                       >            cmp_flag fn
d909 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d90b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d90d : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
d90e : a9ff            >            lda #$ff             ;allow test to change
                       >
d910 : 48              >            pha         ;use stack to load status
d911 : a080            >            ldy #$80     ;precharge index y
d913 : 28              >            plp
                        
d914 : c419                     cpy zp7f
                                tst_stat ~fnz
d916 : 08              >            php         ;save status
d917 : 68              >            pla         ;use stack to retrieve status
d918 : 48              >            pha
                       >            cmp_flag ~fnz
d919 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d91b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d91d : 28              >            plp         ;restore status
                        
d91e : 88                       dey
d91f : c419                     cpy zp7f
                                tst_stat ~fn
d921 : 08              >            php         ;save status
d922 : 68              >            pla         ;use stack to retrieve status
d923 : 48              >            pha
                       >            cmp_flag ~fn
d924 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d926 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d928 : 28              >            plp         ;restore status
                        
d929 : 88                       dey
d92a : c419                     cpy zp7f
                                tst_y $7e,~fzc
d92c : 08              >            php         ;save flags
d92d : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
d92f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d931 : 68              >            pla         ;load status
d932 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------- 6502_functional_test.a65 --------------------------

                       >            cmp_flag ~fzc
d933 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d935 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d937 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
d938 : a900            >            lda #0             ;allow test to change I
                       >
d93a : 48              >            pha         ;use stack to load status
d93b : a080            >            ldy #$80     ;precharge index y
d93d : 28              >            plp
                        
d93e : cc1c02                   cpy abs7f
                                tst_stat fc
d941 : 08              >            php         ;save status
d942 : 68              >            pla         ;use stack to retrieve status
d943 : 48              >            pha
                       >            cmp_flag fc
d944 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d946 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d948 : 28              >            plp         ;restore status
                        
d949 : 88                       dey
d94a : cc1c02                   cpy abs7f
                                tst_stat fzc
d94d : 08              >            php         ;save status
d94e : 68              >            pla         ;use stack to retrieve status
d94f : 48              >            pha
                       >            cmp_flag fzc
d950 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d952 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d954 : 28              >            plp         ;restore status
                        
d955 : 88                       dey
d956 : cc1c02                   cpy abs7f
                                tst_y $7e,fn
d959 : 08              >            php         ;save flags
d95a : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
d95c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d95e : 68              >            pla         ;load status
d95f : 48              >            pha
                       >            cmp_flag fn
d960 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d962 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d964 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------- 6502_functional_test.a65 --------------------------

                                set_y $80,$ff
                       >            load_flag $ff
d965 : a9ff            >            lda #$ff             ;allow test to change
                       >
d967 : 48              >            pha         ;use stack to load status
d968 : a080            >            ldy #$80     ;precharge index y
d96a : 28              >            plp
                        
d96b : cc1c02                   cpy abs7f
                                tst_stat ~fnz
d96e : 08              >            php         ;save status
d96f : 68              >            pla         ;use stack to retrieve status
d970 : 48              >            pha
                       >            cmp_flag ~fnz
d971 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d973 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d975 : 28              >            plp         ;restore status
                        
d976 : 88                       dey
d977 : cc1c02                   cpy abs7f
                                tst_stat ~fn
d97a : 08              >            php         ;save status
d97b : 68              >            pla         ;use stack to retrieve status
d97c : 48              >            pha
                       >            cmp_flag ~fn
d97d : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d97f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d981 : 28              >            plp         ;restore status
                        
d982 : 88                       dey
d983 : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
d986 : 08              >            php         ;save flags
d987 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
d989 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d98b : 68              >            pla         ;load status
d98c : 48              >            pha
                       >            cmp_flag ~fzc
d98d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d98f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d991 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
d992 : a900            >            lda #0             ;allow test to change I
                       >
d994 : 48              >            pha         ;use stack to load status
d995 : a080            >            ldy #$80     ;precharge index y
d997 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------- 6502_functional_test.a65 --------------------------

d998 : c07f                     cpy #$7f
                                tst_stat fc
d99a : 08              >            php         ;save status
d99b : 68              >            pla         ;use stack to retrieve status
d99c : 48              >            pha
                       >            cmp_flag fc
d99d : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d99f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9a1 : 28              >            plp         ;restore status
                        
d9a2 : 88                       dey
d9a3 : c07f                     cpy #$7f
                                tst_stat fzc
d9a5 : 08              >            php         ;save status
d9a6 : 68              >            pla         ;use stack to retrieve status
d9a7 : 48              >            pha
                       >            cmp_flag fzc
d9a8 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d9aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9ac : 28              >            plp         ;restore status
                        
d9ad : 88                       dey
d9ae : c07f                     cpy #$7f
                                tst_y $7e,fn
d9b0 : 08              >            php         ;save flags
d9b1 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
d9b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9b5 : 68              >            pla         ;load status
d9b6 : 48              >            pha
                       >            cmp_flag fn
d9b7 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
d9b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9bb : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
d9bc : a9ff            >            lda #$ff             ;allow test to change
                       >
d9be : 48              >            pha         ;use stack to load status
d9bf : a080            >            ldy #$80     ;precharge index y
d9c1 : 28              >            plp
                        
d9c2 : c07f                     cpy #$7f
                                tst_stat ~fnz
d9c4 : 08              >            php         ;save status
d9c5 : 68              >            pla         ;use stack to retrieve status
d9c6 : 48              >            pha
                       >            cmp_flag ~fnz
d9c7 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------- 6502_functional_test.a65 --------------------------

d9c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9cb : 28              >            plp         ;restore status
                        
d9cc : 88                       dey
d9cd : c07f                     cpy #$7f
                                tst_stat ~fn
d9cf : 08              >            php         ;save status
d9d0 : 68              >            pla         ;use stack to retrieve status
d9d1 : 48              >            pha
                       >            cmp_flag ~fn
d9d2 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
d9d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9d6 : 28              >            plp         ;restore status
                        
d9d7 : 88                       dey
d9d8 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
d9da : 08              >            php         ;save flags
d9db : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
d9dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9df : 68              >            pla         ;load status
d9e0 : 48              >            pha
                       >            cmp_flag ~fzc
d9e1 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
d9e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9e5 : 28              >            plp         ;restore status
                        
                                next_test
d9e6 : ad0002          >            lda test_case   ;previous test
d9e9 : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
d9eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
d9ed : a91c            >            lda #test_num   ;*** next tests' number
d9ef : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; CMP - zp / abs / #
                                set_a $80,0
                       >            load_flag 0
d9f2 : a900            >            lda #0             ;allow test to change I
                       >
d9f4 : 48              >            pha         ;use stack to load status
d9f5 : a980            >            lda #$80     ;precharge accu
d9f7 : 28              >            plp
                        
d9f8 : c519                     cmp zp7f
                                tst_a $80,fc
d9fa : 08              >            php         ;save flags
d9fb : c980            >            cmp #$80     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------- 6502_functional_test.a65 --------------------------

d9fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
d9ff : 68              >            pla         ;load status
da00 : 48              >            pha
                       >            cmp_flag fc
da01 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
da03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da05 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
da06 : a900            >            lda #0             ;allow test to change I
                       >
da08 : 48              >            pha         ;use stack to load status
da09 : a97f            >            lda #$7f     ;precharge accu
da0b : 28              >            plp
                        
da0c : c519                     cmp zp7f
                                tst_a $7f,fzc
da0e : 08              >            php         ;save flags
da0f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
da11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da13 : 68              >            pla         ;load status
da14 : 48              >            pha
                       >            cmp_flag fzc
da15 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
da17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da19 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
da1a : a900            >            lda #0             ;allow test to change I
                       >
da1c : 48              >            pha         ;use stack to load status
da1d : a97e            >            lda #$7e     ;precharge accu
da1f : 28              >            plp
                        
da20 : c519                     cmp zp7f
                                tst_a $7e,fn
da22 : 08              >            php         ;save flags
da23 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
da25 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da27 : 68              >            pla         ;load status
da28 : 48              >            pha
                       >            cmp_flag fn
da29 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
da2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da2d : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------- 6502_functional_test.a65 --------------------------

                                set_a $80,$ff
                       >            load_flag $ff
da2e : a9ff            >            lda #$ff             ;allow test to change
                       >
da30 : 48              >            pha         ;use stack to load status
da31 : a980            >            lda #$80     ;precharge accu
da33 : 28              >            plp
                        
da34 : c519                     cmp zp7f
                                tst_a $80,~fnz
da36 : 08              >            php         ;save flags
da37 : c980            >            cmp #$80     ;test result
                       >            trap_ne
da39 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da3b : 68              >            pla         ;load status
da3c : 48              >            pha
                       >            cmp_flag ~fnz
da3d : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
da3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da41 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
da42 : a9ff            >            lda #$ff             ;allow test to change
                       >
da44 : 48              >            pha         ;use stack to load status
da45 : a97f            >            lda #$7f     ;precharge accu
da47 : 28              >            plp
                        
da48 : c519                     cmp zp7f
                                tst_a $7f,~fn
da4a : 08              >            php         ;save flags
da4b : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
da4d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da4f : 68              >            pla         ;load status
da50 : 48              >            pha
                       >            cmp_flag ~fn
da51 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
da53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da55 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
da56 : a9ff            >            lda #$ff             ;allow test to change
                       >
da58 : 48              >            pha         ;use stack to load status
da59 : a97e            >            lda #$7e     ;precharge accu
da5b : 28              >            plp
                        
da5c : c519                     cmp zp7f
                                tst_a $7e,~fzc
da5e : 08              >            php         ;save flags
da5f : c97e            >            cmp #$7e     ;test result
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
da61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da63 : 68              >            pla         ;load status
da64 : 48              >            pha
                       >            cmp_flag ~fzc
da65 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
da67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da69 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
da6a : a900            >            lda #0             ;allow test to change I
                       >
da6c : 48              >            pha         ;use stack to load status
da6d : a980            >            lda #$80     ;precharge accu
da6f : 28              >            plp
                        
da70 : cd1c02                   cmp abs7f
                                tst_a $80,fc
da73 : 08              >            php         ;save flags
da74 : c980            >            cmp #$80     ;test result
                       >            trap_ne
da76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da78 : 68              >            pla         ;load status
da79 : 48              >            pha
                       >            cmp_flag fc
da7a : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
da7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da7e : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
da7f : a900            >            lda #0             ;allow test to change I
                       >
da81 : 48              >            pha         ;use stack to load status
da82 : a97f            >            lda #$7f     ;precharge accu
da84 : 28              >            plp
                        
da85 : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
da88 : 08              >            php         ;save flags
da89 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
da8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
da8d : 68              >            pla         ;load status
da8e : 48              >            pha
                       >            cmp_flag fzc
da8f : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
da91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------- 6502_functional_test.a65 --------------------------

da93 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
da94 : a900            >            lda #0             ;allow test to change I
                       >
da96 : 48              >            pha         ;use stack to load status
da97 : a97e            >            lda #$7e     ;precharge accu
da99 : 28              >            plp
                        
da9a : cd1c02                   cmp abs7f
                                tst_a $7e,fn
da9d : 08              >            php         ;save flags
da9e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
daa0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
daa2 : 68              >            pla         ;load status
daa3 : 48              >            pha
                       >            cmp_flag fn
daa4 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
daa6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
daa8 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
daa9 : a9ff            >            lda #$ff             ;allow test to change
                       >
daab : 48              >            pha         ;use stack to load status
daac : a980            >            lda #$80     ;precharge accu
daae : 28              >            plp
                        
daaf : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
dab2 : 08              >            php         ;save flags
dab3 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dab5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dab7 : 68              >            pla         ;load status
dab8 : 48              >            pha
                       >            cmp_flag ~fnz
dab9 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dabb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dabd : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
dabe : a9ff            >            lda #$ff             ;allow test to change
                       >
dac0 : 48              >            pha         ;use stack to load status
dac1 : a97f            >            lda #$7f     ;precharge accu
dac3 : 28              >            plp
                        
dac4 : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------- 6502_functional_test.a65 --------------------------

dac7 : 08              >            php         ;save flags
dac8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
daca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dacc : 68              >            pla         ;load status
dacd : 48              >            pha
                       >            cmp_flag ~fn
dace : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dad0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dad2 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
dad3 : a9ff            >            lda #$ff             ;allow test to change
                       >
dad5 : 48              >            pha         ;use stack to load status
dad6 : a97e            >            lda #$7e     ;precharge accu
dad8 : 28              >            plp
                        
dad9 : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
dadc : 08              >            php         ;save flags
dadd : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dadf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dae1 : 68              >            pla         ;load status
dae2 : 48              >            pha
                       >            cmp_flag ~fzc
dae3 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dae5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dae7 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
dae8 : a900            >            lda #0             ;allow test to change I
                       >
daea : 48              >            pha         ;use stack to load status
daeb : a980            >            lda #$80     ;precharge accu
daed : 28              >            plp
                        
daee : c97f                     cmp #$7f
                                tst_a $80,fc
daf0 : 08              >            php         ;save flags
daf1 : c980            >            cmp #$80     ;test result
                       >            trap_ne
daf3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
daf5 : 68              >            pla         ;load status
daf6 : 48              >            pha
                       >            cmp_flag fc
daf7 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------- 6502_functional_test.a65 --------------------------

daf9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dafb : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
dafc : a900            >            lda #0             ;allow test to change I
                       >
dafe : 48              >            pha         ;use stack to load status
daff : a97f            >            lda #$7f     ;precharge accu
db01 : 28              >            plp
                        
db02 : c97f                     cmp #$7f
                                tst_a $7f,fzc
db04 : 08              >            php         ;save flags
db05 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
db07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db09 : 68              >            pla         ;load status
db0a : 48              >            pha
                       >            cmp_flag fzc
db0b : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
db0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db0f : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
db10 : a900            >            lda #0             ;allow test to change I
                       >
db12 : 48              >            pha         ;use stack to load status
db13 : a97e            >            lda #$7e     ;precharge accu
db15 : 28              >            plp
                        
db16 : c97f                     cmp #$7f
                                tst_a $7e,fn
db18 : 08              >            php         ;save flags
db19 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
db1b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db1d : 68              >            pla         ;load status
db1e : 48              >            pha
                       >            cmp_flag fn
db1f : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
db21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db23 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
db24 : a9ff            >            lda #$ff             ;allow test to change
                       >
db26 : 48              >            pha         ;use stack to load status
db27 : a980            >            lda #$80     ;precharge accu
db29 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------- 6502_functional_test.a65 --------------------------

db2a : c97f                     cmp #$7f
                                tst_a $80,~fnz
db2c : 08              >            php         ;save flags
db2d : c980            >            cmp #$80     ;test result
                       >            trap_ne
db2f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db31 : 68              >            pla         ;load status
db32 : 48              >            pha
                       >            cmp_flag ~fnz
db33 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
db35 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db37 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
db38 : a9ff            >            lda #$ff             ;allow test to change
                       >
db3a : 48              >            pha         ;use stack to load status
db3b : a97f            >            lda #$7f     ;precharge accu
db3d : 28              >            plp
                        
db3e : c97f                     cmp #$7f
                                tst_a $7f,~fn
db40 : 08              >            php         ;save flags
db41 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
db43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db45 : 68              >            pla         ;load status
db46 : 48              >            pha
                       >            cmp_flag ~fn
db47 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
db49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db4b : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
db4c : a9ff            >            lda #$ff             ;allow test to change
                       >
db4e : 48              >            pha         ;use stack to load status
db4f : a97e            >            lda #$7e     ;precharge accu
db51 : 28              >            plp
                        
db52 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
db54 : 08              >            php         ;save flags
db55 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
db57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db59 : 68              >            pla         ;load status
db5a : 48              >            pha
                       >            cmp_flag ~fzc
db5b : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
db5d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db5f : 28              >            plp         ;restore status
                        
                        
db60 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
db62 : a900            >            lda #0             ;allow test to change I
                       >
db64 : 48              >            pha         ;use stack to load status
db65 : a980            >            lda #$80     ;precharge accu
db67 : 28              >            plp
                        
db68 : d515                     cmp zp1,x
                                tst_a $80,fc
db6a : 08              >            php         ;save flags
db6b : c980            >            cmp #$80     ;test result
                       >            trap_ne
db6d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db6f : 68              >            pla         ;load status
db70 : 48              >            pha
                       >            cmp_flag fc
db71 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
db73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db75 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
db76 : a900            >            lda #0             ;allow test to change I
                       >
db78 : 48              >            pha         ;use stack to load status
db79 : a97f            >            lda #$7f     ;precharge accu
db7b : 28              >            plp
                        
db7c : d515                     cmp zp1,x
                                tst_a $7f,fzc
db7e : 08              >            php         ;save flags
db7f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
db81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db83 : 68              >            pla         ;load status
db84 : 48              >            pha
                       >            cmp_flag fzc
db85 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
db87 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db89 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
db8a : a900            >            lda #0             ;allow test to change I
                       >
db8c : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------- 6502_functional_test.a65 --------------------------

db8d : a97e            >            lda #$7e     ;precharge accu
db8f : 28              >            plp
                        
db90 : d515                     cmp zp1,x
                                tst_a $7e,fn
db92 : 08              >            php         ;save flags
db93 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
db95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db97 : 68              >            pla         ;load status
db98 : 48              >            pha
                       >            cmp_flag fn
db99 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
db9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
db9d : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
db9e : a9ff            >            lda #$ff             ;allow test to change
                       >
dba0 : 48              >            pha         ;use stack to load status
dba1 : a980            >            lda #$80     ;precharge accu
dba3 : 28              >            plp
                        
dba4 : d515                     cmp zp1,x
                                tst_a $80,~fnz
dba6 : 08              >            php         ;save flags
dba7 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dba9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbab : 68              >            pla         ;load status
dbac : 48              >            pha
                       >            cmp_flag ~fnz
dbad : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dbaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbb1 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
dbb2 : a9ff            >            lda #$ff             ;allow test to change
                       >
dbb4 : 48              >            pha         ;use stack to load status
dbb5 : a97f            >            lda #$7f     ;precharge accu
dbb7 : 28              >            plp
                        
dbb8 : d515                     cmp zp1,x
                                tst_a $7f,~fn
dbba : 08              >            php         ;save flags
dbbb : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dbbd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbbf : 68              >            pla         ;load status
dbc0 : 48              >            pha
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------- 6502_functional_test.a65 --------------------------

                       >            cmp_flag ~fn
dbc1 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dbc3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbc5 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
dbc6 : a9ff            >            lda #$ff             ;allow test to change
                       >
dbc8 : 48              >            pha         ;use stack to load status
dbc9 : a97e            >            lda #$7e     ;precharge accu
dbcb : 28              >            plp
                        
dbcc : d515                     cmp zp1,x
                                tst_a $7e,~fzc
dbce : 08              >            php         ;save flags
dbcf : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dbd1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbd3 : 68              >            pla         ;load status
dbd4 : 48              >            pha
                       >            cmp_flag ~fzc
dbd5 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dbd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbd9 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
dbda : a900            >            lda #0             ;allow test to change I
                       >
dbdc : 48              >            pha         ;use stack to load status
dbdd : a980            >            lda #$80     ;precharge accu
dbdf : 28              >            plp
                        
dbe0 : dd1802                   cmp abs1,x
                                tst_a $80,fc
dbe3 : 08              >            php         ;save flags
dbe4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dbe6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbe8 : 68              >            pla         ;load status
dbe9 : 48              >            pha
                       >            cmp_flag fc
dbea : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
dbec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbee : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
dbef : a900            >            lda #0             ;allow test to change I
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------- 6502_functional_test.a65 --------------------------

                       >
dbf1 : 48              >            pha         ;use stack to load status
dbf2 : a97f            >            lda #$7f     ;precharge accu
dbf4 : 28              >            plp
                        
dbf5 : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
dbf8 : 08              >            php         ;save flags
dbf9 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dbfb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dbfd : 68              >            pla         ;load status
dbfe : 48              >            pha
                       >            cmp_flag fzc
dbff : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dc01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc03 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
dc04 : a900            >            lda #0             ;allow test to change I
                       >
dc06 : 48              >            pha         ;use stack to load status
dc07 : a97e            >            lda #$7e     ;precharge accu
dc09 : 28              >            plp
                        
dc0a : dd1802                   cmp abs1,x
                                tst_a $7e,fn
dc0d : 08              >            php         ;save flags
dc0e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dc10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc12 : 68              >            pla         ;load status
dc13 : 48              >            pha
                       >            cmp_flag fn
dc14 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
dc16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc18 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
dc19 : a9ff            >            lda #$ff             ;allow test to change
                       >
dc1b : 48              >            pha         ;use stack to load status
dc1c : a980            >            lda #$80     ;precharge accu
dc1e : 28              >            plp
                        
dc1f : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
dc22 : 08              >            php         ;save flags
dc23 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dc25 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------- 6502_functional_test.a65 --------------------------

dc27 : 68              >            pla         ;load status
dc28 : 48              >            pha
                       >            cmp_flag ~fnz
dc29 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dc2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc2d : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
dc2e : a9ff            >            lda #$ff             ;allow test to change
                       >
dc30 : 48              >            pha         ;use stack to load status
dc31 : a97f            >            lda #$7f     ;precharge accu
dc33 : 28              >            plp
                        
dc34 : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
dc37 : 08              >            php         ;save flags
dc38 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dc3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc3c : 68              >            pla         ;load status
dc3d : 48              >            pha
                       >            cmp_flag ~fn
dc3e : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dc40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc42 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
dc43 : a9ff            >            lda #$ff             ;allow test to change
                       >
dc45 : 48              >            pha         ;use stack to load status
dc46 : a97e            >            lda #$7e     ;precharge accu
dc48 : 28              >            plp
                        
dc49 : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
dc4c : 08              >            php         ;save flags
dc4d : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dc4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc51 : 68              >            pla         ;load status
dc52 : 48              >            pha
                       >            cmp_flag ~fzc
dc53 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dc55 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc57 : 28              >            plp         ;restore status
                        
                        
dc58 : a004                     ldy #4          ;with indexing by Y
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------- 6502_functional_test.a65 --------------------------

dc5a : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
dc5c : a900            >            lda #0             ;allow test to change I
                       >
dc5e : 48              >            pha         ;use stack to load status
dc5f : a980            >            lda #$80     ;precharge accu
dc61 : 28              >            plp
                        
dc62 : d91802                   cmp abs1,y
                                tst_a $80,fc
dc65 : 08              >            php         ;save flags
dc66 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dc68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc6a : 68              >            pla         ;load status
dc6b : 48              >            pha
                       >            cmp_flag fc
dc6c : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
dc6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc70 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
dc71 : a900            >            lda #0             ;allow test to change I
                       >
dc73 : 48              >            pha         ;use stack to load status
dc74 : a97f            >            lda #$7f     ;precharge accu
dc76 : 28              >            plp
                        
dc77 : d91802                   cmp abs1,y
                                tst_a $7f,fzc
dc7a : 08              >            php         ;save flags
dc7b : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dc7d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc7f : 68              >            pla         ;load status
dc80 : 48              >            pha
                       >            cmp_flag fzc
dc81 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dc83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc85 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
dc86 : a900            >            lda #0             ;allow test to change I
                       >
dc88 : 48              >            pha         ;use stack to load status
dc89 : a97e            >            lda #$7e     ;precharge accu
dc8b : 28              >            plp
                        
dc8c : d91802                   cmp abs1,y
                                tst_a $7e,fn
dc8f : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------- 6502_functional_test.a65 --------------------------

dc90 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dc92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc94 : 68              >            pla         ;load status
dc95 : 48              >            pha
                       >            cmp_flag fn
dc96 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
dc98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dc9a : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
dc9b : a9ff            >            lda #$ff             ;allow test to change
                       >
dc9d : 48              >            pha         ;use stack to load status
dc9e : a980            >            lda #$80     ;precharge accu
dca0 : 28              >            plp
                        
dca1 : d91802                   cmp abs1,y
                                tst_a $80,~fnz
dca4 : 08              >            php         ;save flags
dca5 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dca7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dca9 : 68              >            pla         ;load status
dcaa : 48              >            pha
                       >            cmp_flag ~fnz
dcab : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dcad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcaf : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
dcb0 : a9ff            >            lda #$ff             ;allow test to change
                       >
dcb2 : 48              >            pha         ;use stack to load status
dcb3 : a97f            >            lda #$7f     ;precharge accu
dcb5 : 28              >            plp
                        
dcb6 : d91802                   cmp abs1,y
                                tst_a $7f,~fn
dcb9 : 08              >            php         ;save flags
dcba : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dcbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcbe : 68              >            pla         ;load status
dcbf : 48              >            pha
                       >            cmp_flag ~fn
dcc0 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dcc2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------- 6502_functional_test.a65 --------------------------

dcc4 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
dcc5 : a9ff            >            lda #$ff             ;allow test to change
                       >
dcc7 : 48              >            pha         ;use stack to load status
dcc8 : a97e            >            lda #$7e     ;precharge accu
dcca : 28              >            plp
                        
dccb : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
dcce : 08              >            php         ;save flags
dccf : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dcd1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcd3 : 68              >            pla         ;load status
dcd4 : 48              >            pha
                       >            cmp_flag ~fzc
dcd5 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dcd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcd9 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
dcda : a900            >            lda #0             ;allow test to change I
                       >
dcdc : 48              >            pha         ;use stack to load status
dcdd : a980            >            lda #$80     ;precharge accu
dcdf : 28              >            plp
                        
dce0 : c126                     cmp (ind1,x)
                                tst_a $80,fc
dce2 : 08              >            php         ;save flags
dce3 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dce5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dce7 : 68              >            pla         ;load status
dce8 : 48              >            pha
                       >            cmp_flag fc
dce9 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
dceb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dced : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
dcee : a900            >            lda #0             ;allow test to change I
                       >
dcf0 : 48              >            pha         ;use stack to load status
dcf1 : a97f            >            lda #$7f     ;precharge accu
dcf3 : 28              >            plp
                        
dcf4 : c126                     cmp (ind1,x)
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------- 6502_functional_test.a65 --------------------------

                                tst_a $7f,fzc
dcf6 : 08              >            php         ;save flags
dcf7 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dcf9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dcfb : 68              >            pla         ;load status
dcfc : 48              >            pha
                       >            cmp_flag fzc
dcfd : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dcff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd01 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
dd02 : a900            >            lda #0             ;allow test to change I
                       >
dd04 : 48              >            pha         ;use stack to load status
dd05 : a97e            >            lda #$7e     ;precharge accu
dd07 : 28              >            plp
                        
dd08 : c126                     cmp (ind1,x)
                                tst_a $7e,fn
dd0a : 08              >            php         ;save flags
dd0b : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dd0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd0f : 68              >            pla         ;load status
dd10 : 48              >            pha
                       >            cmp_flag fn
dd11 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
dd13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd15 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
dd16 : a9ff            >            lda #$ff             ;allow test to change
                       >
dd18 : 48              >            pha         ;use stack to load status
dd19 : a980            >            lda #$80     ;precharge accu
dd1b : 28              >            plp
                        
dd1c : c126                     cmp (ind1,x)
                                tst_a $80,~fnz
dd1e : 08              >            php         ;save flags
dd1f : c980            >            cmp #$80     ;test result
                       >            trap_ne
dd21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd23 : 68              >            pla         ;load status
dd24 : 48              >            pha
                       >            cmp_flag ~fnz
dd25 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------- 6502_functional_test.a65 --------------------------

dd27 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd29 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
dd2a : a9ff            >            lda #$ff             ;allow test to change
                       >
dd2c : 48              >            pha         ;use stack to load status
dd2d : a97f            >            lda #$7f     ;precharge accu
dd2f : 28              >            plp
                        
dd30 : c126                     cmp (ind1,x)
                                tst_a $7f,~fn
dd32 : 08              >            php         ;save flags
dd33 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dd35 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd37 : 68              >            pla         ;load status
dd38 : 48              >            pha
                       >            cmp_flag ~fn
dd39 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dd3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd3d : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
dd3e : a9ff            >            lda #$ff             ;allow test to change
                       >
dd40 : 48              >            pha         ;use stack to load status
dd41 : a97e            >            lda #$7e     ;precharge accu
dd43 : 28              >            plp
                        
dd44 : c126                     cmp (ind1,x)
                                tst_a $7e,~fzc
dd46 : 08              >            php         ;save flags
dd47 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dd49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd4b : 68              >            pla         ;load status
dd4c : 48              >            pha
                       >            cmp_flag ~fzc
dd4d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dd4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd51 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
dd52 : a900            >            lda #0             ;allow test to change I
                       >
dd54 : 48              >            pha         ;use stack to load status
dd55 : a980            >            lda #$80     ;precharge accu
dd57 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------- 6502_functional_test.a65 --------------------------

                        
dd58 : d126                     cmp (ind1),y
                                tst_a $80,fc
dd5a : 08              >            php         ;save flags
dd5b : c980            >            cmp #$80     ;test result
                       >            trap_ne
dd5d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd5f : 68              >            pla         ;load status
dd60 : 48              >            pha
                       >            cmp_flag fc
dd61 : c931            >            cmp #(fc|fao)&m8    ;expected flags + alwa
                       >
                       >            trap_ne
dd63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd65 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
dd66 : a900            >            lda #0             ;allow test to change I
                       >
dd68 : 48              >            pha         ;use stack to load status
dd69 : a97f            >            lda #$7f     ;precharge accu
dd6b : 28              >            plp
                        
dd6c : d126                     cmp (ind1),y
                                tst_a $7f,fzc
dd6e : 08              >            php         ;save flags
dd6f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
dd71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd73 : 68              >            pla         ;load status
dd74 : 48              >            pha
                       >            cmp_flag fzc
dd75 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
dd77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd79 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
dd7a : a900            >            lda #0             ;allow test to change I
                       >
dd7c : 48              >            pha         ;use stack to load status
dd7d : a97e            >            lda #$7e     ;precharge accu
dd7f : 28              >            plp
                        
dd80 : d126                     cmp (ind1),y
                                tst_a $7e,fn
dd82 : 08              >            php         ;save flags
dd83 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
dd85 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd87 : 68              >            pla         ;load status
dd88 : 48              >            pha
                       >            cmp_flag fn
dd89 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + alwa
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------- 6502_functional_test.a65 --------------------------

                       >
                       >            trap_ne
dd8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd8d : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
dd8e : a9ff            >            lda #$ff             ;allow test to change
                       >
dd90 : 48              >            pha         ;use stack to load status
dd91 : a980            >            lda #$80     ;precharge accu
dd93 : 28              >            plp
                        
dd94 : d126                     cmp (ind1),y
                                tst_a $80,~fnz
dd96 : 08              >            php         ;save flags
dd97 : c980            >            cmp #$80     ;test result
                       >            trap_ne
dd99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dd9b : 68              >            pla         ;load status
dd9c : 48              >            pha
                       >            cmp_flag ~fnz
dd9d : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
dd9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dda1 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
dda2 : a9ff            >            lda #$ff             ;allow test to change
                       >
dda4 : 48              >            pha         ;use stack to load status
dda5 : a97f            >            lda #$7f     ;precharge accu
dda7 : 28              >            plp
                        
dda8 : d126                     cmp (ind1),y
                                tst_a $7f,~fn
ddaa : 08              >            php         ;save flags
ddab : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
ddad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddaf : 68              >            pla         ;load status
ddb0 : 48              >            pha
                       >            cmp_flag ~fn
ddb1 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + alw
                       >
                       >            trap_ne
ddb3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddb5 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
ddb6 : a9ff            >            lda #$ff             ;allow test to change
                       >
ddb8 : 48              >            pha         ;use stack to load status
ddb9 : a97e            >            lda #$7e     ;precharge accu
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------- 6502_functional_test.a65 --------------------------

ddbb : 28              >            plp
                        
ddbc : d126                     cmp (ind1),y
                                tst_a $7e,~fzc
ddbe : 08              >            php         ;save flags
ddbf : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
ddc1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddc3 : 68              >            pla         ;load status
ddc4 : 48              >            pha
                       >            cmp_flag ~fzc
ddc5 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + al
                       >
                       >            trap_ne
ddc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddc9 : 28              >            plp         ;restore status
                        
                                next_test
ddca : ad0002          >            lda test_case   ;previous test
ddcd : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ddcf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
ddd1 : a91d            >            lda #test_num   ;*** next tests' number
ddd3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing mode
                        ; shifts - accumulator
ddd6 : a205                     ldx #5
ddd8 :                  tasl
                                set_ax zps,0
                       >            load_flag 0
ddd8 : a900            >            lda #0             ;allow test to change I
                       >
ddda : 48              >            pha         ;use stack to load status
dddb : b513            >            lda zps,x    ;precharge accu
dddd : 28              >            plp
                        
ddde : 0a                       asl a
                                tst_ax rASL,fASL,0
dddf : 08              >            php         ;save flags
dde0 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
dde3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dde5 : 68              >            pla         ;load status
                       >            eor_flag 0
dde6 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
dde8 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
ddeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
dded : ca                       dex
ddee : 10e8                     bpl tasl
ddf0 : a205                     ldx #5
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------- 6502_functional_test.a65 --------------------------

ddf2 :                  tasl1
                                set_ax zps,$ff
                       >            load_flag $ff
ddf2 : a9ff            >            lda #$ff             ;allow test to change
                       >
ddf4 : 48              >            pha         ;use stack to load status
ddf5 : b513            >            lda zps,x    ;precharge accu
ddf7 : 28              >            plp
                        
ddf8 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
ddf9 : 08              >            php         ;save flags
ddfa : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
ddfd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ddff : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
de00 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
de02 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
de05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
de07 : ca                       dex
de08 : 10e8                     bpl tasl1
                        
de0a : a205                     ldx #5
de0c :                  tlsr
                                set_ax zps,0
                       >            load_flag 0
de0c : a900            >            lda #0             ;allow test to change I
                       >
de0e : 48              >            pha         ;use stack to load status
de0f : b513            >            lda zps,x    ;precharge accu
de11 : 28              >            plp
                        
de12 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
de13 : 08              >            php         ;save flags
de14 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
de17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de19 : 68              >            pla         ;load status
                       >            eor_flag 0
de1a : 4930            >            eor #0|fao         ;invert expected flags 
                       >
de1c : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
de1f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
de21 : ca                       dex
de22 : 10e8                     bpl tlsr
de24 : a205                     ldx #5
de26 :                  tlsr1
                                set_ax zps,$ff
                       >            load_flag $ff
de26 : a9ff            >            lda #$ff             ;allow test to change
                       >
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------- 6502_functional_test.a65 --------------------------

de28 : 48              >            pha         ;use stack to load status
de29 : b513            >            lda zps,x    ;precharge accu
de2b : 28              >            plp
                        
de2c : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
de2d : 08              >            php         ;save flags
de2e : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
de31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de33 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
de34 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
de36 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
de39 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
de3b : ca                       dex
de3c : 10e8                     bpl tlsr1
                        
de3e : a205                     ldx #5
de40 :                  trol
                                set_ax zps,0
                       >            load_flag 0
de40 : a900            >            lda #0             ;allow test to change I
                       >
de42 : 48              >            pha         ;use stack to load status
de43 : b513            >            lda zps,x    ;precharge accu
de45 : 28              >            plp
                        
de46 : 2a                       rol a
                                tst_ax rROL,fROL,0
de47 : 08              >            php         ;save flags
de48 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
de4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de4d : 68              >            pla         ;load status
                       >            eor_flag 0
de4e : 4930            >            eor #0|fao         ;invert expected flags 
                       >
de50 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
de53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
de55 : ca                       dex
de56 : 10e8                     bpl trol
de58 : a205                     ldx #5
de5a :                  trol1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
de5a : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
de5c : 48              >            pha         ;use stack to load status
de5d : b513            >            lda zps,x    ;precharge accu
de5f : 28              >            plp
                        
de60 : 2a                       rol a
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------- 6502_functional_test.a65 --------------------------

                                tst_ax rROL,fROL,$ff-fnzc
de61 : 08              >            php         ;save flags
de62 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
de65 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de67 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
de68 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
de6a : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
de6d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
de6f : ca                       dex
de70 : 10e8                     bpl trol1
                        
de72 : a205                     ldx #5
de74 :                  trolc
                                set_ax zps,fc
                       >            load_flag fc
de74 : a901            >            lda #fc             ;allow test to change 
                       >
de76 : 48              >            pha         ;use stack to load status
de77 : b513            >            lda zps,x    ;precharge accu
de79 : 28              >            plp
                        
de7a : 2a                       rol a
                                tst_ax rROLc,fROLc,0
de7b : 08              >            php         ;save flags
de7c : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
de7f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
de81 : 68              >            pla         ;load status
                       >            eor_flag 0
de82 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
de84 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
de87 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
de89 : ca                       dex
de8a : 10e8                     bpl trolc
de8c : a205                     ldx #5
de8e :                  trolc1
                                set_ax zps,$ff
                       >            load_flag $ff
de8e : a9ff            >            lda #$ff             ;allow test to change
                       >
de90 : 48              >            pha         ;use stack to load status
de91 : b513            >            lda zps,x    ;precharge accu
de93 : 28              >            plp
                        
de94 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
de95 : 08              >            php         ;save flags
de96 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
de99 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------- 6502_functional_test.a65 --------------------------

                       >
de9b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
de9c : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
de9e : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
dea1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
dea3 : ca                       dex
dea4 : 10e8                     bpl trolc1
                        
dea6 : a205                     ldx #5
dea8 :                  tror
                                set_ax zps,0
                       >            load_flag 0
dea8 : a900            >            lda #0             ;allow test to change I
                       >
deaa : 48              >            pha         ;use stack to load status
deab : b513            >            lda zps,x    ;precharge accu
dead : 28              >            plp
                        
deae : 6a                       ror a
                                tst_ax rROR,fROR,0
deaf : 08              >            php         ;save flags
deb0 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
deb3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
deb5 : 68              >            pla         ;load status
                       >            eor_flag 0
deb6 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
deb8 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
debb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
debd : ca                       dex
debe : 10e8                     bpl tror
dec0 : a205                     ldx #5
dec2 :                  tror1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
dec2 : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
dec4 : 48              >            pha         ;use stack to load status
dec5 : b513            >            lda zps,x    ;precharge accu
dec7 : 28              >            plp
                        
dec8 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
dec9 : 08              >            php         ;save flags
deca : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
decd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
decf : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
ded0 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------- 6502_functional_test.a65 --------------------------

ded2 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
ded5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ded7 : ca                       dex
ded8 : 10e8                     bpl tror1
                        
deda : a205                     ldx #5
dedc :                  trorc
                                set_ax zps,fc
                       >            load_flag fc
dedc : a901            >            lda #fc             ;allow test to change 
                       >
dede : 48              >            pha         ;use stack to load status
dedf : b513            >            lda zps,x    ;precharge accu
dee1 : 28              >            plp
                        
dee2 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
dee3 : 08              >            php         ;save flags
dee4 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
dee7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dee9 : 68              >            pla         ;load status
                       >            eor_flag 0
deea : 4930            >            eor #0|fao         ;invert expected flags 
                       >
deec : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
deef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
def1 : ca                       dex
def2 : 10e8                     bpl trorc
def4 : a205                     ldx #5
def6 :                  trorc1
                                set_ax zps,$ff
                       >            load_flag $ff
def6 : a9ff            >            lda #$ff             ;allow test to change
                       >
def8 : 48              >            pha         ;use stack to load status
def9 : b513            >            lda zps,x    ;precharge accu
defb : 28              >            plp
                        
defc : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
defd : 08              >            php         ;save flags
defe : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
df01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df03 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
df04 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
df06 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
df09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------- 6502_functional_test.a65 --------------------------

df0b : ca                       dex
df0c : 10e8                     bpl trorc1
                                next_test
df0e : ad0002          >            lda test_case   ;previous test
df11 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
df13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
df15 : a91e            >            lda #test_num   ;*** next tests' number
df17 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; shifts - zeropage
df1a : a205                     ldx #5
df1c :                  tasl2
                                set_z zps,0
                       >            load_flag 0
df1c : a900            >            lda #0             ;allow test to change I
                       >
df1e : 48              >            pha         ;use stack to load status
df1f : b513            >            lda zps,x    ;load to zeropage
df21 : 850c            >            sta zpt
df23 : 28              >            plp
                        
df24 : 060c                     asl zpt
                                tst_z rASL,fASL,0
df26 : 08              >            php         ;save flags
df27 : a50c            >            lda zpt
df29 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
df2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df2e : 68              >            pla         ;load status
                       >            eor_flag 0
df2f : 4930            >            eor #0|fao         ;invert expected flags 
                       >
df31 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
df34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
df36 : ca                       dex
df37 : 10e3                     bpl tasl2
df39 : a205                     ldx #5
df3b :                  tasl3
                                set_z zps,$ff
                       >            load_flag $ff
df3b : a9ff            >            lda #$ff             ;allow test to change
                       >
df3d : 48              >            pha         ;use stack to load status
df3e : b513            >            lda zps,x    ;load to zeropage
df40 : 850c            >            sta zpt
df42 : 28              >            plp
                        
df43 : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
df45 : 08              >            php         ;save flags
df46 : a50c            >            lda zpt
df48 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------- 6502_functional_test.a65 --------------------------

df4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df4d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
df4e : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
df50 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
df53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
df55 : ca                       dex
df56 : 10e3                     bpl tasl3
                        
df58 : a205                     ldx #5
df5a :                  tlsr2
                                set_z zps,0
                       >            load_flag 0
df5a : a900            >            lda #0             ;allow test to change I
                       >
df5c : 48              >            pha         ;use stack to load status
df5d : b513            >            lda zps,x    ;load to zeropage
df5f : 850c            >            sta zpt
df61 : 28              >            plp
                        
df62 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
df64 : 08              >            php         ;save flags
df65 : a50c            >            lda zpt
df67 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
df6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
df6c : 68              >            pla         ;load status
                       >            eor_flag 0
df6d : 4930            >            eor #0|fao         ;invert expected flags 
                       >
df6f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
df72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
df74 : ca                       dex
df75 : 10e3                     bpl tlsr2
df77 : a205                     ldx #5
df79 :                  tlsr3
                                set_z zps,$ff
                       >            load_flag $ff
df79 : a9ff            >            lda #$ff             ;allow test to change
                       >
df7b : 48              >            pha         ;use stack to load status
df7c : b513            >            lda zps,x    ;load to zeropage
df7e : 850c            >            sta zpt
df80 : 28              >            plp
                        
df81 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
df83 : 08              >            php         ;save flags
df84 : a50c            >            lda zpt
df86 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
df89 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------- 6502_functional_test.a65 --------------------------

                       >
df8b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
df8c : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
df8e : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
df91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
df93 : ca                       dex
df94 : 10e3                     bpl tlsr3
                        
df96 : a205                     ldx #5
df98 :                  trol2
                                set_z zps,0
                       >            load_flag 0
df98 : a900            >            lda #0             ;allow test to change I
                       >
df9a : 48              >            pha         ;use stack to load status
df9b : b513            >            lda zps,x    ;load to zeropage
df9d : 850c            >            sta zpt
df9f : 28              >            plp
                        
dfa0 : 260c                     rol zpt
                                tst_z rROL,fROL,0
dfa2 : 08              >            php         ;save flags
dfa3 : a50c            >            lda zpt
dfa5 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
dfa8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dfaa : 68              >            pla         ;load status
                       >            eor_flag 0
dfab : 4930            >            eor #0|fao         ;invert expected flags 
                       >
dfad : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
dfb0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
dfb2 : ca                       dex
dfb3 : 10e3                     bpl trol2
dfb5 : a205                     ldx #5
dfb7 :                  trol3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
dfb7 : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
dfb9 : 48              >            pha         ;use stack to load status
dfba : b513            >            lda zps,x    ;load to zeropage
dfbc : 850c            >            sta zpt
dfbe : 28              >            plp
                        
dfbf : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
dfc1 : 08              >            php         ;save flags
dfc2 : a50c            >            lda zpt
dfc4 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
dfc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------- 6502_functional_test.a65 --------------------------

dfc9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
dfca : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
dfcc : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
dfcf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
dfd1 : ca                       dex
dfd2 : 10e3                     bpl trol3
                        
dfd4 : a205                     ldx #5
dfd6 :                  trolc2
                                set_z zps,fc
                       >            load_flag fc
dfd6 : a901            >            lda #fc             ;allow test to change 
                       >
dfd8 : 48              >            pha         ;use stack to load status
dfd9 : b513            >            lda zps,x    ;load to zeropage
dfdb : 850c            >            sta zpt
dfdd : 28              >            plp
                        
dfde : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
dfe0 : 08              >            php         ;save flags
dfe1 : a50c            >            lda zpt
dfe3 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
dfe6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
dfe8 : 68              >            pla         ;load status
                       >            eor_flag 0
dfe9 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
dfeb : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
dfee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
dff0 : ca                       dex
dff1 : 10e3                     bpl trolc2
dff3 : a205                     ldx #5
dff5 :                  trolc3
                                set_z zps,$ff
                       >            load_flag $ff
dff5 : a9ff            >            lda #$ff             ;allow test to change
                       >
dff7 : 48              >            pha         ;use stack to load status
dff8 : b513            >            lda zps,x    ;load to zeropage
dffa : 850c            >            sta zpt
dffc : 28              >            plp
                        
dffd : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
dfff : 08              >            php         ;save flags
e000 : a50c            >            lda zpt
e002 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
e005 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e007 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------- 6502_functional_test.a65 --------------------------

                       >            eor_flag $ff-fnzc
e008 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e00a : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
e00d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e00f : ca                       dex
e010 : 10e3                     bpl trolc3
                        
e012 : a205                     ldx #5
e014 :                  tror2
                                set_z zps,0
                       >            load_flag 0
e014 : a900            >            lda #0             ;allow test to change I
                       >
e016 : 48              >            pha         ;use stack to load status
e017 : b513            >            lda zps,x    ;load to zeropage
e019 : 850c            >            sta zpt
e01b : 28              >            plp
                        
e01c : 660c                     ror zpt
                                tst_z rROR,fROR,0
e01e : 08              >            php         ;save flags
e01f : a50c            >            lda zpt
e021 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e024 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e026 : 68              >            pla         ;load status
                       >            eor_flag 0
e027 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e029 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e02c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e02e : ca                       dex
e02f : 10e3                     bpl tror2
e031 : a205                     ldx #5
e033 :                  tror3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
e033 : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
e035 : 48              >            pha         ;use stack to load status
e036 : b513            >            lda zps,x    ;load to zeropage
e038 : 850c            >            sta zpt
e03a : 28              >            plp
                        
e03b : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
e03d : 08              >            php         ;save flags
e03e : a50c            >            lda zpt
e040 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e043 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e045 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------- 6502_functional_test.a65 --------------------------

e046 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e048 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e04b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e04d : ca                       dex
e04e : 10e3                     bpl tror3
                        
e050 : a205                     ldx #5
e052 :                  trorc2
                                set_z zps,fc
                       >            load_flag fc
e052 : a901            >            lda #fc             ;allow test to change 
                       >
e054 : 48              >            pha         ;use stack to load status
e055 : b513            >            lda zps,x    ;load to zeropage
e057 : 850c            >            sta zpt
e059 : 28              >            plp
                        
e05a : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
e05c : 08              >            php         ;save flags
e05d : a50c            >            lda zpt
e05f : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
e062 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e064 : 68              >            pla         ;load status
                       >            eor_flag 0
e065 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e067 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e06a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e06c : ca                       dex
e06d : 10e3                     bpl trorc2
e06f : a205                     ldx #5
e071 :                  trorc3
                                set_z zps,$ff
                       >            load_flag $ff
e071 : a9ff            >            lda #$ff             ;allow test to change
                       >
e073 : 48              >            pha         ;use stack to load status
e074 : b513            >            lda zps,x    ;load to zeropage
e076 : 850c            >            sta zpt
e078 : 28              >            plp
                        
e079 : 660c                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
e07b : 08              >            php         ;save flags
e07c : a50c            >            lda zpt
e07e : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
e081 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e083 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e084 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------- 6502_functional_test.a65 --------------------------

                       >
e086 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e089 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e08b : ca                       dex
e08c : 10e3                     bpl trorc3
                                next_test
e08e : ad0002          >            lda test_case   ;previous test
e091 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e093 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
e095 : a91f            >            lda #test_num   ;*** next tests' number
e097 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; shifts - absolute
e09a : a205                     ldx #5
e09c :                  tasl4
                                set_abs zps,0
                       >            load_flag 0
e09c : a900            >            lda #0             ;allow test to change I
                       >
e09e : 48              >            pha         ;use stack to load status
e09f : b513            >            lda zps,x    ;load to memory
e0a1 : 8d0302          >            sta abst
e0a4 : 28              >            plp
                        
e0a5 : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
e0a8 : 08              >            php         ;save flags
e0a9 : ad0302          >            lda abst
e0ac : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
e0af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e0b1 : 68              >            pla         ;load status
                       >            eor_flag 0
e0b2 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e0b4 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
e0b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e0b9 : ca                       dex
e0ba : 10e0                     bpl tasl4
e0bc : a205                     ldx #5
e0be :                  tasl5
                                set_abs zps,$ff
                       >            load_flag $ff
e0be : a9ff            >            lda #$ff             ;allow test to change
                       >
e0c0 : 48              >            pha         ;use stack to load status
e0c1 : b513            >            lda zps,x    ;load to memory
e0c3 : 8d0302          >            sta abst
e0c6 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------- 6502_functional_test.a65 --------------------------

e0c7 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
e0ca : 08              >            php         ;save flags
e0cb : ad0302          >            lda abst
e0ce : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
e0d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e0d3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e0d4 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e0d6 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
e0d9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e0db : ca                       dex
e0dc : 10e0                     bpl tasl5
                        
e0de : a205                     ldx #5
e0e0 :                  tlsr4
                                set_abs zps,0
                       >            load_flag 0
e0e0 : a900            >            lda #0             ;allow test to change I
                       >
e0e2 : 48              >            pha         ;use stack to load status
e0e3 : b513            >            lda zps,x    ;load to memory
e0e5 : 8d0302          >            sta abst
e0e8 : 28              >            plp
                        
e0e9 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
e0ec : 08              >            php         ;save flags
e0ed : ad0302          >            lda abst
e0f0 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
e0f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e0f5 : 68              >            pla         ;load status
                       >            eor_flag 0
e0f6 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e0f8 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
e0fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e0fd : ca                       dex
e0fe : 10e0                     bpl tlsr4
e100 : a205                     ldx #5
e102 :                  tlsr5
                                set_abs zps,$ff
                       >            load_flag $ff
e102 : a9ff            >            lda #$ff             ;allow test to change
                       >
e104 : 48              >            pha         ;use stack to load status
e105 : b513            >            lda zps,x    ;load to memory
e107 : 8d0302          >            sta abst
e10a : 28              >            plp
                        
e10b : 4e0302                   lsr abst
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------- 6502_functional_test.a65 --------------------------

                                tst_abs rLSR,fLSR,$ff-fnzc
e10e : 08              >            php         ;save flags
e10f : ad0302          >            lda abst
e112 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
e115 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e117 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e118 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e11a : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
e11d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e11f : ca                       dex
e120 : 10e0                     bpl tlsr5
                        
e122 : a205                     ldx #5
e124 :                  trol4
                                set_abs zps,0
                       >            load_flag 0
e124 : a900            >            lda #0             ;allow test to change I
                       >
e126 : 48              >            pha         ;use stack to load status
e127 : b513            >            lda zps,x    ;load to memory
e129 : 8d0302          >            sta abst
e12c : 28              >            plp
                        
e12d : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
e130 : 08              >            php         ;save flags
e131 : ad0302          >            lda abst
e134 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
e137 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e139 : 68              >            pla         ;load status
                       >            eor_flag 0
e13a : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e13c : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
e13f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e141 : ca                       dex
e142 : 10e0                     bpl trol4
e144 : a205                     ldx #5
e146 :                  trol5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
e146 : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
e148 : 48              >            pha         ;use stack to load status
e149 : b513            >            lda zps,x    ;load to memory
e14b : 8d0302          >            sta abst
e14e : 28              >            plp
                        
e14f : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------- 6502_functional_test.a65 --------------------------

e152 : 08              >            php         ;save flags
e153 : ad0302          >            lda abst
e156 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
e159 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e15b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e15c : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e15e : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
e161 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e163 : ca                       dex
e164 : 10e0                     bpl trol5
                        
e166 : a205                     ldx #5
e168 :                  trolc4
                                set_abs zps,fc
                       >            load_flag fc
e168 : a901            >            lda #fc             ;allow test to change 
                       >
e16a : 48              >            pha         ;use stack to load status
e16b : b513            >            lda zps,x    ;load to memory
e16d : 8d0302          >            sta abst
e170 : 28              >            plp
                        
e171 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
e174 : 08              >            php         ;save flags
e175 : ad0302          >            lda abst
e178 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
e17b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e17d : 68              >            pla         ;load status
                       >            eor_flag 0
e17e : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e180 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
e183 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e185 : ca                       dex
e186 : 10e0                     bpl trolc4
e188 : a205                     ldx #5
e18a :                  trolc5
                                set_abs zps,$ff
                       >            load_flag $ff
e18a : a9ff            >            lda #$ff             ;allow test to change
                       >
e18c : 48              >            pha         ;use stack to load status
e18d : b513            >            lda zps,x    ;load to memory
e18f : 8d0302          >            sta abst
e192 : 28              >            plp
                        
e193 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
e196 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------- 6502_functional_test.a65 --------------------------

e197 : ad0302          >            lda abst
e19a : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
e19d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e19f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e1a0 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e1a2 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
e1a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e1a7 : ca                       dex
e1a8 : 10e0                     bpl trolc5
                        
e1aa : a205                     ldx #5
e1ac :                  tror4
                                set_abs zps,0
                       >            load_flag 0
e1ac : a900            >            lda #0             ;allow test to change I
                       >
e1ae : 48              >            pha         ;use stack to load status
e1af : b513            >            lda zps,x    ;load to memory
e1b1 : 8d0302          >            sta abst
e1b4 : 28              >            plp
                        
e1b5 : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
e1b8 : 08              >            php         ;save flags
e1b9 : ad0302          >            lda abst
e1bc : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e1bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e1c1 : 68              >            pla         ;load status
                       >            eor_flag 0
e1c2 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e1c4 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e1c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e1c9 : ca                       dex
e1ca : 10e0                     bpl tror4
e1cc : a205                     ldx #5
e1ce :                  tror5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
e1ce : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
e1d0 : 48              >            pha         ;use stack to load status
e1d1 : b513            >            lda zps,x    ;load to memory
e1d3 : 8d0302          >            sta abst
e1d6 : 28              >            plp
                        
e1d7 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
e1da : 08              >            php         ;save flags
e1db : ad0302          >            lda abst
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------- 6502_functional_test.a65 --------------------------

e1de : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e1e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e1e3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e1e4 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e1e6 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e1e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e1eb : ca                       dex
e1ec : 10e0                     bpl tror5
                        
e1ee : a205                     ldx #5
e1f0 :                  trorc4
                                set_abs zps,fc
                       >            load_flag fc
e1f0 : a901            >            lda #fc             ;allow test to change 
                       >
e1f2 : 48              >            pha         ;use stack to load status
e1f3 : b513            >            lda zps,x    ;load to memory
e1f5 : 8d0302          >            sta abst
e1f8 : 28              >            plp
                        
e1f9 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
e1fc : 08              >            php         ;save flags
e1fd : ad0302          >            lda abst
e200 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
e203 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e205 : 68              >            pla         ;load status
                       >            eor_flag 0
e206 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e208 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e20b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e20d : ca                       dex
e20e : 10e0                     bpl trorc4
e210 : a205                     ldx #5
e212 :                  trorc5
                                set_abs zps,$ff
                       >            load_flag $ff
e212 : a9ff            >            lda #$ff             ;allow test to change
                       >
e214 : 48              >            pha         ;use stack to load status
e215 : b513            >            lda zps,x    ;load to memory
e217 : 8d0302          >            sta abst
e21a : 28              >            plp
                        
e21b : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
e21e : 08              >            php         ;save flags
e21f : ad0302          >            lda abst
e222 : dd3302          >            cmp rRORc,x    ;test result
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
e225 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e227 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e228 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e22a : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e22d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e22f : ca                       dex
e230 : 10e0                     bpl trorc5
                                next_test
e232 : ad0002          >            lda test_case   ;previous test
e235 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e237 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
e239 : a920            >            lda #test_num   ;*** next tests' number
e23b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; shifts - zp indexed
e23e : a205                     ldx #5
e240 :                  tasl6
                                set_zx zps,0
                       >            load_flag 0
e240 : a900            >            lda #0             ;allow test to change I
                       >
e242 : 48              >            pha         ;use stack to load status
e243 : b513            >            lda zps,x    ;load to indexed zeropage
e245 : 950c            >            sta zpt,x
e247 : 28              >            plp
                        
e248 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
e24a : 08              >            php         ;save flags
e24b : b50c            >            lda zpt,x
e24d : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
e250 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e252 : 68              >            pla         ;load status
                       >            eor_flag 0
e253 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e255 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
e258 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e25a : ca                       dex
e25b : 10e3                     bpl tasl6
e25d : a205                     ldx #5
e25f :                  tasl7
                                set_zx zps,$ff
                       >            load_flag $ff
e25f : a9ff            >            lda #$ff             ;allow test to change
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------- 6502_functional_test.a65 --------------------------

                       >
e261 : 48              >            pha         ;use stack to load status
e262 : b513            >            lda zps,x    ;load to indexed zeropage
e264 : 950c            >            sta zpt,x
e266 : 28              >            plp
                        
e267 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
e269 : 08              >            php         ;save flags
e26a : b50c            >            lda zpt,x
e26c : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
e26f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e271 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e272 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e274 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
e277 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e279 : ca                       dex
e27a : 10e3                     bpl tasl7
                        
e27c : a205                     ldx #5
e27e :                  tlsr6
                                set_zx zps,0
                       >            load_flag 0
e27e : a900            >            lda #0             ;allow test to change I
                       >
e280 : 48              >            pha         ;use stack to load status
e281 : b513            >            lda zps,x    ;load to indexed zeropage
e283 : 950c            >            sta zpt,x
e285 : 28              >            plp
                        
e286 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
e288 : 08              >            php         ;save flags
e289 : b50c            >            lda zpt,x
e28b : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
e28e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e290 : 68              >            pla         ;load status
                       >            eor_flag 0
e291 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e293 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
e296 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e298 : ca                       dex
e299 : 10e3                     bpl tlsr6
e29b : a205                     ldx #5
e29d :                  tlsr7
                                set_zx zps,$ff
                       >            load_flag $ff
e29d : a9ff            >            lda #$ff             ;allow test to change
                       >
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------- 6502_functional_test.a65 --------------------------

e29f : 48              >            pha         ;use stack to load status
e2a0 : b513            >            lda zps,x    ;load to indexed zeropage
e2a2 : 950c            >            sta zpt,x
e2a4 : 28              >            plp
                        
e2a5 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
e2a7 : 08              >            php         ;save flags
e2a8 : b50c            >            lda zpt,x
e2aa : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
e2ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e2af : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e2b0 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e2b2 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
e2b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e2b7 : ca                       dex
e2b8 : 10e3                     bpl tlsr7
                        
e2ba : a205                     ldx #5
e2bc :                  trol6
                                set_zx zps,0
                       >            load_flag 0
e2bc : a900            >            lda #0             ;allow test to change I
                       >
e2be : 48              >            pha         ;use stack to load status
e2bf : b513            >            lda zps,x    ;load to indexed zeropage
e2c1 : 950c            >            sta zpt,x
e2c3 : 28              >            plp
                        
e2c4 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
e2c6 : 08              >            php         ;save flags
e2c7 : b50c            >            lda zpt,x
e2c9 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
e2cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e2ce : 68              >            pla         ;load status
                       >            eor_flag 0
e2cf : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e2d1 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
e2d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e2d6 : ca                       dex
e2d7 : 10e3                     bpl trol6
e2d9 : a205                     ldx #5
e2db :                  trol7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
e2db : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
e2dd : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------- 6502_functional_test.a65 --------------------------

e2de : b513            >            lda zps,x    ;load to indexed zeropage
e2e0 : 950c            >            sta zpt,x
e2e2 : 28              >            plp
                        
e2e3 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
e2e5 : 08              >            php         ;save flags
e2e6 : b50c            >            lda zpt,x
e2e8 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
e2eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e2ed : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e2ee : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e2f0 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
e2f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e2f5 : ca                       dex
e2f6 : 10e3                     bpl trol7
                        
e2f8 : a205                     ldx #5
e2fa :                  trolc6
                                set_zx zps,fc
                       >            load_flag fc
e2fa : a901            >            lda #fc             ;allow test to change 
                       >
e2fc : 48              >            pha         ;use stack to load status
e2fd : b513            >            lda zps,x    ;load to indexed zeropage
e2ff : 950c            >            sta zpt,x
e301 : 28              >            plp
                        
e302 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
e304 : 08              >            php         ;save flags
e305 : b50c            >            lda zpt,x
e307 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
e30a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e30c : 68              >            pla         ;load status
                       >            eor_flag 0
e30d : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e30f : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
e312 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e314 : ca                       dex
e315 : 10e3                     bpl trolc6
e317 : a205                     ldx #5
e319 :                  trolc7
                                set_zx zps,$ff
                       >            load_flag $ff
e319 : a9ff            >            lda #$ff             ;allow test to change
                       >
e31b : 48              >            pha         ;use stack to load status
e31c : b513            >            lda zps,x    ;load to indexed zeropage
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------- 6502_functional_test.a65 --------------------------

e31e : 950c            >            sta zpt,x
e320 : 28              >            plp
                        
e321 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
e323 : 08              >            php         ;save flags
e324 : b50c            >            lda zpt,x
e326 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
e329 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e32b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e32c : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e32e : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
e331 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e333 : ca                       dex
e334 : 10e3                     bpl trolc7
                        
e336 : a205                     ldx #5
e338 :                  tror6
                                set_zx zps,0
                       >            load_flag 0
e338 : a900            >            lda #0             ;allow test to change I
                       >
e33a : 48              >            pha         ;use stack to load status
e33b : b513            >            lda zps,x    ;load to indexed zeropage
e33d : 950c            >            sta zpt,x
e33f : 28              >            plp
                        
e340 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
e342 : 08              >            php         ;save flags
e343 : b50c            >            lda zpt,x
e345 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e348 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e34a : 68              >            pla         ;load status
                       >            eor_flag 0
e34b : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e34d : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e350 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e352 : ca                       dex
e353 : 10e3                     bpl tror6
e355 : a205                     ldx #5
e357 :                  tror7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
e357 : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
e359 : 48              >            pha         ;use stack to load status
e35a : b513            >            lda zps,x    ;load to indexed zeropage
e35c : 950c            >            sta zpt,x
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------- 6502_functional_test.a65 --------------------------

e35e : 28              >            plp
                        
e35f : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
e361 : 08              >            php         ;save flags
e362 : b50c            >            lda zpt,x
e364 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e367 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e369 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e36a : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e36c : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e36f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e371 : ca                       dex
e372 : 10e3                     bpl tror7
                        
e374 : a205                     ldx #5
e376 :                  trorc6
                                set_zx zps,fc
                       >            load_flag fc
e376 : a901            >            lda #fc             ;allow test to change 
                       >
e378 : 48              >            pha         ;use stack to load status
e379 : b513            >            lda zps,x    ;load to indexed zeropage
e37b : 950c            >            sta zpt,x
e37d : 28              >            plp
                        
e37e : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
e380 : 08              >            php         ;save flags
e381 : b50c            >            lda zpt,x
e383 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
e386 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e388 : 68              >            pla         ;load status
                       >            eor_flag 0
e389 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e38b : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e38e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e390 : ca                       dex
e391 : 10e3                     bpl trorc6
e393 : a205                     ldx #5
e395 :                  trorc7
                                set_zx zps,$ff
                       >            load_flag $ff
e395 : a9ff            >            lda #$ff             ;allow test to change
                       >
e397 : 48              >            pha         ;use stack to load status
e398 : b513            >            lda zps,x    ;load to indexed zeropage
e39a : 950c            >            sta zpt,x
e39c : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------- 6502_functional_test.a65 --------------------------

                        
e39d : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
e39f : 08              >            php         ;save flags
e3a0 : b50c            >            lda zpt,x
e3a2 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
e3a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e3a7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e3a8 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e3aa : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e3ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e3af : ca                       dex
e3b0 : 10e3                     bpl trorc7
                                next_test
e3b2 : ad0002          >            lda test_case   ;previous test
e3b5 : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e3b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
e3b9 : a921            >            lda #test_num   ;*** next tests' number
e3bb : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; shifts - abs indexed
e3be : a205                     ldx #5
e3c0 :                  tasl8
                                set_absx zps,0
                       >            load_flag 0
e3c0 : a900            >            lda #0             ;allow test to change I
                       >
e3c2 : 48              >            pha         ;use stack to load status
e3c3 : b513            >            lda zps,x    ;load to indexed memory
e3c5 : 9d0302          >            sta abst,x
e3c8 : 28              >            plp
                        
e3c9 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
e3cc : 08              >            php         ;save flags
e3cd : bd0302          >            lda abst,x
e3d0 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
e3d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e3d5 : 68              >            pla         ;load status
                       >            eor_flag 0
e3d6 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e3d8 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
e3db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e3dd : ca                       dex
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------- 6502_functional_test.a65 --------------------------

e3de : 10e0                     bpl tasl8
e3e0 : a205                     ldx #5
e3e2 :                  tasl9
                                set_absx zps,$ff
                       >            load_flag $ff
e3e2 : a9ff            >            lda #$ff             ;allow test to change
                       >
e3e4 : 48              >            pha         ;use stack to load status
e3e5 : b513            >            lda zps,x    ;load to indexed memory
e3e7 : 9d0302          >            sta abst,x
e3ea : 28              >            plp
                        
e3eb : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
e3ee : 08              >            php         ;save flags
e3ef : bd0302          >            lda abst,x
e3f2 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
e3f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e3f7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e3f8 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e3fa : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
e3fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e3ff : ca                       dex
e400 : 10e0                     bpl tasl9
                        
e402 : a205                     ldx #5
e404 :                  tlsr8
                                set_absx zps,0
                       >            load_flag 0
e404 : a900            >            lda #0             ;allow test to change I
                       >
e406 : 48              >            pha         ;use stack to load status
e407 : b513            >            lda zps,x    ;load to indexed memory
e409 : 9d0302          >            sta abst,x
e40c : 28              >            plp
                        
e40d : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
e410 : 08              >            php         ;save flags
e411 : bd0302          >            lda abst,x
e414 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
e417 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e419 : 68              >            pla         ;load status
                       >            eor_flag 0
e41a : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e41c : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
e41f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e421 : ca                       dex
e422 : 10e0                     bpl tlsr8
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------- 6502_functional_test.a65 --------------------------

e424 : a205                     ldx #5
e426 :                  tlsr9
                                set_absx zps,$ff
                       >            load_flag $ff
e426 : a9ff            >            lda #$ff             ;allow test to change
                       >
e428 : 48              >            pha         ;use stack to load status
e429 : b513            >            lda zps,x    ;load to indexed memory
e42b : 9d0302          >            sta abst,x
e42e : 28              >            plp
                        
e42f : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
e432 : 08              >            php         ;save flags
e433 : bd0302          >            lda abst,x
e436 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
e439 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e43b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e43c : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e43e : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
e441 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e443 : ca                       dex
e444 : 10e0                     bpl tlsr9
                        
e446 : a205                     ldx #5
e448 :                  trol8
                                set_absx zps,0
                       >            load_flag 0
e448 : a900            >            lda #0             ;allow test to change I
                       >
e44a : 48              >            pha         ;use stack to load status
e44b : b513            >            lda zps,x    ;load to indexed memory
e44d : 9d0302          >            sta abst,x
e450 : 28              >            plp
                        
e451 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
e454 : 08              >            php         ;save flags
e455 : bd0302          >            lda abst,x
e458 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
e45b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e45d : 68              >            pla         ;load status
                       >            eor_flag 0
e45e : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e460 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
e463 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e465 : ca                       dex
e466 : 10e0                     bpl trol8
e468 : a205                     ldx #5
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------- 6502_functional_test.a65 --------------------------

e46a :                  trol9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
e46a : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
e46c : 48              >            pha         ;use stack to load status
e46d : b513            >            lda zps,x    ;load to indexed memory
e46f : 9d0302          >            sta abst,x
e472 : 28              >            plp
                        
e473 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
e476 : 08              >            php         ;save flags
e477 : bd0302          >            lda abst,x
e47a : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
e47d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e47f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e480 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e482 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
e485 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e487 : ca                       dex
e488 : 10e0                     bpl trol9
                        
e48a : a205                     ldx #5
e48c :                  trolc8
                                set_absx zps,fc
                       >            load_flag fc
e48c : a901            >            lda #fc             ;allow test to change 
                       >
e48e : 48              >            pha         ;use stack to load status
e48f : b513            >            lda zps,x    ;load to indexed memory
e491 : 9d0302          >            sta abst,x
e494 : 28              >            plp
                        
e495 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
e498 : 08              >            php         ;save flags
e499 : bd0302          >            lda abst,x
e49c : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
e49f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e4a1 : 68              >            pla         ;load status
                       >            eor_flag 0
e4a2 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e4a4 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
e4a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e4a9 : ca                       dex
e4aa : 10e0                     bpl trolc8
e4ac : a205                     ldx #5
e4ae :                  trolc9
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------- 6502_functional_test.a65 --------------------------

                                set_absx zps,$ff
                       >            load_flag $ff
e4ae : a9ff            >            lda #$ff             ;allow test to change
                       >
e4b0 : 48              >            pha         ;use stack to load status
e4b1 : b513            >            lda zps,x    ;load to indexed memory
e4b3 : 9d0302          >            sta abst,x
e4b6 : 28              >            plp
                        
e4b7 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
e4ba : 08              >            php         ;save flags
e4bb : bd0302          >            lda abst,x
e4be : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
e4c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e4c3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e4c4 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e4c6 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
e4c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e4cb : ca                       dex
e4cc : 10e0                     bpl trolc9
                        
e4ce : a205                     ldx #5
e4d0 :                  tror8
                                set_absx zps,0
                       >            load_flag 0
e4d0 : a900            >            lda #0             ;allow test to change I
                       >
e4d2 : 48              >            pha         ;use stack to load status
e4d3 : b513            >            lda zps,x    ;load to indexed memory
e4d5 : 9d0302          >            sta abst,x
e4d8 : 28              >            plp
                        
e4d9 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
e4dc : 08              >            php         ;save flags
e4dd : bd0302          >            lda abst,x
e4e0 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e4e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e4e5 : 68              >            pla         ;load status
                       >            eor_flag 0
e4e6 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e4e8 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e4eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e4ed : ca                       dex
e4ee : 10e0                     bpl tror8
e4f0 : a205                     ldx #5
e4f2 :                  tror9
                                set_absx zps,$ff-fc
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------- 6502_functional_test.a65 --------------------------

                       >            load_flag $ff-fc
e4f2 : a9fe            >            lda #$ff-fc             ;allow test to cha
                       >
e4f4 : 48              >            pha         ;use stack to load status
e4f5 : b513            >            lda zps,x    ;load to indexed memory
e4f7 : 9d0302          >            sta abst,x
e4fa : 28              >            plp
                        
e4fb : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
e4fe : 08              >            php         ;save flags
e4ff : bd0302          >            lda abst,x
e502 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
e505 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e507 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e508 : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e50a : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
e50d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e50f : ca                       dex
e510 : 10e0                     bpl tror9
                        
e512 : a205                     ldx #5
e514 :                  trorc8
                                set_absx zps,fc
                       >            load_flag fc
e514 : a901            >            lda #fc             ;allow test to change 
                       >
e516 : 48              >            pha         ;use stack to load status
e517 : b513            >            lda zps,x    ;load to indexed memory
e519 : 9d0302          >            sta abst,x
e51c : 28              >            plp
                        
e51d : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
e520 : 08              >            php         ;save flags
e521 : bd0302          >            lda abst,x
e524 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
e527 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e529 : 68              >            pla         ;load status
                       >            eor_flag 0
e52a : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e52c : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e52f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e531 : ca                       dex
e532 : 10e0                     bpl trorc8
e534 : a205                     ldx #5
e536 :                  trorc9
                                set_absx zps,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------- 6502_functional_test.a65 --------------------------

e536 : a9ff            >            lda #$ff             ;allow test to change
                       >
e538 : 48              >            pha         ;use stack to load status
e539 : b513            >            lda zps,x    ;load to indexed memory
e53b : 9d0302          >            sta abst,x
e53e : 28              >            plp
                        
e53f : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
e542 : 08              >            php         ;save flags
e543 : bd0302          >            lda abst,x
e546 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
e549 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e54b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
e54c : 497c            >            eor #$ff-fnzc|fao         ;invert expected
                       >
e54e : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
e551 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e553 : ca                       dex
e554 : 10e0                     bpl trorc9
                                next_test
e556 : ad0002          >            lda test_case   ;previous test
e559 : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e55b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
e55d : a922            >            lda #test_num   ;*** next tests' number
e55f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing memory increment/decrement - INC DEC all add
                        ; zeropage
e562 : a200                     ldx #0
e564 : a97e                     lda #$7e
e566 : 850c                     sta zpt
e568 :                  tinc
                                set_stat 0
                       >            load_flag 0
e568 : a900            >            lda #0             ;allow test to change I
                       >
e56a : 48              >            pha         ;use stack to load status
e56b : 28              >            plp
                        
e56c : e60c                     inc zpt
                                tst_z rINC,fINC,0
e56e : 08              >            php         ;save flags
e56f : a50c            >            lda zpt
e571 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e574 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e576 : 68              >            pla         ;load status
                       >            eor_flag 0
e577 : 4930            >            eor #0|fao         ;invert expected flags 
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------- 6502_functional_test.a65 --------------------------

                       >
e579 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e57c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e57e : e8                       inx
e57f : e002                     cpx #2
e581 : d004                     bne tinc1
e583 : a9fe                     lda #$fe
e585 : 850c                     sta zpt
e587 : e005             tinc1   cpx #5
e589 : d0dd                     bne tinc
e58b : ca                       dex
e58c : e60c                     inc zpt
e58e :                  tdec
                                set_stat 0
                       >            load_flag 0
e58e : a900            >            lda #0             ;allow test to change I
                       >
e590 : 48              >            pha         ;use stack to load status
e591 : 28              >            plp
                        
e592 : c60c                     dec zpt
                                tst_z rINC,fINC,0
e594 : 08              >            php         ;save flags
e595 : a50c            >            lda zpt
e597 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e59a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e59c : 68              >            pla         ;load status
                       >            eor_flag 0
e59d : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e59f : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e5a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e5a4 : ca                       dex
e5a5 : 300a                     bmi tdec1
e5a7 : e001                     cpx #1
e5a9 : d0e3                     bne tdec
e5ab : a981                     lda #$81
e5ad : 850c                     sta zpt
e5af : d0dd                     bne tdec
e5b1 :                  tdec1
e5b1 : a200                     ldx #0
e5b3 : a97e                     lda #$7e
e5b5 : 850c                     sta zpt
e5b7 :                  tinc10
                                set_stat $ff
                       >            load_flag $ff
e5b7 : a9ff            >            lda #$ff             ;allow test to change
                       >
e5b9 : 48              >            pha         ;use stack to load status
e5ba : 28              >            plp
                        
e5bb : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
e5bd : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------- 6502_functional_test.a65 --------------------------

e5be : a50c            >            lda zpt
e5c0 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e5c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e5c5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e5c6 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e5c8 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e5cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e5cd : e8                       inx
e5ce : e002                     cpx #2
e5d0 : d004                     bne tinc11
e5d2 : a9fe                     lda #$fe
e5d4 : 850c                     sta zpt
e5d6 : e005             tinc11  cpx #5
e5d8 : d0dd                     bne tinc10
e5da : ca                       dex
e5db : e60c                     inc zpt
e5dd :                  tdec10
                                set_stat $ff
                       >            load_flag $ff
e5dd : a9ff            >            lda #$ff             ;allow test to change
                       >
e5df : 48              >            pha         ;use stack to load status
e5e0 : 28              >            plp
                        
e5e1 : c60c                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
e5e3 : 08              >            php         ;save flags
e5e4 : a50c            >            lda zpt
e5e6 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e5e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e5eb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e5ec : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e5ee : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e5f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e5f3 : ca                       dex
e5f4 : 300a                     bmi tdec11
e5f6 : e001                     cpx #1
e5f8 : d0e3                     bne tdec10
e5fa : a981                     lda #$81
e5fc : 850c                     sta zpt
e5fe : d0dd                     bne tdec10
e600 :                  tdec11
                                next_test
e600 : ad0002          >            lda test_case   ;previous test
e603 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e605 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------- 6502_functional_test.a65 --------------------------

0023 =                 >test_num = test_num + 1
e607 : a923            >            lda #test_num   ;*** next tests' number
e609 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; absolute memory
e60c : a200                     ldx #0
e60e : a97e                     lda #$7e
e610 : 8d0302                   sta abst
e613 :                  tinc2
                                set_stat 0
                       >            load_flag 0
e613 : a900            >            lda #0             ;allow test to change I
                       >
e615 : 48              >            pha         ;use stack to load status
e616 : 28              >            plp
                        
e617 : ee0302                   inc abst
                                tst_abs rINC,fINC,0
e61a : 08              >            php         ;save flags
e61b : ad0302          >            lda abst
e61e : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e621 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e623 : 68              >            pla         ;load status
                       >            eor_flag 0
e624 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e626 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e629 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e62b : e8                       inx
e62c : e002                     cpx #2
e62e : d005                     bne tinc3
e630 : a9fe                     lda #$fe
e632 : 8d0302                   sta abst
e635 : e005             tinc3   cpx #5
e637 : d0da                     bne tinc2
e639 : ca                       dex
e63a : ee0302                   inc abst
e63d :                  tdec2
                                set_stat 0
                       >            load_flag 0
e63d : a900            >            lda #0             ;allow test to change I
                       >
e63f : 48              >            pha         ;use stack to load status
e640 : 28              >            plp
                        
e641 : ce0302                   dec abst
                                tst_abs rINC,fINC,0
e644 : 08              >            php         ;save flags
e645 : ad0302          >            lda abst
e648 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e64b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e64d : 68              >            pla         ;load status
                       >            eor_flag 0
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------- 6502_functional_test.a65 --------------------------

e64e : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e650 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e653 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e655 : ca                       dex
e656 : 300b                     bmi tdec3
e658 : e001                     cpx #1
e65a : d0e1                     bne tdec2
e65c : a981                     lda #$81
e65e : 8d0302                   sta abst
e661 : d0da                     bne tdec2
e663 :                  tdec3
e663 : a200                     ldx #0
e665 : a97e                     lda #$7e
e667 : 8d0302                   sta abst
e66a :                  tinc12
                                set_stat $ff
                       >            load_flag $ff
e66a : a9ff            >            lda #$ff             ;allow test to change
                       >
e66c : 48              >            pha         ;use stack to load status
e66d : 28              >            plp
                        
e66e : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
e671 : 08              >            php         ;save flags
e672 : ad0302          >            lda abst
e675 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e678 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e67a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e67b : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e67d : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e680 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e682 : e8                       inx
e683 : e002                     cpx #2
e685 : d005                     bne tinc13
e687 : a9fe                     lda #$fe
e689 : 8d0302                   sta abst
e68c : e005             tinc13   cpx #5
e68e : d0da                     bne tinc12
e690 : ca                       dex
e691 : ee0302                   inc abst
e694 :                  tdec12
                                set_stat $ff
                       >            load_flag $ff
e694 : a9ff            >            lda #$ff             ;allow test to change
                       >
e696 : 48              >            pha         ;use stack to load status
e697 : 28              >            plp
                        
e698 : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------- 6502_functional_test.a65 --------------------------

e69b : 08              >            php         ;save flags
e69c : ad0302          >            lda abst
e69f : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e6a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e6a4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e6a5 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e6a7 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e6aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e6ac : ca                       dex
e6ad : 300b                     bmi tdec13
e6af : e001                     cpx #1
e6b1 : d0e1                     bne tdec12
e6b3 : a981                     lda #$81
e6b5 : 8d0302                   sta abst
e6b8 : d0da                     bne tdec12
e6ba :                  tdec13
                                next_test
e6ba : ad0002          >            lda test_case   ;previous test
e6bd : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e6bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
e6c1 : a924            >            lda #test_num   ;*** next tests' number
e6c3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; zeropage indexed
e6c6 : a200                     ldx #0
e6c8 : a97e                     lda #$7e
e6ca : 950c             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
e6cc : a900            >            lda #0             ;allow test to change I
                       >
e6ce : 48              >            pha         ;use stack to load status
e6cf : 28              >            plp
                        
e6d0 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
e6d2 : 08              >            php         ;save flags
e6d3 : b50c            >            lda zpt,x
e6d5 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e6d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e6da : 68              >            pla         ;load status
                       >            eor_flag 0
e6db : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e6dd : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e6e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------- 6502_functional_test.a65 --------------------------

                        
e6e2 : b50c                     lda zpt,x
e6e4 : e8                       inx
e6e5 : e002                     cpx #2
e6e7 : d002                     bne tinc5
e6e9 : a9fe                     lda #$fe
e6eb : e005             tinc5   cpx #5
e6ed : d0db                     bne tinc4
e6ef : ca                       dex
e6f0 : a902                     lda #2
e6f2 : 950c             tdec4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
e6f4 : a900            >            lda #0             ;allow test to change I
                       >
e6f6 : 48              >            pha         ;use stack to load status
e6f7 : 28              >            plp
                        
e6f8 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
e6fa : 08              >            php         ;save flags
e6fb : b50c            >            lda zpt,x
e6fd : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e700 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e702 : 68              >            pla         ;load status
                       >            eor_flag 0
e703 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e705 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e708 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e70a : b50c                     lda zpt,x
e70c : ca                       dex
e70d : 3008                     bmi tdec5
e70f : e001                     cpx #1
e711 : d0df                     bne tdec4
e713 : a981                     lda #$81
e715 : d0db                     bne tdec4
e717 :                  tdec5
e717 : a200                     ldx #0
e719 : a97e                     lda #$7e
e71b : 950c             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
e71d : a9ff            >            lda #$ff             ;allow test to change
                       >
e71f : 48              >            pha         ;use stack to load status
e720 : 28              >            plp
                        
e721 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
e723 : 08              >            php         ;save flags
e724 : b50c            >            lda zpt,x
e726 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e729 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e72b : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------- 6502_functional_test.a65 --------------------------

                       >            eor_flag $ff-fnz
e72c : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e72e : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e731 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e733 : b50c                     lda zpt,x
e735 : e8                       inx
e736 : e002                     cpx #2
e738 : d002                     bne tinc15
e73a : a9fe                     lda #$fe
e73c : e005             tinc15  cpx #5
e73e : d0db                     bne tinc14
e740 : ca                       dex
e741 : a902                     lda #2
e743 : 950c             tdec14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
e745 : a9ff            >            lda #$ff             ;allow test to change
                       >
e747 : 48              >            pha         ;use stack to load status
e748 : 28              >            plp
                        
e749 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
e74b : 08              >            php         ;save flags
e74c : b50c            >            lda zpt,x
e74e : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e751 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e753 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e754 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e756 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e759 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e75b : b50c                     lda zpt,x
e75d : ca                       dex
e75e : 3008                     bmi tdec15
e760 : e001                     cpx #1
e762 : d0df                     bne tdec14
e764 : a981                     lda #$81
e766 : d0db                     bne tdec14
e768 :                  tdec15
                                next_test
e768 : ad0002          >            lda test_case   ;previous test
e76b : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e76d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
e76f : a925            >            lda #test_num   ;*** next tests' number
e771 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------- 6502_functional_test.a65 --------------------------

                        ; memory indexed
e774 : a200                     ldx #0
e776 : a97e                     lda #$7e
e778 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
e77b : a900            >            lda #0             ;allow test to change I
                       >
e77d : 48              >            pha         ;use stack to load status
e77e : 28              >            plp
                        
e77f : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
e782 : 08              >            php         ;save flags
e783 : bd0302          >            lda abst,x
e786 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e789 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e78b : 68              >            pla         ;load status
                       >            eor_flag 0
e78c : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e78e : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e791 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e793 : bd0302                   lda abst,x
e796 : e8                       inx
e797 : e002                     cpx #2
e799 : d002                     bne tinc7
e79b : a9fe                     lda #$fe
e79d : e005             tinc7   cpx #5
e79f : d0d7                     bne tinc6
e7a1 : ca                       dex
e7a2 : a902                     lda #2
e7a4 : 9d0302           tdec6   sta abst,x
                                set_stat 0
                       >            load_flag 0
e7a7 : a900            >            lda #0             ;allow test to change I
                       >
e7a9 : 48              >            pha         ;use stack to load status
e7aa : 28              >            plp
                        
e7ab : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
e7ae : 08              >            php         ;save flags
e7af : bd0302          >            lda abst,x
e7b2 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e7b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e7b7 : 68              >            pla         ;load status
                       >            eor_flag 0
e7b8 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e7ba : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e7bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------- 6502_functional_test.a65 --------------------------

e7bf : bd0302                   lda abst,x
e7c2 : ca                       dex
e7c3 : 3008                     bmi tdec7
e7c5 : e001                     cpx #1
e7c7 : d0db                     bne tdec6
e7c9 : a981                     lda #$81
e7cb : d0d7                     bne tdec6
e7cd :                  tdec7
e7cd : a200                     ldx #0
e7cf : a97e                     lda #$7e
e7d1 : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
e7d4 : a9ff            >            lda #$ff             ;allow test to change
                       >
e7d6 : 48              >            pha         ;use stack to load status
e7d7 : 28              >            plp
                        
e7d8 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
e7db : 08              >            php         ;save flags
e7dc : bd0302          >            lda abst,x
e7df : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e7e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e7e4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e7e5 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e7e7 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e7ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e7ec : bd0302                   lda abst,x
e7ef : e8                       inx
e7f0 : e002                     cpx #2
e7f2 : d002                     bne tinc17
e7f4 : a9fe                     lda #$fe
e7f6 : e005             tinc17  cpx #5
e7f8 : d0d7                     bne tinc16
e7fa : ca                       dex
e7fb : a902                     lda #2
e7fd : 9d0302           tdec16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
e800 : a9ff            >            lda #$ff             ;allow test to change
                       >
e802 : 48              >            pha         ;use stack to load status
e803 : 28              >            plp
                        
e804 : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
e807 : 08              >            php         ;save flags
e808 : bd0302          >            lda abst,x
e80b : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
e80e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e810 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------- 6502_functional_test.a65 --------------------------

e811 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e813 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
e816 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e818 : bd0302                   lda abst,x
e81b : ca                       dex
e81c : 3008                     bmi tdec17
e81e : e001                     cpx #1
e820 : d0db                     bne tdec16
e822 : a981                     lda #$81
e824 : d0d7                     bne tdec16
e826 :                  tdec17
                                next_test
e826 : ad0002          >            lda test_case   ;previous test
e829 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
e82b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
e82d : a926            >            lda #test_num   ;*** next tests' number
e82f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; testing logical instructions - AND EOR ORA all addre
                        ; AND
e832 : a203                     ldx #3          ;immediate
e834 : b51e             tand    lda zpAN,x
e836 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
e839 : a900            >            lda #0             ;allow test to change I
                       >
e83b : 48              >            pha         ;use stack to load status
e83c : bd6b02          >            lda absANa,x    ;precharge accu
e83f : 28              >            plp
                        
e840 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
e843 : 08              >            php         ;save flags
e844 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e847 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e849 : 68              >            pla         ;load status
                       >            eor_flag 0
e84a : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e84c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e84f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e851 : ca                       dex
e852 : 10e0                     bpl tand
e854 : a203                     ldx #3
e856 : b51e             tand1   lda zpAN,x
e858 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------- 6502_functional_test.a65 --------------------------

                       >            load_flag $ff
e85b : a9ff            >            lda #$ff             ;allow test to change
                       >
e85d : 48              >            pha         ;use stack to load status
e85e : bd6b02          >            lda absANa,x    ;precharge accu
e861 : 28              >            plp
                        
e862 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
e865 : 08              >            php         ;save flags
e866 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e869 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e86b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e86c : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e86e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e871 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e873 : ca                       dex
e874 : 10e0                     bpl tand1
                        
e876 : a203                     ldx #3      ;zp
e878 : b51e             tand2   lda zpAN,x
e87a : 850c                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
e87c : a900            >            lda #0             ;allow test to change I
                       >
e87e : 48              >            pha         ;use stack to load status
e87f : bd6b02          >            lda absANa,x    ;precharge accu
e882 : 28              >            plp
                        
e883 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
e885 : 08              >            php         ;save flags
e886 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e889 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e88b : 68              >            pla         ;load status
                       >            eor_flag 0
e88c : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e88e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e891 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e893 : ca                       dex
e894 : 10e2                     bpl tand2
e896 : a203                     ldx #3
e898 : b51e             tand3   lda zpAN,x
e89a : 850c                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
e89c : a9ff            >            lda #$ff             ;allow test to change
                       >
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------- 6502_functional_test.a65 --------------------------

e89e : 48              >            pha         ;use stack to load status
e89f : bd6b02          >            lda absANa,x    ;precharge accu
e8a2 : 28              >            plp
                        
e8a3 : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
e8a5 : 08              >            php         ;save flags
e8a6 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e8a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e8ab : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e8ac : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e8ae : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e8b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e8b3 : ca                       dex
e8b4 : 10e2                     bpl tand3
                        
e8b6 : a203                     ldx #3      ;abs
e8b8 : b51e             tand4   lda zpAN,x
e8ba : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
e8bd : a900            >            lda #0             ;allow test to change I
                       >
e8bf : 48              >            pha         ;use stack to load status
e8c0 : bd6b02          >            lda absANa,x    ;precharge accu
e8c3 : 28              >            plp
                        
e8c4 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
e8c7 : 08              >            php         ;save flags
e8c8 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e8cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e8cd : 68              >            pla         ;load status
                       >            eor_flag 0
e8ce : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e8d0 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e8d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e8d5 : ca                       dex
e8d6 : 10e0                     bpl tand4
e8d8 : a203                     ldx #3
e8da : b51e             tand5   lda zpAN,x
e8dc : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
e8df : a9ff            >            lda #$ff             ;allow test to change
                       >
e8e1 : 48              >            pha         ;use stack to load status
e8e2 : bd6b02          >            lda absANa,x    ;precharge accu
e8e5 : 28              >            plp
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------- 6502_functional_test.a65 --------------------------

                        
e8e6 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
e8e9 : 08              >            php         ;save flags
e8ea : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e8ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e8ef : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e8f0 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e8f2 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e8f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e8f7 : ca                       dex
e8f8 : 10e0                     bpl tand5
                        
e8fa : a203                     ldx #3      ;zp,x
e8fc :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
e8fc : a900            >            lda #0             ;allow test to change I
                       >
e8fe : 48              >            pha         ;use stack to load status
e8ff : bd6b02          >            lda absANa,x    ;precharge accu
e902 : 28              >            plp
                        
e903 : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,0
e905 : 08              >            php         ;save flags
e906 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e909 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e90b : 68              >            pla         ;load status
                       >            eor_flag 0
e90c : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e90e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e911 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e913 : ca                       dex
e914 : 10e6                     bpl tand6
e916 : a203                     ldx #3
e918 :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
e918 : a9ff            >            lda #$ff             ;allow test to change
                       >
e91a : 48              >            pha         ;use stack to load status
e91b : bd6b02          >            lda absANa,x    ;precharge accu
e91e : 28              >            plp
                        
e91f : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
e921 : 08              >            php         ;save flags
e922 : dd7302          >            cmp absrlo,x    ;test result
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
e925 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e927 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e928 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e92a : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e92d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e92f : ca                       dex
e930 : 10e6                     bpl tand7
                        
e932 : a203                     ldx #3      ;abs,x
e934 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
e934 : a900            >            lda #0             ;allow test to change I
                       >
e936 : 48              >            pha         ;use stack to load status
e937 : bd6b02          >            lda absANa,x    ;precharge accu
e93a : 28              >            plp
                        
e93b : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
e93e : 08              >            php         ;save flags
e93f : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e942 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e944 : 68              >            pla         ;load status
                       >            eor_flag 0
e945 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e947 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e94a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e94c : ca                       dex
e94d : 10e5                     bpl tand8
e94f : a203                     ldx #3
e951 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
e951 : a9ff            >            lda #$ff             ;allow test to change
                       >
e953 : 48              >            pha         ;use stack to load status
e954 : bd6b02          >            lda absANa,x    ;precharge accu
e957 : 28              >            plp
                        
e958 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
e95b : 08              >            php         ;save flags
e95c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
e95f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e961 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------- 6502_functional_test.a65 --------------------------

e962 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e964 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
e967 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e969 : ca                       dex
e96a : 10e5                     bpl tand9
                        
e96c : a003                     ldy #3      ;abs,y
e96e :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
e96e : a900            >            lda #0             ;allow test to change I
                       >
e970 : 48              >            pha         ;use stack to load status
e971 : b96b02          >            lda absANa,y    ;precharge accu
e974 : 28              >            plp
                        
e975 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
e978 : 08              >            php         ;save flags
e979 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e97c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e97e : 68              >            pla         ;load status
                       >            eor_flag 0
e97f : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e981 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
e984 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e986 : 88                       dey
e987 : 10e5                     bpl tand10
e989 : a003                     ldy #3
e98b :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
e98b : a9ff            >            lda #$ff             ;allow test to change
                       >
e98d : 48              >            pha         ;use stack to load status
e98e : b96b02          >            lda absANa,y    ;precharge accu
e991 : 28              >            plp
                        
e992 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
e995 : 08              >            php         ;save flags
e996 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e999 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e99b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e99c : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e99e : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
e9a1 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------- 6502_functional_test.a65 --------------------------

                       >
                        
e9a3 : 88                       dey
e9a4 : 10e5                     bpl tand11
                        
e9a6 : a206                     ldx #6      ;(zp,x)
e9a8 : a003                     ldy #3
e9aa :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
e9aa : a900            >            lda #0             ;allow test to change I
                       >
e9ac : 48              >            pha         ;use stack to load status
e9ad : b96b02          >            lda absANa,y    ;precharge accu
e9b0 : 28              >            plp
                        
e9b1 : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
e9b3 : 08              >            php         ;save flags
e9b4 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e9b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e9b9 : 68              >            pla         ;load status
                       >            eor_flag 0
e9ba : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e9bc : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
e9bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e9c1 : ca                       dex
e9c2 : ca                       dex
e9c3 : 88                       dey
e9c4 : 10e4                     bpl tand12
e9c6 : a206                     ldx #6
e9c8 : a003                     ldy #3
e9ca :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
e9ca : a9ff            >            lda #$ff             ;allow test to change
                       >
e9cc : 48              >            pha         ;use stack to load status
e9cd : b96b02          >            lda absANa,y    ;precharge accu
e9d0 : 28              >            plp
                        
e9d1 : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
e9d3 : 08              >            php         ;save flags
e9d4 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e9d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e9d9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
e9da : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
e9dc : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
e9df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------- 6502_functional_test.a65 --------------------------

                        
e9e1 : ca                       dex
e9e2 : ca                       dex
e9e3 : 88                       dey
e9e4 : 10e4                     bpl tand13
                        
e9e6 : a003                     ldy #3      ;(zp),y
e9e8 :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
e9e8 : a900            >            lda #0             ;allow test to change I
                       >
e9ea : 48              >            pha         ;use stack to load status
e9eb : b96b02          >            lda absANa,y    ;precharge accu
e9ee : 28              >            plp
                        
e9ef : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,0
e9f1 : 08              >            php         ;save flags
e9f2 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
e9f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
e9f7 : 68              >            pla         ;load status
                       >            eor_flag 0
e9f8 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
e9fa : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
e9fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
e9ff : 88                       dey
ea00 : 10e6                     bpl tand14
ea02 : a003                     ldy #3
ea04 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
ea04 : a9ff            >            lda #$ff             ;allow test to change
                       >
ea06 : 48              >            pha         ;use stack to load status
ea07 : b96b02          >            lda absANa,y    ;precharge accu
ea0a : 28              >            plp
                        
ea0b : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
ea0d : 08              >            php         ;save flags
ea0e : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ea11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ea13 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ea14 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ea16 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ea19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ea1b : 88                       dey
ea1c : 10e6                     bpl tand15
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------- 6502_functional_test.a65 --------------------------

                                next_test
ea1e : ad0002          >            lda test_case   ;previous test
ea21 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ea23 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
ea25 : a927            >            lda #test_num   ;*** next tests' number
ea27 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; EOR
ea2a : a203                     ldx #3          ;immediate - self modifying co
ea2c : b522             teor    lda zpEO,x
ea2e : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
ea31 : a900            >            lda #0             ;allow test to change I
                       >
ea33 : 48              >            pha         ;use stack to load status
ea34 : bd6f02          >            lda absEOa,x    ;precharge accu
ea37 : 28              >            plp
                        
ea38 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
ea3b : 08              >            php         ;save flags
ea3c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ea3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ea41 : 68              >            pla         ;load status
                       >            eor_flag 0
ea42 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ea44 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ea47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ea49 : ca                       dex
ea4a : 10e0                     bpl teor
ea4c : a203                     ldx #3
ea4e : b522             teor1   lda zpEO,x
ea50 : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
ea53 : a9ff            >            lda #$ff             ;allow test to change
                       >
ea55 : 48              >            pha         ;use stack to load status
ea56 : bd6f02          >            lda absEOa,x    ;precharge accu
ea59 : 28              >            plp
                        
ea5a : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
ea5d : 08              >            php         ;save flags
ea5e : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ea61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ea63 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------- 6502_functional_test.a65 --------------------------

ea64 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ea66 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ea69 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ea6b : ca                       dex
ea6c : 10e0                     bpl teor1
                        
ea6e : a203                     ldx #3      ;zp
ea70 : b522             teor2    lda zpEO,x
ea72 : 850c                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
ea74 : a900            >            lda #0             ;allow test to change I
                       >
ea76 : 48              >            pha         ;use stack to load status
ea77 : bd6f02          >            lda absEOa,x    ;precharge accu
ea7a : 28              >            plp
                        
ea7b : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
ea7d : 08              >            php         ;save flags
ea7e : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ea81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ea83 : 68              >            pla         ;load status
                       >            eor_flag 0
ea84 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ea86 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ea89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ea8b : ca                       dex
ea8c : 10e2                     bpl teor2
ea8e : a203                     ldx #3
ea90 : b522             teor3   lda zpEO,x
ea92 : 850c                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
ea94 : a9ff            >            lda #$ff             ;allow test to change
                       >
ea96 : 48              >            pha         ;use stack to load status
ea97 : bd6f02          >            lda absEOa,x    ;precharge accu
ea9a : 28              >            plp
                        
ea9b : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
ea9d : 08              >            php         ;save flags
ea9e : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
eaa1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eaa3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
eaa4 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
eaa6 : dd7702          >            cmp absflo,x    ;test flags
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne     ;
eaa9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eaab : ca                       dex
eaac : 10e2                     bpl teor3
                        
eaae : a203                     ldx #3      ;abs
eab0 : b522             teor4   lda zpEO,x
eab2 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
eab5 : a900            >            lda #0             ;allow test to change I
                       >
eab7 : 48              >            pha         ;use stack to load status
eab8 : bd6f02          >            lda absEOa,x    ;precharge accu
eabb : 28              >            plp
                        
eabc : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
eabf : 08              >            php         ;save flags
eac0 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
eac3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eac5 : 68              >            pla         ;load status
                       >            eor_flag 0
eac6 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
eac8 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
eacb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eacd : ca                       dex
eace : 10e0                     bpl teor4
ead0 : a203                     ldx #3
ead2 : b522             teor5   lda zpEO,x
ead4 : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
ead7 : a9ff            >            lda #$ff             ;allow test to change
                       >
ead9 : 48              >            pha         ;use stack to load status
eada : bd6f02          >            lda absEOa,x    ;precharge accu
eadd : 28              >            plp
                        
eade : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
eae1 : 08              >            php         ;save flags
eae2 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
eae5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eae7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
eae8 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
eaea : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
eaed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------- 6502_functional_test.a65 --------------------------

                        
eaef : ca                       dex
eaf0 : 10e0                     bpl teor5
                        
eaf2 : a203                     ldx #3      ;zp,x
eaf4 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
eaf4 : a900            >            lda #0             ;allow test to change I
                       >
eaf6 : 48              >            pha         ;use stack to load status
eaf7 : bd6f02          >            lda absEOa,x    ;precharge accu
eafa : 28              >            plp
                        
eafb : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
eafd : 08              >            php         ;save flags
eafe : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
eb01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eb03 : 68              >            pla         ;load status
                       >            eor_flag 0
eb04 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
eb06 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
eb09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eb0b : ca                       dex
eb0c : 10e6                     bpl teor6
eb0e : a203                     ldx #3
eb10 :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
eb10 : a9ff            >            lda #$ff             ;allow test to change
                       >
eb12 : 48              >            pha         ;use stack to load status
eb13 : bd6f02          >            lda absEOa,x    ;precharge accu
eb16 : 28              >            plp
                        
eb17 : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
eb19 : 08              >            php         ;save flags
eb1a : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
eb1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eb1f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
eb20 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
eb22 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
eb25 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eb27 : ca                       dex
eb28 : 10e6                     bpl teor7
                        
eb2a : a203                     ldx #3      ;abs,x
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------- 6502_functional_test.a65 --------------------------

eb2c :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
eb2c : a900            >            lda #0             ;allow test to change I
                       >
eb2e : 48              >            pha         ;use stack to load status
eb2f : bd6f02          >            lda absEOa,x    ;precharge accu
eb32 : 28              >            plp
                        
eb33 : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
eb36 : 08              >            php         ;save flags
eb37 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
eb3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eb3c : 68              >            pla         ;load status
                       >            eor_flag 0
eb3d : 4930            >            eor #0|fao         ;invert expected flags 
                       >
eb3f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
eb42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eb44 : ca                       dex
eb45 : 10e5                     bpl teor8
eb47 : a203                     ldx #3
eb49 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
eb49 : a9ff            >            lda #$ff             ;allow test to change
                       >
eb4b : 48              >            pha         ;use stack to load status
eb4c : bd6f02          >            lda absEOa,x    ;precharge accu
eb4f : 28              >            plp
                        
eb50 : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
eb53 : 08              >            php         ;save flags
eb54 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
eb57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eb59 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
eb5a : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
eb5c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
eb5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eb61 : ca                       dex
eb62 : 10e5                     bpl teor9
                        
eb64 : a003                     ldy #3      ;abs,y
eb66 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
eb66 : a900            >            lda #0             ;allow test to change I
                       >
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------- 6502_functional_test.a65 --------------------------

eb68 : 48              >            pha         ;use stack to load status
eb69 : b96f02          >            lda absEOa,y    ;precharge accu
eb6c : 28              >            plp
                        
eb6d : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
eb70 : 08              >            php         ;save flags
eb71 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
eb74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eb76 : 68              >            pla         ;load status
                       >            eor_flag 0
eb77 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
eb79 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
eb7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eb7e : 88                       dey
eb7f : 10e5                     bpl teor10
eb81 : a003                     ldy #3
eb83 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
eb83 : a9ff            >            lda #$ff             ;allow test to change
                       >
eb85 : 48              >            pha         ;use stack to load status
eb86 : b96f02          >            lda absEOa,y    ;precharge accu
eb89 : 28              >            plp
                        
eb8a : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
eb8d : 08              >            php         ;save flags
eb8e : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
eb91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eb93 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
eb94 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
eb96 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
eb99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eb9b : 88                       dey
eb9c : 10e5                     bpl teor11
                        
eb9e : a206                     ldx #6      ;(zp,x)
eba0 : a003                     ldy #3
eba2 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
eba2 : a900            >            lda #0             ;allow test to change I
                       >
eba4 : 48              >            pha         ;use stack to load status
eba5 : b96f02          >            lda absEOa,y    ;precharge accu
eba8 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------- 6502_functional_test.a65 --------------------------

eba9 : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
ebab : 08              >            php         ;save flags
ebac : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ebaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ebb1 : 68              >            pla         ;load status
                       >            eor_flag 0
ebb2 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ebb4 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ebb7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ebb9 : ca                       dex
ebba : ca                       dex
ebbb : 88                       dey
ebbc : 10e4                     bpl teor12
ebbe : a206                     ldx #6
ebc0 : a003                     ldy #3
ebc2 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
ebc2 : a9ff            >            lda #$ff             ;allow test to change
                       >
ebc4 : 48              >            pha         ;use stack to load status
ebc5 : b96f02          >            lda absEOa,y    ;precharge accu
ebc8 : 28              >            plp
                        
ebc9 : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
ebcb : 08              >            php         ;save flags
ebcc : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ebcf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ebd1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ebd2 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ebd4 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ebd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ebd9 : ca                       dex
ebda : ca                       dex
ebdb : 88                       dey
ebdc : 10e4                     bpl teor13
                        
ebde : a003                     ldy #3      ;(zp),y
ebe0 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
ebe0 : a900            >            lda #0             ;allow test to change I
                       >
ebe2 : 48              >            pha         ;use stack to load status
ebe3 : b96f02          >            lda absEOa,y    ;precharge accu
ebe6 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------- 6502_functional_test.a65 --------------------------

ebe7 : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
ebe9 : 08              >            php         ;save flags
ebea : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ebed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ebef : 68              >            pla         ;load status
                       >            eor_flag 0
ebf0 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ebf2 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ebf5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ebf7 : 88                       dey
ebf8 : 10e6                     bpl teor14
ebfa : a003                     ldy #3
ebfc :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
ebfc : a9ff            >            lda #$ff             ;allow test to change
                       >
ebfe : 48              >            pha         ;use stack to load status
ebff : b96f02          >            lda absEOa,y    ;precharge accu
ec02 : 28              >            plp
                        
ec03 : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
ec05 : 08              >            php         ;save flags
ec06 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ec09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ec0b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ec0c : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ec0e : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ec11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ec13 : 88                       dey
ec14 : 10e6                     bpl teor15
                                next_test
ec16 : ad0002          >            lda test_case   ;previous test
ec19 : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ec1b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
ec1d : a928            >            lda #test_num   ;*** next tests' number
ec1f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; OR
ec22 : a203                     ldx #3          ;immediate - self modifying co
ec24 : b51a             tora    lda zpOR,x
ec26 : 8d1002                   sta ex_orai+1   ;set ORA # operand
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------- 6502_functional_test.a65 --------------------------

                                set_ax  absORa,0
                       >            load_flag 0
ec29 : a900            >            lda #0             ;allow test to change I
                       >
ec2b : 48              >            pha         ;use stack to load status
ec2c : bd6702          >            lda absORa,x    ;precharge accu
ec2f : 28              >            plp
                        
ec30 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
ec33 : 08              >            php         ;save flags
ec34 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ec37 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ec39 : 68              >            pla         ;load status
                       >            eor_flag 0
ec3a : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ec3c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ec3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ec41 : ca                       dex
ec42 : 10e0                     bpl tora
ec44 : a203                     ldx #3
ec46 : b51a             tora1   lda zpOR,x
ec48 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
ec4b : a9ff            >            lda #$ff             ;allow test to change
                       >
ec4d : 48              >            pha         ;use stack to load status
ec4e : bd6702          >            lda absORa,x    ;precharge accu
ec51 : 28              >            plp
                        
ec52 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
ec55 : 08              >            php         ;save flags
ec56 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ec59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ec5b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ec5c : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ec5e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ec61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ec63 : ca                       dex
ec64 : 10e0                     bpl tora1
                        
ec66 : a203                     ldx #3      ;zp
ec68 : b51a             tora2   lda zpOR,x
ec6a : 850c                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
ec6c : a900            >            lda #0             ;allow test to change I
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------- 6502_functional_test.a65 --------------------------

                       >
ec6e : 48              >            pha         ;use stack to load status
ec6f : bd6702          >            lda absORa,x    ;precharge accu
ec72 : 28              >            plp
                        
ec73 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
ec75 : 08              >            php         ;save flags
ec76 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ec79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ec7b : 68              >            pla         ;load status
                       >            eor_flag 0
ec7c : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ec7e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ec81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ec83 : ca                       dex
ec84 : 10e2                     bpl tora2
ec86 : a203                     ldx #3
ec88 : b51a             tora3   lda zpOR,x
ec8a : 850c                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
ec8c : a9ff            >            lda #$ff             ;allow test to change
                       >
ec8e : 48              >            pha         ;use stack to load status
ec8f : bd6702          >            lda absORa,x    ;precharge accu
ec92 : 28              >            plp
                        
ec93 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
ec95 : 08              >            php         ;save flags
ec96 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ec99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ec9b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ec9c : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ec9e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
eca1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
eca3 : ca                       dex
eca4 : 10e2                     bpl tora3
                        
eca6 : a203                     ldx #3      ;abs
eca8 : b51a             tora4   lda zpOR,x
ecaa : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
ecad : a900            >            lda #0             ;allow test to change I
                       >
ecaf : 48              >            pha         ;use stack to load status
ecb0 : bd6702          >            lda absORa,x    ;precharge accu
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------- 6502_functional_test.a65 --------------------------

ecb3 : 28              >            plp
                        
ecb4 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
ecb7 : 08              >            php         ;save flags
ecb8 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ecbb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ecbd : 68              >            pla         ;load status
                       >            eor_flag 0
ecbe : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ecc0 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ecc3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ecc5 : ca                       dex
ecc6 : 10e0                     bpl tora4
ecc8 : a203                     ldx #3
ecca : b51a             tora5   lda zpOR,x
eccc : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
eccf : a9ff            >            lda #$ff             ;allow test to change
                       >
ecd1 : 48              >            pha         ;use stack to load status
ecd2 : bd6702          >            lda absORa,x    ;precharge accu
ecd5 : 28              >            plp
                        
ecd6 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
ecd9 : 08              >            php         ;save flags
ecda : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ecdd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ecdf : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ece0 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ece2 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ece5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ece7 : ca                       dex
ece8 : 10e0                     bpl tora5
                        
ecea : a203                     ldx #3      ;zp,x
ecec :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
ecec : a900            >            lda #0             ;allow test to change I
                       >
ecee : 48              >            pha         ;use stack to load status
ecef : bd6702          >            lda absORa,x    ;precharge accu
ecf2 : 28              >            plp
                        
ecf3 : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------- 6502_functional_test.a65 --------------------------

ecf5 : 08              >            php         ;save flags
ecf6 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ecf9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ecfb : 68              >            pla         ;load status
                       >            eor_flag 0
ecfc : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ecfe : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ed01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ed03 : ca                       dex
ed04 : 10e6                     bpl tora6
ed06 : a203                     ldx #3
ed08 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
ed08 : a9ff            >            lda #$ff             ;allow test to change
                       >
ed0a : 48              >            pha         ;use stack to load status
ed0b : bd6702          >            lda absORa,x    ;precharge accu
ed0e : 28              >            plp
                        
ed0f : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
ed11 : 08              >            php         ;save flags
ed12 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ed15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ed17 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ed18 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ed1a : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ed1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ed1f : ca                       dex
ed20 : 10e6                     bpl tora7
                        
ed22 : a203                     ldx #3      ;abs,x
ed24 :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
ed24 : a900            >            lda #0             ;allow test to change I
                       >
ed26 : 48              >            pha         ;use stack to load status
ed27 : bd6702          >            lda absORa,x    ;precharge accu
ed2a : 28              >            plp
                        
ed2b : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
ed2e : 08              >            php         ;save flags
ed2f : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ed32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------- 6502_functional_test.a65 --------------------------

ed34 : 68              >            pla         ;load status
                       >            eor_flag 0
ed35 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ed37 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ed3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ed3c : ca                       dex
ed3d : 10e5                     bpl tora8
ed3f : a203                     ldx #3
ed41 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
ed41 : a9ff            >            lda #$ff             ;allow test to change
                       >
ed43 : 48              >            pha         ;use stack to load status
ed44 : bd6702          >            lda absORa,x    ;precharge accu
ed47 : 28              >            plp
                        
ed48 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
ed4b : 08              >            php         ;save flags
ed4c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ed4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ed51 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ed52 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ed54 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ed57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ed59 : ca                       dex
ed5a : 10e5                     bpl tora9
                        
ed5c : a003                     ldy #3      ;abs,y
ed5e :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
ed5e : a900            >            lda #0             ;allow test to change I
                       >
ed60 : 48              >            pha         ;use stack to load status
ed61 : b96702          >            lda absORa,y    ;precharge accu
ed64 : 28              >            plp
                        
ed65 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
ed68 : 08              >            php         ;save flags
ed69 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ed6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ed6e : 68              >            pla         ;load status
                       >            eor_flag 0
ed6f : 4930            >            eor #0|fao         ;invert expected flags 
                       >
ed71 : d97702          >            cmp absflo,y    ;test flags
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------- 6502_functional_test.a65 --------------------------

                       >            trap_ne
ed74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ed76 : 88                       dey
ed77 : 10e5                     bpl tora10
ed79 : a003                     ldy #3
ed7b :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
ed7b : a9ff            >            lda #$ff             ;allow test to change
                       >
ed7d : 48              >            pha         ;use stack to load status
ed7e : b96702          >            lda absORa,y    ;precharge accu
ed81 : 28              >            plp
                        
ed82 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
ed85 : 08              >            php         ;save flags
ed86 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ed89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ed8b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ed8c : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ed8e : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ed91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ed93 : 88                       dey
ed94 : 10e5                     bpl tora11
                        
ed96 : a206                     ldx #6      ;(zp,x)
ed98 : a003                     ldy #3
ed9a :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
ed9a : a900            >            lda #0             ;allow test to change I
                       >
ed9c : 48              >            pha         ;use stack to load status
ed9d : b96702          >            lda absORa,y    ;precharge accu
eda0 : 28              >            plp
                        
eda1 : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
eda3 : 08              >            php         ;save flags
eda4 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
eda7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
eda9 : 68              >            pla         ;load status
                       >            eor_flag 0
edaa : 4930            >            eor #0|fao         ;invert expected flags 
                       >
edac : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
edaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------- 6502_functional_test.a65 --------------------------

edb1 : ca                       dex
edb2 : ca                       dex
edb3 : 88                       dey
edb4 : 10e4                     bpl tora12
edb6 : a206                     ldx #6
edb8 : a003                     ldy #3
edba :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
edba : a9ff            >            lda #$ff             ;allow test to change
                       >
edbc : 48              >            pha         ;use stack to load status
edbd : b96702          >            lda absORa,y    ;precharge accu
edc0 : 28              >            plp
                        
edc1 : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
edc3 : 08              >            php         ;save flags
edc4 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
edc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
edc9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
edca : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
edcc : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
edcf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
edd1 : ca                       dex
edd2 : ca                       dex
edd3 : 88                       dey
edd4 : 10e4                     bpl tora13
                        
edd6 : a003                     ldy #3      ;(zp),y
edd8 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
edd8 : a900            >            lda #0             ;allow test to change I
                       >
edda : 48              >            pha         ;use stack to load status
eddb : b96702          >            lda absORa,y    ;precharge accu
edde : 28              >            plp
                        
eddf : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
ede1 : 08              >            php         ;save flags
ede2 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ede5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ede7 : 68              >            pla         ;load status
                       >            eor_flag 0
ede8 : 4930            >            eor #0|fao         ;invert expected flags 
                       >
edea : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
eded : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------- 6502_functional_test.a65 --------------------------

edef : 88                       dey
edf0 : 10e6                     bpl tora14
edf2 : a003                     ldy #3
edf4 :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
edf4 : a9ff            >            lda #$ff             ;allow test to change
                       >
edf6 : 48              >            pha         ;use stack to load status
edf7 : b96702          >            lda absORa,y    ;precharge accu
edfa : 28              >            plp
                        
edfb : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
edfd : 08              >            php         ;save flags
edfe : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ee01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ee03 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ee04 : 497d            >            eor #$ff-fnz|fao         ;invert expected 
                       >
ee06 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ee09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ee0b : 88                       dey
ee0c : 10e6                     bpl tora15
                            if I_flag = 3
ee0e : 58                       cli
                            endif
                                next_test
ee0f : ad0002          >            lda test_case   ;previous test
ee12 : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ee14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
ee16 : a929            >            lda #test_num   ;*** next tests' number
ee18 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and ca
                        ; uses increments/decrements to predict result & resul
ee1b : d8                       cld
ee1c : a20e                     ldx #ad2        ;for indexed test
ee1e : a0ff                     ldy #$ff        ;max range
ee20 : a900                     lda #0          ;start with adding zeroes & no
ee22 : 850c                     sta adfc        ;carry in - for diag
ee24 : 850d                     sta ad1         ;operand 1 - accumulator
ee26 : 850e                     sta ad2         ;operand 2 - memory or immedia
ee28 : 8d0302                   sta ada2        ;non zp
ee2b : 850f                     sta adrl        ;expected result bits 0-7
ee2d : 8510                     sta adrh        ;expected result bit 8 (carry 
ee2f : a9ff                     lda #$ff        ;complemented operand 2 for su
ee31 : 8512                     sta sb2
ee33 : 8d0402                   sta sba2        ;non zp
ee36 : a902                     lda #2          ;expected Z-flag
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------- 6502_functional_test.a65 --------------------------

ee38 : 8511                     sta adrf
ee3a : 18               tadd    clc             ;test with carry clear
ee3b : 20eef0                   jsr chkadd
ee3e : e60c                     inc adfc        ;now with carry
ee40 : e60f                     inc adrl        ;result +1
ee42 : 08                       php             ;save N & Z from low result
ee43 : 08                       php
ee44 : 68                       pla             ;accu holds expected flags
ee45 : 2982                     and #$82        ;mask N & Z
ee47 : 28                       plp
ee48 : d002                     bne tadd1
ee4a : e610                     inc adrh        ;result bit 8 - carry
ee4c : 0510             tadd1   ora adrh        ;merge C to expected flags
ee4e : 8511                     sta adrf        ;save expected flags except ov
ee50 : 38                       sec             ;test with carry set
ee51 : 20eef0                   jsr chkadd
ee54 : c60c                     dec adfc        ;same for operand +1 but no ca
ee56 : e60d                     inc ad1
ee58 : d0e0                     bne tadd        ;iterate op1
ee5a : a900                     lda #0          ;preset result to op2 when op1
ee5c : 8510                     sta adrh
ee5e : ee0302                   inc ada2
ee61 : e60e                     inc ad2
ee63 : 08                       php             ;save NZ as operand 2 becomes 
ee64 : 68                       pla
ee65 : 2982                     and #$82        ;mask N00000Z0
ee67 : 8511                     sta adrf        ;no need to check carry as we 
ee69 : c612                     dec sb2         ;complement subtract operand 2
ee6b : ce0402                   dec sba2
ee6e : a50e                     lda ad2
ee70 : 850f                     sta adrl
ee72 : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
ee74 : ad0002          >            lda test_case   ;previous test
ee77 : c929            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ee79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
002a =                 >test_num = test_num + 1
ee7b : a92a            >            lda #test_num   ;*** next tests' number
ee7d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags ar
                        ; iterates through all valid combinations of operands 
                        ; uses increments/decrements to predict result & carry
ee80 : f8                       sed
ee81 : a20e                     ldx #ad2        ;for indexed test
ee83 : a0ff                     ldy #$ff        ;max range
ee85 : a999                     lda #$99        ;start with adding 99 to 99 wi
ee87 : 850d                     sta ad1         ;operand 1 - accumulator
ee89 : 850e                     sta ad2         ;operand 2 - memory or immedia
ee8b : 8d0302                   sta ada2        ;non zp
ee8e : 850f                     sta adrl        ;expected result bits 0-7
ee90 : a901                     lda #1          ;set carry in & out
ee92 : 850c                     sta adfc        ;carry in - for diag
ee94 : 8510                     sta adrh        ;expected result bit 8 (carry 
ee96 : a900                     lda #0          ;complemented operand 2 for su
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------- 6502_functional_test.a65 --------------------------

ee98 : 8512                     sta sb2
ee9a : 8d0402                   sta sba2        ;non zp
ee9d : 38               tdad    sec             ;test with carry set
ee9e : 20bbef                   jsr chkdad
eea1 : c60c                     dec adfc        ;now with carry clear
eea3 : a50f                     lda adrl        ;decimal adjust result
eea5 : d008                     bne tdad1       ;skip clear carry & preset res
eea7 : c610                     dec adrh
eea9 : a999                     lda #$99
eeab : 850f                     sta adrl
eead : d012                     bne tdad3
eeaf : 290f             tdad1   and #$f         ;lower nibble mask
eeb1 : d00c                     bne tdad2       ;no decimal adjust needed
eeb3 : c60f                     dec adrl        ;decimal adjust (?0-6)
eeb5 : c60f                     dec adrl
eeb7 : c60f                     dec adrl
eeb9 : c60f                     dec adrl
eebb : c60f                     dec adrl
eebd : c60f                     dec adrl
eebf : c60f             tdad2   dec adrl        ;result -1
eec1 : 18               tdad3   clc             ;test with carry clear
eec2 : 20bbef                   jsr chkdad
eec5 : e60c                     inc adfc        ;same for operand -1 but with 
eec7 : a50d                     lda ad1         ;decimal adjust operand 1
eec9 : f015                     beq tdad5       ;iterate operand 2
eecb : 290f                     and #$f         ;lower nibble mask
eecd : d00c                     bne tdad4       ;skip decimal adjust
eecf : c60d                     dec ad1         ;decimal adjust (?0-6)
eed1 : c60d                     dec ad1
eed3 : c60d                     dec ad1
eed5 : c60d                     dec ad1
eed7 : c60d                     dec ad1
eed9 : c60d                     dec ad1
eedb : c60d             tdad4   dec ad1         ;operand 1 -1
eedd : 4c9dee                   jmp tdad        ;iterate op1
                        
eee0 : a999             tdad5   lda #$99        ;precharge op1 max
eee2 : 850d                     sta ad1
eee4 : a50e                     lda ad2         ;decimal adjust operand 2
eee6 : f030                     beq tdad7       ;end of iteration
eee8 : 290f                     and #$f         ;lower nibble mask
eeea : d018                     bne tdad6       ;skip decimal adjust
eeec : c60e                     dec ad2         ;decimal adjust (?0-6)
eeee : c60e                     dec ad2
eef0 : c60e                     dec ad2
eef2 : c60e                     dec ad2
eef4 : c60e                     dec ad2
eef6 : c60e                     dec ad2
eef8 : e612                     inc sb2         ;complemented decimal adjust f
eefa : e612                     inc sb2
eefc : e612                     inc sb2
eefe : e612                     inc sb2
ef00 : e612                     inc sb2
ef02 : e612                     inc sb2
ef04 : c60e             tdad6   dec ad2         ;operand 2 -1
ef06 : e612                     inc sb2         ;complemented operand for subt
ef08 : a512                     lda sb2
ef0a : 8d0402                   sta sba2        ;copy as non zp operand
ef0d : a50e                     lda ad2
ef0f : 8d0302                   sta ada2        ;copy as non zp operand
ef12 : 850f                     sta adrl        ;new result since op1+carry=00
ef14 : e610                     inc adrh        ;result carry
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------- 6502_functional_test.a65 --------------------------

ef16 : d085                     bne tdad        ;iterate op2
ef18 :                  tdad7
                                next_test
ef18 : ad0002          >            lda test_case   ;previous test
ef1b : c92a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ef1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
002b =                 >test_num = test_num + 1
ef1f : a92b            >            lda #test_num   ;*** next tests' number
ef21 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altere
                        
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between 
                        ;   tables
ef24 : 18                       clc
ef25 : d8                       cld
ef26 : 08                       php
ef27 : a955                     lda #$55
ef29 : 6955                     adc #$55
ef2b : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after 
ef2d : d0fe            >        bne *           ;failed not equal (non zero)
                        
ef2f : 18                       clc
ef30 : f8                       sed
ef31 : 08                       php
ef32 : a955                     lda #$55
ef34 : 6955                     adc #$55
ef36 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after
ef38 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ef3a : d8                       cld
ef3b : 28                       plp
ef3c : a955                     lda #$55
ef3e : 6955                     adc #$55
ef40 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after
ef42 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ef44 : 28                       plp
ef45 : a955                     lda #$55
ef47 : 6955                     adc #$55
ef49 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after 
ef4b : d0fe            >        bne *           ;failed not equal (non zero)
                        
ef4d : 18                       clc
ef4e : a9ef                     lda #hi bin_rti_ret ;emulated interrupt for rt
ef50 : 48                       pha
ef51 : a968                     lda #lo bin_rti_ret
ef53 : 48                       pha
ef54 : 08                       php
ef55 : f8                       sed
ef56 : a9ef                     lda #hi dec_rti_ret ;emulated interrupt for rt
ef58 : 48                       pha
ef59 : a95f                     lda #lo dec_rti_ret
ef5b : 48                       pha
ef5c : 08                       php
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------- 6502_functional_test.a65 --------------------------

ef5d : d8                       cld
ef5e : 40                       rti
ef5f :                  dec_rti_ret
ef5f : a955                     lda #$55
ef61 : 6955                     adc #$55
ef63 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after
ef65 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ef67 : 40                       rti
ef68 :                  bin_rti_ret
ef68 : a955                     lda #$55
ef6a : 6955                     adc #$55
ef6c : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after 
ef6e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                            endif
                        
ef70 : ad0002                   lda test_case
ef73 : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of seque
ef75 : d0fe            >        bne *           ;failed not equal (non zero)
                        
ef77 : a9f0                     lda #$f0        ;mark opcode testing complete
ef79 : 8d0002                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has alter
                        ;   designated write areas.
                                check_ram
ef7c : d8              >            cld
ef7d : a900            >            lda #0
ef7f : 850c            >            sta zpt         ;set low byte of indirect 
ef81 : 850f            >            sta zpt+3       ;checksum high byte
                       >          if disable_selfmod = 0
                       >            sta range_adr   ;reset self modifying code
                       >          endif
ef83 : 18              >            clc
ef84 : a209            >            ldx #zp_bss-zero_page ;zeropage - write te
ef86 : 750a            >ccs32419      adc zero_page,x
ef88 : 9003            >            bcc ccs22419
ef8a : e60f            >            inc zpt+3       ;carry to high byte
ef8c : 18              >            clc
ef8d : e8              >ccs22419      inx
ef8e : d0f6            >            bne ccs32419
ef90 : a202            >            ldx #hi(abs1)   ;set high byte of indirect
ef92 : 860d            >            stx zpt+1
ef94 : a018            >            ldy #lo(abs1)   ;data after write & execut
ef96 : 710c            >ccs52419      adc (zpt),y
ef98 : 9003            >            bcc ccs42419
ef9a : e60f            >            inc zpt+3       ;carry to high byte
ef9c : 18              >            clc
ef9d : c8              >ccs42419      iny
ef9e : d0f6            >            bne ccs52419
efa0 : e8              >            inx             ;advance RAM high address
efa1 : 860d            >            stx zpt+1
efa3 : e010            >            cpx #ram_top
efa5 : d0ef            >            bne ccs52419
efa7 : 850e            >            sta zpt+2       ;checksum low is
efa9 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------- 6502_functional_test.a65 --------------------------

efac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
efae : a50f            >            lda zpt+3       ;checksum high is
efb0 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
efb3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the 
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other back
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S **************************************
                        ; -------------
                                success         ;if you get here everything we
efb5 : 4cb5ef          >        jmp *           ;test passed, no errors
                        
                        ; -------------
                        ; S U C C E S S **************************************
efb8 : 4c00c0                   jmp start       ;run again
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags ar
                        ; iterates through all valid combinations of operands 
                        ; uses increments/decrements to predict result & carry
efbb :                  chkdad
                        ; decimal ADC / SBC zp
efbb : 08                       php             ;save carry for subtract
efbc : a50d                     lda ad1
efbe : 650e                     adc ad2         ;perform add
efc0 : 08                       php
efc1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
efc3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
efc5 : 68                       pla             ;check flags
efc6 : 2901                     and #1          ;mask carry
efc8 : c510                     cmp adrh
                                trap_ne         ;bad carry
efca : d0fe            >        bne *           ;failed not equal (non zero)
                        
efcc : 28                       plp
efcd : 08                       php             ;save carry for next add
efce : a50d                     lda ad1
efd0 : e512                     sbc sb2         ;perform subtract
efd2 : 08                       php
efd3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
efd5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
efd7 : 68                       pla             ;check flags
efd8 : 2901                     and #1          ;mask carry
efda : c510                     cmp adrh
                                trap_ne         ;bad flags
efdc : d0fe            >        bne *           ;failed not equal (non zero)
                        
efde : 28                       plp
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------- 6502_functional_test.a65 --------------------------

                        ; decimal ADC / SBC abs
efdf : 08                       php             ;save carry for subtract
efe0 : a50d                     lda ad1
efe2 : 6d0302                   adc ada2        ;perform add
efe5 : 08                       php
efe6 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
efe8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
efea : 68                       pla             ;check flags
efeb : 2901                     and #1          ;mask carry
efed : c510                     cmp adrh
                                trap_ne         ;bad carry
efef : d0fe            >        bne *           ;failed not equal (non zero)
                        
eff1 : 28                       plp
eff2 : 08                       php             ;save carry for next add
eff3 : a50d                     lda ad1
eff5 : ed0402                   sbc sba2        ;perform subtract
eff8 : 08                       php
eff9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
effb : d0fe            >        bne *           ;failed not equal (non zero)
                        
effd : 68                       pla             ;check flags
effe : 2901                     and #1          ;mask carry
f000 : c510                     cmp adrh
                                trap_ne         ;bad carry
f002 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f004 : 28                       plp
                        ; decimal ADC / SBC #
f005 : 08                       php             ;save carry for subtract
f006 : a50e                     lda ad2
f008 : 8d1302                   sta ex_adci+1   ;set ADC # operand
f00b : a50d                     lda ad1
f00d : 201202                   jsr ex_adci     ;execute ADC # in RAM
f010 : 08                       php
f011 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f013 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f015 : 68                       pla             ;check flags
f016 : 2901                     and #1          ;mask carry
f018 : c510                     cmp adrh
                                trap_ne         ;bad carry
f01a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f01c : 28                       plp
f01d : 08                       php             ;save carry for next add
f01e : a512                     lda sb2
f020 : 8d1602                   sta ex_sbci+1   ;set SBC # operand
f023 : a50d                     lda ad1
f025 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
f028 : 08                       php
f029 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f02b : d0fe            >        bne *           ;failed not equal (non zero)
                        
f02d : 68                       pla             ;check flags
f02e : 2901                     and #1          ;mask carry
f030 : c510                     cmp adrh
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne         ;bad carry
f032 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f034 : 28                       plp
                        ; decimal ADC / SBC zp,x
f035 : 08                       php             ;save carry for subtract
f036 : a50d                     lda ad1
f038 : 7500                     adc 0,x         ;perform add
f03a : 08                       php
f03b : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f03d : d0fe            >        bne *           ;failed not equal (non zero)
                        
f03f : 68                       pla             ;check flags
f040 : 2901                     and #1          ;mask carry
f042 : c510                     cmp adrh
                                trap_ne         ;bad carry
f044 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f046 : 28                       plp
f047 : 08                       php             ;save carry for next add
f048 : a50d                     lda ad1
f04a : f504                     sbc sb2-ad2,x   ;perform subtract
f04c : 08                       php
f04d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f04f : d0fe            >        bne *           ;failed not equal (non zero)
                        
f051 : 68                       pla             ;check flags
f052 : 2901                     and #1          ;mask carry
f054 : c510                     cmp adrh
                                trap_ne         ;bad carry
f056 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f058 : 28                       plp
                        ; decimal ADC / SBC abs,x
f059 : 08                       php             ;save carry for subtract
f05a : a50d                     lda ad1
f05c : 7df501                   adc ada2-ad2,x  ;perform add
f05f : 08                       php
f060 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f062 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f064 : 68                       pla             ;check flags
f065 : 2901                     and #1          ;mask carry
f067 : c510                     cmp adrh
                                trap_ne         ;bad carry
f069 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f06b : 28                       plp
f06c : 08                       php             ;save carry for next add
f06d : a50d                     lda ad1
f06f : fdf601                   sbc sba2-ad2,x  ;perform subtract
f072 : 08                       php
f073 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f075 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f077 : 68                       pla             ;check flags
f078 : 2901                     and #1          ;mask carry
f07a : c510                     cmp adrh
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne         ;bad carry
f07c : d0fe            >        bne *           ;failed not equal (non zero)
                        
f07e : 28                       plp
                        ; decimal ADC / SBC abs,y
f07f : 08                       php             ;save carry for subtract
f080 : a50d                     lda ad1
f082 : 790401                   adc ada2-$ff,y  ;perform add
f085 : 08                       php
f086 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f088 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f08a : 68                       pla             ;check flags
f08b : 2901                     and #1          ;mask carry
f08d : c510                     cmp adrh
                                trap_ne         ;bad carry
f08f : d0fe            >        bne *           ;failed not equal (non zero)
                        
f091 : 28                       plp
f092 : 08                       php             ;save carry for next add
f093 : a50d                     lda ad1
f095 : f90501                   sbc sba2-$ff,y  ;perform subtract
f098 : 08                       php
f099 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f09b : d0fe            >        bne *           ;failed not equal (non zero)
                        
f09d : 68                       pla             ;check flags
f09e : 2901                     and #1          ;mask carry
f0a0 : c510                     cmp adrh
                                trap_ne         ;bad carry
f0a2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0a4 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
f0a5 : 08                       php             ;save carry for subtract
f0a6 : a50d                     lda ad1
f0a8 : 6146                     adc (lo adi2-ad2,x) ;perform add
f0aa : 08                       php
f0ab : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f0ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0af : 68                       pla             ;check flags
f0b0 : 2901                     and #1          ;mask carry
f0b2 : c510                     cmp adrh
                                trap_ne         ;bad carry
f0b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0b6 : 28                       plp
f0b7 : 08                       php             ;save carry for next add
f0b8 : a50d                     lda ad1
f0ba : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
f0bc : 08                       php
f0bd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f0bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0c1 : 68                       pla             ;check flags
f0c2 : 2901                     and #1          ;mask carry
f0c4 : c510                     cmp adrh
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne         ;bad carry
f0c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0c8 : 28                       plp
                        ; decimal ADC / SBC (abs),y
f0c9 : 08                       php             ;save carry for subtract
f0ca : a50d                     lda ad1
f0cc : 7158                     adc (adiy2),y   ;perform add
f0ce : 08                       php
f0cf : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f0d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0d3 : 68                       pla             ;check flags
f0d4 : 2901                     and #1          ;mask carry
f0d6 : c510                     cmp adrh
                                trap_ne         ;bad carry
f0d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0da : 28                       plp
f0db : 08                       php             ;save carry for next add
f0dc : a50d                     lda ad1
f0de : f15a                     sbc (sbiy2),y   ;perform subtract
f0e0 : 08                       php
f0e1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f0e3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0e5 : 68                       pla             ;check flags
f0e6 : 2901                     and #1          ;mask carry
f0e8 : c510                     cmp adrh
                                trap_ne         ;bad carry
f0ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
f0ec : 28                       plp
f0ed : 60                       rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and ca
                        ; uses increments/decrements to predict result & resul
f0ee : a511             chkadd  lda adrf        ;add V-flag if overflow
f0f0 : 2983                     and #$83        ;keep N-----ZC / clear V
f0f2 : 48                       pha
f0f3 : a50d                     lda ad1         ;test sign unequal between ope
f0f5 : 450e                     eor ad2
f0f7 : 300a                     bmi ckad1       ;no overflow possible - operan
f0f9 : a50d                     lda ad1         ;test sign equal between opera
f0fb : 450f                     eor adrl
f0fd : 1004                     bpl ckad1       ;no overflow occured - operand
f0ff : 68                       pla
f100 : 0940                     ora #$40        ;set V
f102 : 48                       pha
f103 : 68               ckad1   pla
f104 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
f106 : 08                       php             ;save carry for subtract
f107 : a50d                     lda ad1
f109 : 650e                     adc ad2         ;perform add
f10b : 08                       php
f10c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------- 6502_functional_test.a65 --------------------------

f10e : d0fe            >        bne *           ;failed not equal (non zero)
                        
f110 : 68                       pla             ;check flags
f111 : 29c3                     and #$c3        ;mask NV----ZC
f113 : c511                     cmp adrf
                                trap_ne         ;bad flags
f115 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f117 : 28                       plp
f118 : 08                       php             ;save carry for next add
f119 : a50d                     lda ad1
f11b : e512                     sbc sb2         ;perform subtract
f11d : 08                       php
f11e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f120 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f122 : 68                       pla             ;check flags
f123 : 29c3                     and #$c3        ;mask NV----ZC
f125 : c511                     cmp adrf
                                trap_ne         ;bad flags
f127 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f129 : 28                       plp
                        ; binary ADC / SBC abs
f12a : 08                       php             ;save carry for subtract
f12b : a50d                     lda ad1
f12d : 6d0302                   adc ada2        ;perform add
f130 : 08                       php
f131 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f133 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f135 : 68                       pla             ;check flags
f136 : 29c3                     and #$c3        ;mask NV----ZC
f138 : c511                     cmp adrf
                                trap_ne         ;bad flags
f13a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f13c : 28                       plp
f13d : 08                       php             ;save carry for next add
f13e : a50d                     lda ad1
f140 : ed0402                   sbc sba2        ;perform subtract
f143 : 08                       php
f144 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f146 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f148 : 68                       pla             ;check flags
f149 : 29c3                     and #$c3        ;mask NV----ZC
f14b : c511                     cmp adrf
                                trap_ne         ;bad flags
f14d : d0fe            >        bne *           ;failed not equal (non zero)
                        
f14f : 28                       plp
                        ; binary ADC / SBC #
f150 : 08                       php             ;save carry for subtract
f151 : a50e                     lda ad2
f153 : 8d1302                   sta ex_adci+1   ;set ADC # operand
f156 : a50d                     lda ad1
f158 : 201202                   jsr ex_adci     ;execute ADC # in RAM
f15b : 08                       php
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------- 6502_functional_test.a65 --------------------------

f15c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f15e : d0fe            >        bne *           ;failed not equal (non zero)
                        
f160 : 68                       pla             ;check flags
f161 : 29c3                     and #$c3        ;mask NV----ZC
f163 : c511                     cmp adrf
                                trap_ne         ;bad flags
f165 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f167 : 28                       plp
f168 : 08                       php             ;save carry for next add
f169 : a512                     lda sb2
f16b : 8d1602                   sta ex_sbci+1   ;set SBC # operand
f16e : a50d                     lda ad1
f170 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
f173 : 08                       php
f174 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f176 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f178 : 68                       pla             ;check flags
f179 : 29c3                     and #$c3        ;mask NV----ZC
f17b : c511                     cmp adrf
                                trap_ne         ;bad flags
f17d : d0fe            >        bne *           ;failed not equal (non zero)
                        
f17f : 28                       plp
                        ; binary ADC / SBC zp,x
f180 : 08                       php             ;save carry for subtract
f181 : a50d                     lda ad1
f183 : 7500                     adc 0,x         ;perform add
f185 : 08                       php
f186 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f188 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f18a : 68                       pla             ;check flags
f18b : 29c3                     and #$c3        ;mask NV----ZC
f18d : c511                     cmp adrf
                                trap_ne         ;bad flags
f18f : d0fe            >        bne *           ;failed not equal (non zero)
                        
f191 : 28                       plp
f192 : 08                       php             ;save carry for next add
f193 : a50d                     lda ad1
f195 : f504                     sbc sb2-ad2,x   ;perform subtract
f197 : 08                       php
f198 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f19a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f19c : 68                       pla             ;check flags
f19d : 29c3                     and #$c3        ;mask NV----ZC
f19f : c511                     cmp adrf
                                trap_ne         ;bad flags
f1a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1a3 : 28                       plp
                        ; binary ADC / SBC abs,x
f1a4 : 08                       php             ;save carry for subtract
f1a5 : a50d                     lda ad1
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------- 6502_functional_test.a65 --------------------------

f1a7 : 7df501                   adc ada2-ad2,x  ;perform add
f1aa : 08                       php
f1ab : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f1ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1af : 68                       pla             ;check flags
f1b0 : 29c3                     and #$c3        ;mask NV----ZC
f1b2 : c511                     cmp adrf
                                trap_ne         ;bad flags
f1b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1b6 : 28                       plp
f1b7 : 08                       php             ;save carry for next add
f1b8 : a50d                     lda ad1
f1ba : fdf601                   sbc sba2-ad2,x  ;perform subtract
f1bd : 08                       php
f1be : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f1c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1c2 : 68                       pla             ;check flags
f1c3 : 29c3                     and #$c3        ;mask NV----ZC
f1c5 : c511                     cmp adrf
                                trap_ne         ;bad flags
f1c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1c9 : 28                       plp
                        ; binary ADC / SBC abs,y
f1ca : 08                       php             ;save carry for subtract
f1cb : a50d                     lda ad1
f1cd : 790401                   adc ada2-$ff,y  ;perform add
f1d0 : 08                       php
f1d1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f1d3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1d5 : 68                       pla             ;check flags
f1d6 : 29c3                     and #$c3        ;mask NV----ZC
f1d8 : c511                     cmp adrf
                                trap_ne         ;bad flags
f1da : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1dc : 28                       plp
f1dd : 08                       php             ;save carry for next add
f1de : a50d                     lda ad1
f1e0 : f90501                   sbc sba2-$ff,y  ;perform subtract
f1e3 : 08                       php
f1e4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f1e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1e8 : 68                       pla             ;check flags
f1e9 : 29c3                     and #$c3        ;mask NV----ZC
f1eb : c511                     cmp adrf
                                trap_ne         ;bad flags
f1ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1ef : 28                       plp
                        ; binary ADC / SBC (zp,x)
f1f0 : 08                       php             ;save carry for subtract
f1f1 : a50d                     lda ad1
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------- 6502_functional_test.a65 --------------------------

f1f3 : 6146                     adc (lo adi2-ad2,x) ;perform add
f1f5 : 08                       php
f1f6 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f1f8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f1fa : 68                       pla             ;check flags
f1fb : 29c3                     and #$c3        ;mask NV----ZC
f1fd : c511                     cmp adrf
                                trap_ne         ;bad flags
f1ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
f201 : 28                       plp
f202 : 08                       php             ;save carry for next add
f203 : a50d                     lda ad1
f205 : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
f207 : 08                       php
f208 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f20a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f20c : 68                       pla             ;check flags
f20d : 29c3                     and #$c3        ;mask NV----ZC
f20f : c511                     cmp adrf
                                trap_ne         ;bad flags
f211 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f213 : 28                       plp
                        ; binary ADC / SBC (abs),y
f214 : 08                       php             ;save carry for subtract
f215 : a50d                     lda ad1
f217 : 7158                     adc (adiy2),y   ;perform add
f219 : 08                       php
f21a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f21c : d0fe            >        bne *           ;failed not equal (non zero)
                        
f21e : 68                       pla             ;check flags
f21f : 29c3                     and #$c3        ;mask NV----ZC
f221 : c511                     cmp adrf
                                trap_ne         ;bad flags
f223 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f225 : 28                       plp
f226 : 08                       php             ;save carry for next add
f227 : a50d                     lda ad1
f229 : f15a                     sbc (sbiy2),y   ;perform subtract
f22b : 08                       php
f22c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
f22e : d0fe            >        bne *           ;failed not equal (non zero)
                        
f230 : 68                       pla             ;check flags
f231 : 29c3                     and #$c3        ;mask NV----ZC
f233 : c511                     cmp adrf
                                trap_ne         ;bad flags
f235 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f237 : 28                       plp
f238 : 60                       rts
                        
                        ; target for the jump absolute test
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------- 6502_functional_test.a65 --------------------------

f239 : 88                       dey
f23a : 88                       dey
f23b :                  test_far
f23b : 08                       php             ;either SP or Y count will fai
f23c : 88                       dey
f23d : 88                       dey
f23e : 88                       dey
f23f : 28                       plp
                                trap_cs         ;flags loaded?
f240 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
f242 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
f244 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
f246 : f0fe            >        beq *           ;failed equal (zero)
                        
f248 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
f24a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f24c : e041                     cpx #'A'
                                trap_ne
f24e : d0fe            >        bne *           ;failed not equal (non zero)
                        
f250 : c04f                     cpy #('R'-3)
                                trap_ne
f252 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f254 : 48                       pha             ;save a,x
f255 : 8a                       txa
f256 : 48                       pha
f257 : ba                       tsx
f258 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
f25a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f25c : 68                       pla             ;restore x
f25d : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
f25e : a9ff            >            lda #$ff             ;allow test to change
                       >
f260 : 48              >            pha         ;use stack to load status
f261 : 28              >            plp
                        
f262 : 68                       pla             ;restore a
f263 : e8                       inx             ;return registers with modific
f264 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
f266 : 4c22c4                   jmp far_ret
                        
                        ; target for the jump indirect test
f269 : 00                       align
f26a : 73f2             ptr_tst_ind dw test_ind
f26c : 77c4             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
f26e : 4c6ef2          >        jmp *           ;failed anyway
                        
f271 : 88                       dey
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------- 6502_functional_test.a65 --------------------------

f272 : 88                       dey
f273 :                  test_ind
f273 : 08                       php             ;either SP or Y count will fai
f274 : 88                       dey
f275 : 88                       dey
f276 : 88                       dey
f277 : 28                       plp
                                trap_cs         ;flags loaded?
f278 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
f27a : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
f27c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
f27e : f0fe            >        beq *           ;failed equal (zero)
                        
f280 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
f282 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f284 : e04e                     cpx #'N'
                                trap_ne
f286 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f288 : c041                     cpy #('D'-3)
                                trap_ne
f28a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f28c : 48                       pha             ;save a,x
f28d : 8a                       txa
f28e : 48                       pha
f28f : ba                       tsx
f290 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
f292 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f294 : 68                       pla             ;restore x
f295 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
f296 : a9ff            >            lda #$ff             ;allow test to change
                       >
f298 : 48              >            pha         ;use stack to load status
f299 : 28              >            plp
                        
f29a : 68                       pla             ;restore a
f29b : e8                       inx             ;return registers with modific
f29c : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
f29e : 6c6cf2                   jmp (ptr_ind_ret)
                                trap            ;runover protection
f2a1 : 4ca1f2          >        jmp *           ;failed anyway
                        
f2a4 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                        ; target for the jump subroutine test
f2a7 : 88                       dey
f2a8 : 88                       dey
f2a9 :                  test_jsr
f2a9 : 08                       php             ;either SP or Y count will fai
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------- 6502_functional_test.a65 --------------------------

f2aa : 88                       dey
f2ab : 88                       dey
f2ac : 88                       dey
f2ad : 28                       plp
                                trap_cs         ;flags loaded?
f2ae : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
f2b0 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
f2b2 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
f2b4 : f0fe            >        beq *           ;failed equal (zero)
                        
f2b6 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
f2b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f2ba : e053                     cpx #'S'
                                trap_ne
f2bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
f2be : c04f                     cpy #('R'-3)
                                trap_ne
f2c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f2c2 : 48                       pha             ;save a,x
f2c3 : 8a                       txa
f2c4 : 48                       pha
f2c5 : ba                       tsx             ;sp -4? (return addr,a,x)
f2c6 : e0fb                     cpx #$fb
                                trap_ne
f2c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f2ca : adff01                   lda $1ff        ;propper return on stack
f2cd : c9c4                     cmp #hi(jsr_ret)
                                trap_ne
f2cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
f2d1 : adfe01                   lda $1fe
f2d4 : c9ad                     cmp #lo(jsr_ret)
                                trap_ne
f2d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
f2d8 : a9ff            >            lda #$ff             ;allow test to change
                       >
f2da : 48              >            pha         ;use stack to load status
f2db : 28              >            plp
                        
f2dc : 68                       pla             ;pull x,a
f2dd : aa                       tax
f2de : 68                       pla
f2df : e8                       inx             ;return registers with modific
f2e0 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
f2e2 : 60                       rts
                                trap            ;runover protection
f2e3 : 4ce3f2          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------- 6502_functional_test.a65 --------------------------

f2e6 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK
f2e9 :                  nmi_trap
                                trap            ;check stack for conditions at
f2e9 : 4ce9f2          >        jmp *           ;failed anyway
                        
f2ec : 4c00c0                   jmp start       ;catastrophic error - cannot c
f2ef :                  res_trap
                                trap            ;unexpected RESET
f2ef : 4ceff2          >        jmp *           ;failed anyway
                        
f2f2 : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
f2f5 : 88                       dey
f2f6 : 88                       dey
f2f7 :                  irq_trap                ;BRK test or unextpected BRK o
f2f7 : 08                       php             ;either SP or Y count will fai
f2f8 : 88                       dey
f2f9 : 88                       dey
f2fa : 88                       dey
                                ;next traps could be caused by unexpected BRK 
                                ;check stack for BREAK and originating locatio
                                ;possible jump/branch into weeds (uninitialize
f2fb : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
f2fd : f042                     beq break2
f2ff : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
f301 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f303 : e052                     cpx #'R'
                                trap_ne
f305 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f307 : c048                     cpy #'K'-3
                                trap_ne
f309 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f30b : 850a                     sta irq_a       ;save registers during break t
f30d : 860b                     stx irq_x
f30f : ba                       tsx             ;test break on stack
f310 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & 
f313 : c930            >            cmp #(0      |fao)&m8    ;expected flags +
                        
                                trap_ne         ; - no break flag on stack
f315 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f317 : 68                       pla
                                cmp_flag intdis ;should have added interrupt d
f318 : c934            >            cmp #(intdis |fao)&m8    ;expected flags +
                        
                                trap_ne
f31a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f31c : ba                       tsx
f31d : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
f31f : d0fe            >        bne *           ;failed not equal (non zero)
                        
f321 : adff01                   lda $1ff        ;propper return on stack
f324 : c9c4                     cmp #hi(brk_ret0)
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne
f326 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f328 : adfe01                   lda $1fe
f32b : c9e4                     cmp #lo(brk_ret0)
                                trap_ne
f32d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
f32f : a9ff            >            lda #$ff             ;allow test to change
                        
f331 : 48                       pha
f332 : a60b                     ldx irq_x
f334 : e8                       inx             ;return registers with modific
f335 : a50a                     lda irq_a
f337 : 49aa                     eor #$aa
f339 : 28                       plp             ;N=1, V=1, Z=1, C=1 but origin
f33a : 40                       rti
                                trap            ;runover protection
f33b : 4c3bf3          >        jmp *           ;failed anyway
                        
f33e : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
f341 :                  break2                  ;BRK pass 2
f341 : e0ad                     cpx #$ff-'R'
                                trap_ne
f343 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f345 : c0b1                     cpy #$ff-'K'-3
                                trap_ne
f347 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f349 : 850a                     sta irq_a       ;save registers during break t
f34b : 860b                     stx irq_x
f34d : ba                       tsx             ;test break on stack
f34e : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
f351 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags +
                        
                                trap_ne         ; - no break flag on stack
f353 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f355 : 68                       pla
f356 : 0908                     ora #decmode    ;ignore decmode cleared if 65c
                                cmp_flag $ff    ;actual passed flags
f358 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags +
                        
                                trap_ne
f35a : d0fe            >        bne *           ;failed not equal (non zero)
                        
f35c : ba                       tsx
f35d : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
f35f : d0fe            >        bne *           ;failed not equal (non zero)
                        
f361 : adff01                   lda $1ff        ;propper return on stack
f364 : c9c5                     cmp #hi(brk_ret1)
                                trap_ne
f366 : d0fe            >        bne *           ;failed not equal (non zero)
                        
f368 : adfe01                   lda $1fe
f36b : c90a                     cmp #lo(brk_ret1)
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------- 6502_functional_test.a65 --------------------------

                                trap_ne
f36d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
f36f : a904            >            lda #intdis             ;allow test to cha
                        
f371 : 48                       pha
f372 : a60b                     ldx irq_x
f374 : e8                       inx             ;return registers with modific
f375 : a50a                     lda irq_a
f377 : 49aa                     eor #$aa
f379 : 28                       plp             ;N=0, V=0, Z=0, C=0 but origin
f37a : 40                       rti
                                trap            ;runover protection
f37b : 4c7bf3          >        jmp *           ;failed anyway
                        
f37e : 4c00c0                   jmp start       ;catastrophic error - cannot c
                        
                            if report = 1
                                include "report.i65"
                            endif
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
f381 :                  zp_init
f381 : 8001             zps_    db  $80,1           ;additional shift pattern 
f383 : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT
f387 : 7f               zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
f388 : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
f38c : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
f390 : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
f394 : 1802             ind1_   dw  abs1            ;indirect pointer to patte
f396 : 1902                     dw  abs1+1
f398 : 1a02                     dw  abs1+2
f39a : 1b02                     dw  abs1+3
f39c : 1c02                     dw  abs7f
f39e : 2001             inw1_   dw  abs1-$f8        ;indirect pointer for wrap
f3a0 : 0302             indt_   dw  abst            ;indirect pointer to store
f3a2 : 0402                     dw  abst+1
f3a4 : 0502                     dw  abst+2
f3a6 : 0602                     dw  abst+3
f3a8 : 0b01             inwt_   dw  abst-$f8        ;indirect pointer for wrap
f3aa : 5f02             indAN_  dw  absAN           ;indirect pointer to AND p
f3ac : 6002                     dw  absAN+1
f3ae : 6102                     dw  absAN+2
f3b0 : 6202                     dw  absAN+3
f3b2 : 6302             indEO_  dw  absEO           ;indirect pointer to EOR p
f3b4 : 6402                     dw  absEO+1
f3b6 : 6502                     dw  absEO+2
f3b8 : 6602                     dw  absEO+3
f3ba : 5b02             indOR_  dw  absOR           ;indirect pointer to OR pa
f3bc : 5c02                     dw  absOR+1
f3be : 5d02                     dw  absOR+2
f3c0 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
f3c2 : 0302             adi2_   dw  ada2            ;indirect pointer to opera
f3c4 : 0402             sbi2_   dw  sba2            ;indirect pointer to compl
f3c6 : 0401             adiy2_  dw  ada2-$ff        ;with offset for indirect 
f3c8 : 0501             sbiy2_  dw  sba2-$ff
f3ca :                  zp_end
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------- 6502_functional_test.a65 --------------------------

                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and 
                            endif
f3ca :                  data_init
f3ca : 2900             ex_and_ and #0              ;execute immediate opcodes
f3cc : 60                       rts
f3cd : 4900             ex_eor_ eor #0              ;execute immediate opcodes
f3cf : 60                       rts
f3d0 : 0900             ex_ora_ ora #0              ;execute immediate opcodes
f3d2 : 60                       rts
f3d3 : 6900             ex_adc_ adc #0              ;execute immediate opcodes
f3d5 : 60                       rts
f3d6 : e900             ex_sbc_ sbc #0              ;execute immediate opcodes
f3d8 : 60                       rts
                        ;zps    db  $80,1           ;additional shift patterns
f3d9 : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT
f3dd : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
f3de : 80800002         fLDx_   db  fn,fn,0,fz              ;expected flags fo
                        ;shifts
f3e2 :                  rASL_                               ;expected result A
f3e2 : 000286048200     rROL_   db  0,2,$86,$04,$82,0
f3e8 : 010387058301     rROLc_  db  1,3,$87,$05,$83,1       ;expected result R
f3ee :                  rLSR_                               ;expected result L
f3ee : 400061412000     rROR_   db  $40,0,$61,$41,$20,0
f3f4 : c080e1c1a080     rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result R
f3fa :                  fASL_                               ;expected flags fo
f3fa : 030081018002     fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
f400 : 010081018000     fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in
f406 :                  fLSR_
f406 : 000301000102     fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
f40c : 808181808180     fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
f412 : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1         ;expected result f
f417 : 0080800200       fINC_   db  0,fn,fn,fz,0            ;expected flags fo
                        ;logical memory operand
f41c : 001f7180         absOR_  db  0,$1f,$71,$80           ;test pattern for 
f420 : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80         ;test pattern for 
f424 : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for 
                        ;logical accu operand
f428 : 00f11f00         absORa_ db  0,$f1,$1f,0             ;test pattern for 
f42c : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for 
f430 : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for 
                        ;logical results
f434 : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
f438 : 02800080         absflo_ db  fz,fn,0,fn
f43c :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and 
                            endif
                        
f43c :                  vec_init
f43c : e9f2                     dw  nmi_trap
f43e : eff2                     dw  res_trap
f440 : f7f2                     dw  irq_trap
fffa =                  vec_bss equ $fffa
                            endif                   ;end of RAM init data
                        
                            if (ROM_vectors = 1)
fffa =                          org $fffa       ;vectors
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------- 6502_functional_test.a65 --------------------------

fffa : e9f2                     dw  nmi_trap
fffc : 00c0                     dw  start
fffe : f7f2                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
Program start address is at $c000 (49152).
